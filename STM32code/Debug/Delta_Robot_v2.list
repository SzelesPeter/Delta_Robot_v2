
Delta_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ba8  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  08013e00  08013e00  00014e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bb0  08014bb0  00016200  2**0
                  CONTENTS
  4 .ARM          00000008  08014bb0  08014bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bb8  08014bb8  00016200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bb8  08014bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014bbc  08014bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08014bc0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b1c4  20000200  08014dc0  00016200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003b3c4  08014dc0  000163c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002268e  00000000  00000000  00016236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004232  00000000  00000000  000388c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  0003e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd95  00000000  00000000  0003fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002563f  00000000  00000000  0006fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012715e  00000000  00000000  000950ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009340  00000000  00000000  001bc24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001c558c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000200 	.word	0x20000200
 8000274:	00000000 	.word	0x00000000
 8000278:	08013de8 	.word	0x08013de8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000204 	.word	0x20000204
 8000294:	08013de8 	.word	0x08013de8

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Hall_Sensor_Read_Magnitude>:
 */

#include "AS5048A_P.h"

uint16_t Hall_Sensor_Read_Magnitude(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af02      	add	r7, sp, #8
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = magnitude_adress;
 8001042:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001046:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f004 fc62 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001054:	f107 0216 	add.w	r2, r7, #22
 8001058:	f107 0116 	add.w	r1, r7, #22
 800105c:	2364      	movs	r3, #100	@ 0x64
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f009 f9da 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	f004 fc52 	bl	8005918 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f004 fc4a 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 8001084:	f107 0216 	add.w	r2, r7, #22
 8001088:	f107 0116 	add.w	r1, r7, #22
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f009 f9c2 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f004 fc3a 	bl	8005918 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 80010a4:	2300      	movs	r3, #0
 80010a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f004 fc32 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010b4:	f107 0216 	add.w	r2, r7, #22
 80010b8:	f107 0116 	add.w	r1, r7, #22
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f009 f9aa 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f004 fc22 	bl	8005918 <HAL_GPIO_WritePin>
	return tmp;
 80010d4:	8afb      	ldrh	r3, [r7, #22]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <Hall_Sensor_Read_Angle>:



uint16_t Hall_Sensor_Read_Angle(SPI_HandleTypeDef* SPI,GPIO_TypeDef* SS_PORT, uint16_t SS_PIN)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	tmp = angle_adress;
 80010ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f0:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f004 fc0d 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 80010fe:	f107 0216 	add.w	r2, r7, #22
 8001102:	f107 0116 	add.w	r1, r7, #22
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f009 f985 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f004 fbfd 	bl	8005918 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800111e:	2300      	movs	r3, #0
 8001120:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f004 fbf5 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800112e:	f107 0216 	add.w	r2, r7, #22
 8001132:	f107 0116 	add.w	r1, r7, #22
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f009 f96d 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f004 fbe5 	bl	8005918 <HAL_GPIO_WritePin>
	tmp = NOP_command;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_RESET);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f004 fbdd 	bl	8005918 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(SPI, &tmp, &tmp, 1, 100);
 800115e:	f107 0216 	add.w	r2, r7, #22
 8001162:	f107 0116 	add.w	r1, r7, #22
 8001166:	2364      	movs	r3, #100	@ 0x64
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f009 f955 	bl	800a41c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_PORT, SS_PIN, GPIO_PIN_SET);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f004 fbcd 	bl	8005918 <HAL_GPIO_WritePin>
	return tmp;
 800117e:	8afb      	ldrh	r3, [r7, #22]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Relay_0_Set>:
 */

#include "Delta_Robot_P.h"

void Relay_0_Set(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <Relay_0_Set+0x14>)
 8001192:	f004 fbc1 	bl	8005918 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42020800 	.word	0x42020800

080011a0 <Relay_0_Reset>:

void Relay_0_Reset(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY0_PORT, RELAY0_PIN, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <Relay_0_Reset+0x14>)
 80011aa:	f004 fbb5 	bl	8005918 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	42020800 	.word	0x42020800

080011b8 <Relay_0_Read>:

uint8_t Relay_0_Read(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RELAY0_PORT, RELAY0_PIN);
 80011bc:	2110      	movs	r1, #16
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <Relay_0_Read+0x14>)
 80011c0:	f004 fb92 	bl	80058e8 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	42020800 	.word	0x42020800

080011d0 <Relay_1_Set>:

void Relay_1_Set(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <Relay_1_Set+0x14>)
 80011dc:	f004 fb9c 	bl	8005918 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	42020400 	.word	0x42020400

080011e8 <Relay_1_Reset>:

void Relay_1_Reset(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	4802      	ldr	r0, [pc, #8]	@ (80011fc <Relay_1_Reset+0x14>)
 80011f4:	f004 fb90 	bl	8005918 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	42020400 	.word	0x42020400

08001200 <Move_to_XYZ>:
 */
#include "stm32h5xx_hal.h"
extern UART_HandleTypeDef huart1;
#include "Inverz_Kinematika_P.h"
void  Move_to_XYZ(double X_target, double Y_target, double Z_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b0ac      	sub	sp, #176	@ 0xb0
 8001208:	af06      	add	r7, sp, #24
 800120a:	ed87 0b08 	vstr	d0, [r7, #32]
 800120e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001212:	ed87 2b04 	vstr	d2, [r7, #16]
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 800121e:	a3ef      	add	r3, pc, #956	@ (adr r3, 80015dc <Move_to_XYZ+0x3dc>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	//-----------------------------Motor 0
	X_target_forgatott = X_target;
 8001228:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800122c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	Y_target_forgatott = Y_target;
 8001230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001234:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001238:	ed9f 1bdd 	vldr	d1, [pc, #884]	@ 80015b0 <Move_to_XYZ+0x3b0>
 800123c:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001240:	f010 fbe6 	bl	8011a10 <pow>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	a1e6      	add	r1, pc, #920	@ (adr r1, 80015e4 <Move_to_XYZ+0x3e4>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff f82f 	bl	80002b0 <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	ec43 2b17 	vmov	d7, r2, r3
 800125a:	eeb0 0a47 	vmov.f32	s0, s14
 800125e:	eef0 0a67 	vmov.f32	s1, s15
 8001262:	f010 fc45 	bl	8011af0 <sqrt>
 8001266:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4bd8      	ldr	r3, [pc, #864]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 8001270:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001274:	f7ff f81e 	bl	80002b4 <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	f04f 0000 	mov.w	r0, #0
 8001280:	49d4      	ldr	r1, [pc, #848]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 8001282:	f7ff f815 	bl	80002b0 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ec43 2b17 	vmov	d7, r2, r3
 800128e:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001292:	eeb0 0a47 	vmov.f32	s0, s14
 8001296:	eef0 0a67 	vmov.f32	s1, s15
 800129a:	f010 fbb9 	bl	8011a10 <pow>
 800129e:	ec55 4b10 	vmov	r4, r5, d0
 80012a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a6:	a1c4      	add	r1, pc, #784	@ (adr r1, 80015b8 <Move_to_XYZ+0x3b8>)
 80012a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ac:	f7ff f800 	bl	80002b0 <__aeabi_dsub>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	ed9f 1bbd 	vldr	d1, [pc, #756]	@ 80015b0 <Move_to_XYZ+0x3b0>
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	f010 fba4 	bl	8011a10 <pow>
 80012c8:	ec53 2b10 	vmov	r2, r3, d0
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe fff0 	bl	80002b4 <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b17 	vmov	d7, r2, r3
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	f010 fc04 	bl	8011af0 <sqrt>
 80012e8:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 80012ec:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 80015b0 <Move_to_XYZ+0x3b0>
 80012f0:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80012f4:	f010 fb8c 	bl	8011a10 <pow>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	a1b0      	add	r1, pc, #704	@ (adr r1, 80015c0 <Move_to_XYZ+0x3c0>)
 80012fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001302:	f7fe ffd5 	bl	80002b0 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001312:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001316:	f010 fb7b 	bl	8011a10 <pow>
 800131a:	ec53 2b10 	vmov	r2, r3, d0
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ffc7 	bl	80002b4 <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	461d      	mov	r5, r3
 800132e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	f7fe ffbd 	bl	80002b4 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	f7ff fa97 	bl	8000874 <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 800134e:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001352:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001356:	f010 fb5b 	bl	8011a10 <pow>
 800135a:	ec53 2b10 	vmov	r2, r3, d0
 800135e:	a198      	add	r1, pc, #608	@ (adr r1, 80015c0 <Move_to_XYZ+0x3c0>)
 8001360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001364:	f7fe ffa4 	bl	80002b0 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	ec43 2b17 	vmov	d7, r2, r3
 8001370:	eeb0 0a47 	vmov.f32	s0, s14
 8001374:	eef0 0a67 	vmov.f32	s1, s15
 8001378:	f010 fbba 	bl	8011af0 <sqrt>
 800137c:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b92      	ldr	r3, [pc, #584]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 8001386:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800138a:	f7fe ff93 	bl	80002b4 <__adddf3>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b8e      	ldr	r3, [pc, #568]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 800139c:	f7fe ff88 	bl	80002b0 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013ac:	f7ff f938 	bl	8000620 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013bc:	f7ff fa5a 	bl	8000874 <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	a37b      	add	r3, pc, #492	@ (adr r3, 80015b8 <Move_to_XYZ+0x3b8>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d2:	f7fe ff6d 	bl	80002b0 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80013e2:	f7ff f91d 	bl	8000620 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013f2:	f7ff fa3f 	bl	8000874 <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe ff59 	bl	80002b4 <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b71      	ldr	r3, [pc, #452]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 8001410:	f7fe ff50 	bl	80002b4 <__adddf3>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800141c:	a366      	add	r3, pc, #408	@ (adr r3, 80015b8 <Move_to_XYZ+0x3b8>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001426:	f7fe ff43 	bl	80002b0 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001436:	f7ff fa1d 	bl	8000874 <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b62      	ldr	r3, [pc, #392]	@ (80015d0 <Move_to_XYZ+0x3d0>)
 8001448:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800144c:	f7fe ff32 	bl	80002b4 <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800145c:	f7ff f8e0 	bl	8000620 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7fe ff24 	bl	80002b4 <__adddf3>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b56      	ldr	r3, [pc, #344]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 800147a:	f7fe ff19 	bl	80002b0 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800148a:	f7ff f8c9 	bl	8000620 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800149a:	f7ff f9eb 	bl	8000874 <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	a344      	add	r3, pc, #272	@ (adr r3, 80015b8 <Move_to_XYZ+0x3b8>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7fe ff02 	bl	80002b4 <__adddf3>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80014b8:	a33f      	add	r3, pc, #252	@ (adr r3, 80015b8 <Move_to_XYZ+0x3b8>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80014c2:	f7fe fef5 	bl	80002b0 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ec43 2b18 	vmov	d8, r2, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <Move_to_XYZ+0x3d4>)
 80014d4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80014d8:	f7fe feea 	bl	80002b0 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b17 	vmov	d7, r2, r3
 80014e4:	eeb0 1a47 	vmov.f32	s2, s14
 80014e8:	eef0 1a67 	vmov.f32	s3, s15
 80014ec:	eeb0 0a48 	vmov.f32	s0, s16
 80014f0:	eef0 0a68 	vmov.f32	s1, s17
 80014f4:	f010 fa8a 	bl	8011a0c <atan2>
 80014f8:	ec51 0b10 	vmov	r0, r1, d0
 80014fc:	a332      	add	r3, pc, #200	@ (adr r3, 80015c8 <Move_to_XYZ+0x3c8>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f88d 	bl	8000620 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4614      	mov	r4, r2
 800150c:	461d      	mov	r5, r3
 800150e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	f7fe fecd 	bl	80002b4 <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff f9a7 	bl	8000874 <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	//-----------------------------Motor 1
	alpha = atan2(Y_target,X_target);
 800152e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001532:	ed97 0b06 	vldr	d0, [r7, #24]
 8001536:	f010 fa69 	bl	8011a0c <atan2>
 800153a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 800153e:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001542:	ed97 0b08 	vldr	d0, [r7, #32]
 8001546:	f010 fa63 	bl	8011a10 <pow>
 800154a:	ec55 4b10 	vmov	r4, r5, d0
 800154e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80015b0 <Move_to_XYZ+0x3b0>
 8001552:	ed97 0b06 	vldr	d0, [r7, #24]
 8001556:	f010 fa5b 	bl	8011a10 <pow>
 800155a:	ec53 2b10 	vmov	r2, r3, d0
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe fea7 	bl	80002b4 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b17 	vmov	d7, r2, r3
 800156e:	eeb0 0a47 	vmov.f32	s0, s14
 8001572:	eef0 0a67 	vmov.f32	s1, s15
 8001576:	f010 fabb 	bl	8011af0 <sqrt>
 800157a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	X_target_forgatott = r*cos(alpha + 2*PI/3);
 800157e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	f7fe fe95 	bl	80002b4 <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <Move_to_XYZ+0x3d8>)
 8001598:	f7ff f96c 	bl	8000874 <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015a8:	e020      	b.n	80015ec <Move_to_XYZ+0x3ec>
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40000000 	.word	0x40000000
 80015b8:	00000000 	.word	0x00000000
 80015bc:	4079a000 	.word	0x4079a000
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40d3f840 	.word	0x40d3f840
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40e38800 	.word	0x40e38800
 80015d0:	40418000 	.word	0x40418000
 80015d4:	40440000 	.word	0x40440000
 80015d8:	40080000 	.word	0x40080000
 80015dc:	54442d18 	.word	0x54442d18
 80015e0:	400921fb 	.word	0x400921fb
 80015e4:	00000000 	.word	0x00000000
 80015e8:	40fa9640 	.word	0x40fa9640
 80015ec:	f7fe fe62 	bl	80002b4 <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	ec43 2b17 	vmov	d7, r2, r3
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	eef0 0a67 	vmov.f32	s1, s15
 8001600:	f010 faa2 	bl	8011b48 <cos>
 8001604:	ec53 2b10 	vmov	r2, r3, d0
 8001608:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800160c:	f7ff f808 	bl	8000620 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	Y_target_forgatott = r*sin(alpha + 2*PI/3);
 8001618:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	f7fe fe48 	bl	80002b4 <__adddf3>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4bdb      	ldr	r3, [pc, #876]	@ (80019a0 <Move_to_XYZ+0x7a0>)
 8001632:	f7ff f91f 	bl	8000874 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001642:	f7fe fe37 	bl	80002b4 <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	ec43 2b17 	vmov	d7, r2, r3
 800164e:	eeb0 0a47 	vmov.f32	s0, s14
 8001652:	eef0 0a67 	vmov.f32	s1, s15
 8001656:	f010 facb 	bl	8011bf0 <sin>
 800165a:	ec53 2b10 	vmov	r2, r3, d0
 800165e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001662:	f7fe ffdd 	bl	8000620 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 800166e:	ed9f 1bc2 	vldr	d1, [pc, #776]	@ 8001978 <Move_to_XYZ+0x778>
 8001672:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001676:	f010 f9cb 	bl	8011a10 <pow>
 800167a:	ec53 2b10 	vmov	r2, r3, d0
 800167e:	a1c0      	add	r1, pc, #768	@ (adr r1, 8001980 <Move_to_XYZ+0x780>)
 8001680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001684:	f7fe fe14 	bl	80002b0 <__aeabi_dsub>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	f010 fa2a 	bl	8011af0 <sqrt>
 800169c:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4bbf      	ldr	r3, [pc, #764]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 80016a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80016aa:	f7fe fe03 	bl	80002b4 <__adddf3>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	49bc      	ldr	r1, [pc, #752]	@ (80019a8 <Move_to_XYZ+0x7a8>)
 80016b8:	f7fe fdfa 	bl	80002b0 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b17 	vmov	d7, r2, r3
 80016c4:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 8001978 <Move_to_XYZ+0x778>
 80016c8:	eeb0 0a47 	vmov.f32	s0, s14
 80016cc:	eef0 0a67 	vmov.f32	s1, s15
 80016d0:	f010 f99e 	bl	8011a10 <pow>
 80016d4:	ec55 4b10 	vmov	r4, r5, d0
 80016d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016dc:	a1aa      	add	r1, pc, #680	@ (adr r1, 8001988 <Move_to_XYZ+0x788>)
 80016de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016e2:	f7fe fde5 	bl	80002b0 <__aeabi_dsub>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ec43 2b17 	vmov	d7, r2, r3
 80016ee:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 8001978 <Move_to_XYZ+0x778>
 80016f2:	eeb0 0a47 	vmov.f32	s0, s14
 80016f6:	eef0 0a67 	vmov.f32	s1, s15
 80016fa:	f010 f989 	bl	8011a10 <pow>
 80016fe:	ec53 2b10 	vmov	r2, r3, d0
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fdd5 	bl	80002b4 <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b17 	vmov	d7, r2, r3
 8001712:	eeb0 0a47 	vmov.f32	s0, s14
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	f010 f9e9 	bl	8011af0 <sqrt>
 800171e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001722:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8001978 <Move_to_XYZ+0x778>
 8001726:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 800172a:	f010 f971 	bl	8011a10 <pow>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	a197      	add	r1, pc, #604	@ (adr r1, 8001990 <Move_to_XYZ+0x790>)
 8001734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001738:	f7fe fdba 	bl	80002b0 <__aeabi_dsub>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	461d      	mov	r5, r3
 8001744:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8001978 <Move_to_XYZ+0x778>
 8001748:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800174c:	f010 f960 	bl	8011a10 <pow>
 8001750:	ec53 2b10 	vmov	r2, r3, d0
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe fdac 	bl	80002b4 <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	f7fe fda2 	bl	80002b4 <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7ff f87c 	bl	8000874 <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001784:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8001978 <Move_to_XYZ+0x778>
 8001788:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800178c:	f010 f940 	bl	8011a10 <pow>
 8001790:	ec53 2b10 	vmov	r2, r3, d0
 8001794:	a17e      	add	r1, pc, #504	@ (adr r1, 8001990 <Move_to_XYZ+0x790>)
 8001796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800179a:	f7fe fd89 	bl	80002b0 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	ec43 2b17 	vmov	d7, r2, r3
 80017a6:	eeb0 0a47 	vmov.f32	s0, s14
 80017aa:	eef0 0a67 	vmov.f32	s1, s15
 80017ae:	f010 f99f 	bl	8011af0 <sqrt>
 80017b2:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b7a      	ldr	r3, [pc, #488]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 80017bc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80017c0:	f7fe fd78 	bl	80002b4 <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b75      	ldr	r3, [pc, #468]	@ (80019a8 <Move_to_XYZ+0x7a8>)
 80017d2:	f7fe fd6d 	bl	80002b0 <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80017e2:	f7fe ff1d 	bl	8000620 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017f2:	f7ff f83f 	bl	8000874 <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4614      	mov	r4, r2
 80017fc:	461d      	mov	r5, r3
 80017fe:	a362      	add	r3, pc, #392	@ (adr r3, 8001988 <Move_to_XYZ+0x788>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001808:	f7fe fd52 	bl	80002b0 <__aeabi_dsub>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001818:	f7fe ff02 	bl	8000620 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001828:	f7ff f824 	bl	8000874 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fd3e 	bl	80002b4 <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <Move_to_XYZ+0x7a8>)
 8001846:	f7fe fd35 	bl	80002b4 <__adddf3>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8001852:	a34d      	add	r3, pc, #308	@ (adr r3, 8001988 <Move_to_XYZ+0x788>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800185c:	f7fe fd28 	bl	80002b0 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800186c:	f7ff f802 	bl	8000874 <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <Move_to_XYZ+0x7a4>)
 800187e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001882:	f7fe fd17 	bl	80002b4 <__adddf3>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001892:	f7fe fec5 	bl	8000620 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd09 	bl	80002b4 <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <Move_to_XYZ+0x7a8>)
 80018b0:	f7fe fcfe 	bl	80002b0 <__aeabi_dsub>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80018c0:	f7fe feae 	bl	8000620 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018d0:	f7fe ffd0 	bl	8000874 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001988 <Move_to_XYZ+0x788>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fce7 	bl	80002b4 <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80018ee:	a326      	add	r3, pc, #152	@ (adr r3, 8001988 <Move_to_XYZ+0x788>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80018f8:	f7fe fcda 	bl	80002b0 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b18 	vmov	d8, r2, r3
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <Move_to_XYZ+0x7a8>)
 800190a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800190e:	f7fe fccf 	bl	80002b0 <__aeabi_dsub>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ec43 2b17 	vmov	d7, r2, r3
 800191a:	eeb0 1a47 	vmov.f32	s2, s14
 800191e:	eef0 1a67 	vmov.f32	s3, s15
 8001922:	eeb0 0a48 	vmov.f32	s0, s16
 8001926:	eef0 0a68 	vmov.f32	s1, s17
 800192a:	f010 f86f 	bl	8011a0c <atan2>
 800192e:	ec51 0b10 	vmov	r0, r1, d0
 8001932:	a319      	add	r3, pc, #100	@ (adr r3, 8001998 <Move_to_XYZ+0x798>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe72 	bl	8000620 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f7fe fcb2 	bl	80002b4 <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe ff8c 	bl	8000874 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	//-----------------------------Motor 2
		alpha = atan2(Y_target,X_target);
 8001964:	ed97 1b08 	vldr	d1, [r7, #32]
 8001968:	ed97 0b06 	vldr	d0, [r7, #24]
 800196c:	f010 f84e 	bl	8011a0c <atan2>
 8001970:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 8001974:	e01a      	b.n	80019ac <Move_to_XYZ+0x7ac>
 8001976:	bf00      	nop
 8001978:	00000000 	.word	0x00000000
 800197c:	40000000 	.word	0x40000000
 8001980:	00000000 	.word	0x00000000
 8001984:	40fa9640 	.word	0x40fa9640
 8001988:	00000000 	.word	0x00000000
 800198c:	4079a000 	.word	0x4079a000
 8001990:	00000000 	.word	0x00000000
 8001994:	40d3f840 	.word	0x40d3f840
 8001998:	00000000 	.word	0x00000000
 800199c:	40e38800 	.word	0x40e38800
 80019a0:	40080000 	.word	0x40080000
 80019a4:	40418000 	.word	0x40418000
 80019a8:	40440000 	.word	0x40440000
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 80019ac:	ed9f 1bda 	vldr	d1, [pc, #872]	@ 8001d18 <Move_to_XYZ+0xb18>
 80019b0:	ed97 0b08 	vldr	d0, [r7, #32]
 80019b4:	f010 f82c 	bl	8011a10 <pow>
 80019b8:	ec55 4b10 	vmov	r4, r5, d0
 80019bc:	ed9f 1bd6 	vldr	d1, [pc, #856]	@ 8001d18 <Move_to_XYZ+0xb18>
 80019c0:	ed97 0b06 	vldr	d0, [r7, #24]
 80019c4:	f010 f824 	bl	8011a10 <pow>
 80019c8:	ec53 2b10 	vmov	r2, r3, d0
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fc70 	bl	80002b4 <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
 80019dc:	eeb0 0a47 	vmov.f32	s0, s14
 80019e0:	eef0 0a67 	vmov.f32	s1, s15
 80019e4:	f010 f884 	bl	8011af0 <sqrt>
 80019e8:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
		X_target_forgatott = r*cos(alpha - 2*PI/3);
 80019ec:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f7fe fc5e 	bl	80002b4 <__adddf3>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4bcc      	ldr	r3, [pc, #816]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001a06:	f7fe ff35 	bl	8000874 <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a12:	f7fe fc4d 	bl	80002b0 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	ec43 2b17 	vmov	d7, r2, r3
 8001a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a22:	eef0 0a67 	vmov.f32	s1, s15
 8001a26:	f010 f88f 	bl	8011b48 <cos>
 8001a2a:	ec53 2b10 	vmov	r2, r3, d0
 8001a2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a32:	f7fe fdf5 	bl	8000620 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		Y_target_forgatott = r*sin(alpha - 2*PI/3);
 8001a3e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	f7fe fc35 	bl	80002b4 <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4bb8      	ldr	r3, [pc, #736]	@ (8001d38 <Move_to_XYZ+0xb38>)
 8001a58:	f7fe ff0c 	bl	8000874 <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a64:	f7fe fc24 	bl	80002b0 <__aeabi_dsub>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	ec43 2b17 	vmov	d7, r2, r3
 8001a70:	eeb0 0a47 	vmov.f32	s0, s14
 8001a74:	eef0 0a67 	vmov.f32	s1, s15
 8001a78:	f010 f8ba 	bl	8011bf0 <sin>
 8001a7c:	ec53 2b10 	vmov	r2, r3, d0
 8001a80:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a84:	f7fe fdcc 	bl	8000620 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
		sprintf(tx_buff, " \r\n %f \r\n",X_target_forgatott);
		for(uint8_t j=0;tx_buff[j];j++) HAL_UART_Transmit(&huart1, &tx_buff[j], 1, 1000);
		sprintf(tx_buff, " \r\n %f \r\n",Y_target_forgatott);
		for(uint8_t j=0;tx_buff[j];j++) HAL_UART_Transmit(&huart1, &tx_buff[j], 1, 1000);*/

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001a90:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001a94:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001a98:	f00f ffba 	bl	8011a10 <pow>
 8001a9c:	ec53 2b10 	vmov	r2, r3, d0
 8001aa0:	a19f      	add	r1, pc, #636	@ (adr r1, 8001d20 <Move_to_XYZ+0xb20>)
 8001aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa6:	f7fe fc03 	bl	80002b0 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ec43 2b17 	vmov	d7, r2, r3
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	f010 f819 	bl	8011af0 <sqrt>
 8001abe:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
		d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b9d      	ldr	r3, [pc, #628]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001ac8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001acc:	f7fe fbf2 	bl	80002b4 <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	4999      	ldr	r1, [pc, #612]	@ (8001d40 <Move_to_XYZ+0xb40>)
 8001ada:	f7fe fbe9 	bl	80002b0 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ec43 2b17 	vmov	d7, r2, r3
 8001ae6:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001aea:	eeb0 0a47 	vmov.f32	s0, s14
 8001aee:	eef0 0a67 	vmov.f32	s1, s15
 8001af2:	f00f ff8d 	bl	8011a10 <pow>
 8001af6:	ec55 4b10 	vmov	r4, r5, d0
 8001afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001afe:	a18a      	add	r1, pc, #552	@ (adr r1, 8001d28 <Move_to_XYZ+0xb28>)
 8001b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b04:	f7fe fbd4 	bl	80002b0 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	ec43 2b17 	vmov	d7, r2, r3
 8001b10:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b14:	eeb0 0a47 	vmov.f32	s0, s14
 8001b18:	eef0 0a67 	vmov.f32	s1, s15
 8001b1c:	f00f ff78 	bl	8011a10 <pow>
 8001b20:	ec53 2b10 	vmov	r2, r3, d0
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fbc4 	bl	80002b4 <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b17 	vmov	d7, r2, r3
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	f00f ffd8 	bl	8011af0 <sqrt>
 8001b40:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001b44:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b48:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8001b4c:	f00f ff60 	bl	8011a10 <pow>
 8001b50:	ec53 2b10 	vmov	r2, r3, d0
 8001b54:	a176      	add	r1, pc, #472	@ (adr r1, 8001d30 <Move_to_XYZ+0xb30>)
 8001b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b5a:	f7fe fba9 	bl	80002b0 <__aeabi_dsub>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	461d      	mov	r5, r3
 8001b66:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001b6a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001b6e:	f00f ff4f 	bl	8011a10 <pow>
 8001b72:	ec53 2b10 	vmov	r2, r3, d0
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fb9b 	bl	80002b4 <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4614      	mov	r4, r2
 8001b84:	461d      	mov	r5, r3
 8001b86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	f7fe fb91 	bl	80002b4 <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fe6b 	bl	8000874 <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001ba6:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 8001d18 <Move_to_XYZ+0xb18>
 8001baa:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001bae:	f00f ff2f 	bl	8011a10 <pow>
 8001bb2:	ec53 2b10 	vmov	r2, r3, d0
 8001bb6:	a15e      	add	r1, pc, #376	@ (adr r1, 8001d30 <Move_to_XYZ+0xb30>)
 8001bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bbc:	f7fe fb78 	bl	80002b0 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	ec43 2b17 	vmov	d7, r2, r3
 8001bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bcc:	eef0 0a67 	vmov.f32	s1, s15
 8001bd0:	f00f ff8e 	bl	8011af0 <sqrt>
 8001bd4:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

		Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001bde:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001be2:	f7fe fb67 	bl	80002b4 <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <Move_to_XYZ+0xb40>)
 8001bf4:	f7fe fb5c 	bl	80002b0 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001c04:	f7fe fd0c 	bl	8000620 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c14:	f7fe fe2e 	bl	8000874 <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	a341      	add	r3, pc, #260	@ (adr r3, 8001d28 <Move_to_XYZ+0xb28>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c2a:	f7fe fb41 	bl	80002b0 <__aeabi_dsub>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c3a:	f7fe fcf1 	bl	8000620 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c4a:	f7fe fe13 	bl	8000874 <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb2d 	bl	80002b4 <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <Move_to_XYZ+0xb40>)
 8001c68:	f7fe fb24 	bl	80002b4 <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8001c74:	a32c      	add	r3, pc, #176	@ (adr r3, 8001d28 <Move_to_XYZ+0xb28>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c7e:	f7fe fb17 	bl	80002b0 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c8e:	f7fe fdf1 	bl	8000874 <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b27      	ldr	r3, [pc, #156]	@ (8001d3c <Move_to_XYZ+0xb3c>)
 8001ca0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001ca4:	f7fe fb06 	bl	80002b4 <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001cb4:	f7fe fcb4 	bl	8000620 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe faf8 	bl	80002b4 <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <Move_to_XYZ+0xb40>)
 8001cd2:	f7fe faed 	bl	80002b0 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001ce2:	f7fe fc9d 	bl	8000620 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cf2:	f7fe fdbf 	bl	8000874 <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d28 <Move_to_XYZ+0xb28>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fad6 	bl	80002b4 <__adddf3>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001d10:	e018      	b.n	8001d44 <Move_to_XYZ+0xb44>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40000000 	.word	0x40000000
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40fa9640 	.word	0x40fa9640
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	4079a000 	.word	0x4079a000
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40d3f840 	.word	0x40d3f840
 8001d38:	40080000 	.word	0x40080000
 8001d3c:	40418000 	.word	0x40418000
 8001d40:	40440000 	.word	0x40440000

		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8001d44:	a333      	add	r3, pc, #204	@ (adr r3, 8001e14 <Move_to_XYZ+0xc14>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001d4e:	f7fe faaf 	bl	80002b0 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	ec43 2b18 	vmov	d8, r2, r3
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <Move_to_XYZ+0xc10>)
 8001d60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d64:	f7fe faa4 	bl	80002b0 <__aeabi_dsub>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b17 	vmov	d7, r2, r3
 8001d70:	eeb0 1a47 	vmov.f32	s2, s14
 8001d74:	eef0 1a67 	vmov.f32	s3, s15
 8001d78:	eeb0 0a48 	vmov.f32	s0, s16
 8001d7c:	eef0 0a68 	vmov.f32	s1, s17
 8001d80:	f00f fe44 	bl	8011a0c <atan2>
 8001d84:	ec51 0b10 	vmov	r0, r1, d0
 8001d88:	a31f      	add	r3, pc, #124	@ (adr r3, 8001e08 <Move_to_XYZ+0xc08>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fc47 	bl	8000620 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	f7fe fa87 	bl	80002b4 <__adddf3>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fd61 	bl	8000874 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	move (Theta0,Theta1,Theta2,tim1, Channel1, tim2, Channel2, tim3, Channel3);
 8001dba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001dbe:	f7fe fedf 	bl	8000b80 <__aeabi_d2iz>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dc8:	f7fe feda 	bl	8000b80 <__aeabi_d2iz>
 8001dcc:	4605      	mov	r5, r0
 8001dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dd2:	f7fe fed5 	bl	8000b80 <__aeabi_d2iz>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ddc:	9304      	str	r3, [sp, #16]
 8001dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4629      	mov	r1, r5
 8001df4:	4620      	mov	r0, r4
 8001df6:	f001 fd9f 	bl	8003938 <move>
}
 8001dfa:	bf00      	nop
 8001dfc:	3798      	adds	r7, #152	@ 0x98
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	ecbd 8b02 	vpop	{d8}
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40e38800 	.word	0x40e38800
 8001e10:	40440000 	.word	0x40440000
 8001e14:	00000000 	.word	0x00000000
 8001e18:	4079a000 	.word	0x4079a000
 8001e1c:	00000000 	.word	0x00000000

08001e20 <Zero_XYZ>:

void  Zero_XYZ(double X_target, double Y_target, double Z_target)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	ed2d 8b02 	vpush	{d8}
 8001e26:	b0a2      	sub	sp, #136	@ 0x88
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e2e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e32:	ed87 2b00 	vstr	d2, [r7]
	double Theta1;
	double Theta2;

	double X_target_forgatott;
	double Y_target_forgatott;
	const double PI = 3.141592653589793;
 8001e36:	a3ef      	add	r3, pc, #956	@ (adr r3, 80021f4 <Zero_XYZ+0x3d4>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double h;
	double Arm_joint_X;
	double Arm_joint_Z;

	//-----------------------------Motor 0
	X_target_forgatott = X_target;
 8001e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e44:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = Y_target;
 8001e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e4c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8001e50:	ed9f 1bdd 	vldr	d1, [pc, #884]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001e54:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001e58:	f00f fdda 	bl	8011a10 <pow>
 8001e5c:	ec53 2b10 	vmov	r2, r3, d0
 8001e60:	a1e6      	add	r1, pc, #920	@ (adr r1, 80021fc <Zero_XYZ+0x3dc>)
 8001e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e66:	f7fe fa23 	bl	80002b0 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ec43 2b17 	vmov	d7, r2, r3
 8001e72:	eeb0 0a47 	vmov.f32	s0, s14
 8001e76:	eef0 0a67 	vmov.f32	s1, s15
 8001e7a:	f00f fe39 	bl	8011af0 <sqrt>
 8001e7e:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4bd8      	ldr	r3, [pc, #864]	@ (80021e8 <Zero_XYZ+0x3c8>)
 8001e88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e8c:	f7fe fa12 	bl	80002b4 <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	49d4      	ldr	r1, [pc, #848]	@ (80021ec <Zero_XYZ+0x3cc>)
 8001e9a:	f7fe fa09 	bl	80002b0 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	ec43 2b17 	vmov	d7, r2, r3
 8001ea6:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8001eae:	eef0 0a67 	vmov.f32	s1, s15
 8001eb2:	f00f fdad 	bl	8011a10 <pow>
 8001eb6:	ec55 4b10 	vmov	r4, r5, d0
 8001eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ebe:	a1c4      	add	r1, pc, #784	@ (adr r1, 80021d0 <Zero_XYZ+0x3b0>)
 8001ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ec4:	f7fe f9f4 	bl	80002b0 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	ec43 2b17 	vmov	d7, r2, r3
 8001ed0:	ed9f 1bbd 	vldr	d1, [pc, #756]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed8:	eef0 0a67 	vmov.f32	s1, s15
 8001edc:	f00f fd98 	bl	8011a10 <pow>
 8001ee0:	ec53 2b10 	vmov	r2, r3, d0
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f9e4 	bl	80002b4 <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	ec43 2b17 	vmov	d7, r2, r3
 8001ef4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef8:	eef0 0a67 	vmov.f32	s1, s15
 8001efc:	f00f fdf8 	bl	8011af0 <sqrt>
 8001f00:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 8001f04:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001f08:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8001f0c:	f00f fd80 	bl	8011a10 <pow>
 8001f10:	ec53 2b10 	vmov	r2, r3, d0
 8001f14:	a1b0      	add	r1, pc, #704	@ (adr r1, 80021d8 <Zero_XYZ+0x3b8>)
 8001f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f1a:	f7fe f9c9 	bl	80002b0 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	461d      	mov	r5, r3
 8001f26:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001f2a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f2e:	f00f fd6f 	bl	8011a10 <pow>
 8001f32:	ec53 2b10 	vmov	r2, r3, d0
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f9bb 	bl	80002b4 <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4614      	mov	r4, r2
 8001f44:	461d      	mov	r5, r3
 8001f46:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	f7fe f9b1 	bl	80002b4 <__adddf3>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe fc8b 	bl	8000874 <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 8001f66:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80021c8 <Zero_XYZ+0x3a8>
 8001f6a:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8001f6e:	f00f fd4f 	bl	8011a10 <pow>
 8001f72:	ec53 2b10 	vmov	r2, r3, d0
 8001f76:	a198      	add	r1, pc, #608	@ (adr r1, 80021d8 <Zero_XYZ+0x3b8>)
 8001f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f7c:	f7fe f998 	bl	80002b0 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	f00f fdae 	bl	8011af0 <sqrt>
 8001f94:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b92      	ldr	r3, [pc, #584]	@ (80021e8 <Zero_XYZ+0x3c8>)
 8001f9e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001fa2:	f7fe f987 	bl	80002b4 <__adddf3>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <Zero_XYZ+0x3cc>)
 8001fb4:	f7fe f97c 	bl	80002b0 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fc4:	f7fe fb2c 	bl	8000620 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001fd4:	f7fe fc4e 	bl	8000874 <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
 8001fe0:	a37b      	add	r3, pc, #492	@ (adr r3, 80021d0 <Zero_XYZ+0x3b0>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fea:	f7fe f961 	bl	80002b0 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ffa:	f7fe fb11 	bl	8000620 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800200a:	f7fe fc33 	bl	8000874 <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe f94d 	bl	80002b4 <__adddf3>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <Zero_XYZ+0x3cc>)
 8002028:	f7fe f944 	bl	80002b4 <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 8002034:	a366      	add	r3, pc, #408	@ (adr r3, 80021d0 <Zero_XYZ+0x3b0>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800203e:	f7fe f937 	bl	80002b0 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800204e:	f7fe fc11 	bl	8000874 <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4614      	mov	r4, r2
 8002058:	461d      	mov	r5, r3
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <Zero_XYZ+0x3c8>)
 8002060:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002064:	f7fe f926 	bl	80002b4 <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002074:	f7fe fad4 	bl	8000620 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4620      	mov	r0, r4
 800207e:	4629      	mov	r1, r5
 8002080:	f7fe f918 	bl	80002b4 <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b56      	ldr	r3, [pc, #344]	@ (80021ec <Zero_XYZ+0x3cc>)
 8002092:	f7fe f90d 	bl	80002b0 <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020a2:	f7fe fabd 	bl	8000620 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020b2:	f7fe fbdf 	bl	8000874 <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	a344      	add	r3, pc, #272	@ (adr r3, 80021d0 <Zero_XYZ+0x3b0>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe f8f6 	bl	80002b4 <__adddf3>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta0 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 80020d0:	a33f      	add	r3, pc, #252	@ (adr r3, 80021d0 <Zero_XYZ+0x3b0>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020da:	f7fe f8e9 	bl	80002b0 <__aeabi_dsub>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	ec43 2b18 	vmov	d8, r2, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b40      	ldr	r3, [pc, #256]	@ (80021ec <Zero_XYZ+0x3cc>)
 80020ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80020f0:	f7fe f8de 	bl	80002b0 <__aeabi_dsub>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b17 	vmov	d7, r2, r3
 80020fc:	eeb0 1a47 	vmov.f32	s2, s14
 8002100:	eef0 1a67 	vmov.f32	s3, s15
 8002104:	eeb0 0a48 	vmov.f32	s0, s16
 8002108:	eef0 0a68 	vmov.f32	s1, s17
 800210c:	f00f fc7e 	bl	8011a0c <atan2>
 8002110:	ec51 0b10 	vmov	r0, r1, d0
 8002114:	a332      	add	r3, pc, #200	@ (adr r3, 80021e0 <Zero_XYZ+0x3c0>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fa81 	bl	8000620 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4614      	mov	r4, r2
 8002124:	461d      	mov	r5, r3
 8002126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	f7fe f8c1 	bl	80002b4 <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe fb9b 	bl	8000874 <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	//-----------------------------Motor 1
	alpha = atan2(Y_target,X_target);
 8002146:	ed97 1b04 	vldr	d1, [r7, #16]
 800214a:	ed97 0b02 	vldr	d0, [r7, #8]
 800214e:	f00f fc5d 	bl	8011a0c <atan2>
 8002152:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	r = sqrt(pow(X_target,2)+pow(Y_target,2));
 8002156:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80021c8 <Zero_XYZ+0x3a8>
 800215a:	ed97 0b04 	vldr	d0, [r7, #16]
 800215e:	f00f fc57 	bl	8011a10 <pow>
 8002162:	ec55 4b10 	vmov	r4, r5, d0
 8002166:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80021c8 <Zero_XYZ+0x3a8>
 800216a:	ed97 0b02 	vldr	d0, [r7, #8]
 800216e:	f00f fc4f 	bl	8011a10 <pow>
 8002172:	ec53 2b10 	vmov	r2, r3, d0
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fe f89b 	bl	80002b4 <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	ec43 2b17 	vmov	d7, r2, r3
 8002186:	eeb0 0a47 	vmov.f32	s0, s14
 800218a:	eef0 0a67 	vmov.f32	s1, s15
 800218e:	f00f fcaf 	bl	8011af0 <sqrt>
 8002192:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	X_target_forgatott = r*cos(alpha + 2*PI/3);
 8002196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	f7fe f889 	bl	80002b4 <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <Zero_XYZ+0x3d0>)
 80021b0:	f7fe fb60 	bl	8000874 <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021c0:	e020      	b.n	8002204 <Zero_XYZ+0x3e4>
 80021c2:	bf00      	nop
 80021c4:	f3af 8000 	nop.w
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40000000 	.word	0x40000000
 80021d0:	00000000 	.word	0x00000000
 80021d4:	4079a000 	.word	0x4079a000
 80021d8:	00000000 	.word	0x00000000
 80021dc:	40d3f840 	.word	0x40d3f840
 80021e0:	00000000 	.word	0x00000000
 80021e4:	40e38800 	.word	0x40e38800
 80021e8:	40418000 	.word	0x40418000
 80021ec:	40440000 	.word	0x40440000
 80021f0:	40080000 	.word	0x40080000
 80021f4:	54442d18 	.word	0x54442d18
 80021f8:	400921fb 	.word	0x400921fb
 80021fc:	00000000 	.word	0x00000000
 8002200:	40fa9640 	.word	0x40fa9640
 8002204:	f7fe f856 	bl	80002b4 <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	ec43 2b17 	vmov	d7, r2, r3
 8002210:	eeb0 0a47 	vmov.f32	s0, s14
 8002214:	eef0 0a67 	vmov.f32	s1, s15
 8002218:	f00f fc96 	bl	8011b48 <cos>
 800221c:	ec53 2b10 	vmov	r2, r3, d0
 8002220:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002224:	f7fe f9fc 	bl	8000620 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	Y_target_forgatott = r*sin(alpha + 2*PI/3);
 8002230:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	f7fe f83c 	bl	80002b4 <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4bdb      	ldr	r3, [pc, #876]	@ (80025b8 <Zero_XYZ+0x798>)
 800224a:	f7fe fb13 	bl	8000874 <__aeabi_ddiv>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800225a:	f7fe f82b 	bl	80002b4 <__adddf3>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b17 	vmov	d7, r2, r3
 8002266:	eeb0 0a47 	vmov.f32	s0, s14
 800226a:	eef0 0a67 	vmov.f32	s1, s15
 800226e:	f00f fcbf 	bl	8011bf0 <sin>
 8002272:	ec53 2b10 	vmov	r2, r3, d0
 8002276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800227a:	f7fe f9d1 	bl	8000620 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 8002286:	ed9f 1bc2 	vldr	d1, [pc, #776]	@ 8002590 <Zero_XYZ+0x770>
 800228a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800228e:	f00f fbbf 	bl	8011a10 <pow>
 8002292:	ec53 2b10 	vmov	r2, r3, d0
 8002296:	a1c0      	add	r1, pc, #768	@ (adr r1, 8002598 <Zero_XYZ+0x778>)
 8002298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800229c:	f7fe f808 	bl	80002b0 <__aeabi_dsub>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	ec43 2b17 	vmov	d7, r2, r3
 80022a8:	eeb0 0a47 	vmov.f32	s0, s14
 80022ac:	eef0 0a67 	vmov.f32	s1, s15
 80022b0:	f00f fc1e 	bl	8011af0 <sqrt>
 80022b4:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4bbf      	ldr	r3, [pc, #764]	@ (80025bc <Zero_XYZ+0x79c>)
 80022be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80022c2:	f7fd fff7 	bl	80002b4 <__adddf3>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	49bc      	ldr	r1, [pc, #752]	@ (80025c0 <Zero_XYZ+0x7a0>)
 80022d0:	f7fd ffee 	bl	80002b0 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	ec43 2b17 	vmov	d7, r2, r3
 80022dc:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 8002590 <Zero_XYZ+0x770>
 80022e0:	eeb0 0a47 	vmov.f32	s0, s14
 80022e4:	eef0 0a67 	vmov.f32	s1, s15
 80022e8:	f00f fb92 	bl	8011a10 <pow>
 80022ec:	ec55 4b10 	vmov	r4, r5, d0
 80022f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f4:	a1aa      	add	r1, pc, #680	@ (adr r1, 80025a0 <Zero_XYZ+0x780>)
 80022f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022fa:	f7fd ffd9 	bl	80002b0 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	ec43 2b17 	vmov	d7, r2, r3
 8002306:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 8002590 <Zero_XYZ+0x770>
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f00f fb7d 	bl	8011a10 <pow>
 8002316:	ec53 2b10 	vmov	r2, r3, d0
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fd ffc9 	bl	80002b4 <__adddf3>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	ec43 2b17 	vmov	d7, r2, r3
 800232a:	eeb0 0a47 	vmov.f32	s0, s14
 800232e:	eef0 0a67 	vmov.f32	s1, s15
 8002332:	f00f fbdd 	bl	8011af0 <sqrt>
 8002336:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 800233a:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8002590 <Zero_XYZ+0x770>
 800233e:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8002342:	f00f fb65 	bl	8011a10 <pow>
 8002346:	ec53 2b10 	vmov	r2, r3, d0
 800234a:	a197      	add	r1, pc, #604	@ (adr r1, 80025a8 <Zero_XYZ+0x788>)
 800234c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002350:	f7fd ffae 	bl	80002b0 <__aeabi_dsub>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8002590 <Zero_XYZ+0x770>
 8002360:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002364:	f00f fb54 	bl	8011a10 <pow>
 8002368:	ec53 2b10 	vmov	r2, r3, d0
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ffa0 	bl	80002b4 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4614      	mov	r4, r2
 800237a:	461d      	mov	r5, r3
 800237c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	f7fd ff96 	bl	80002b4 <__adddf3>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4620      	mov	r0, r4
 800238e:	4629      	mov	r1, r5
 8002390:	f7fe fa70 	bl	8000874 <__aeabi_ddiv>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 800239c:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8002590 <Zero_XYZ+0x770>
 80023a0:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80023a4:	f00f fb34 	bl	8011a10 <pow>
 80023a8:	ec53 2b10 	vmov	r2, r3, d0
 80023ac:	a17e      	add	r1, pc, #504	@ (adr r1, 80025a8 <Zero_XYZ+0x788>)
 80023ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023b2:	f7fd ff7d 	bl	80002b0 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ec43 2b17 	vmov	d7, r2, r3
 80023be:	eeb0 0a47 	vmov.f32	s0, s14
 80023c2:	eef0 0a67 	vmov.f32	s1, s15
 80023c6:	f00f fb93 	bl	8011af0 <sqrt>
 80023ca:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

	Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b7a      	ldr	r3, [pc, #488]	@ (80025bc <Zero_XYZ+0x79c>)
 80023d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80023d8:	f7fd ff6c 	bl	80002b4 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b75      	ldr	r3, [pc, #468]	@ (80025c0 <Zero_XYZ+0x7a0>)
 80023ea:	f7fd ff61 	bl	80002b0 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023fa:	f7fe f911 	bl	8000620 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800240a:	f7fe fa33 	bl	8000874 <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4614      	mov	r4, r2
 8002414:	461d      	mov	r5, r3
 8002416:	a362      	add	r3, pc, #392	@ (adr r3, 80025a0 <Zero_XYZ+0x780>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002420:	f7fd ff46 	bl	80002b0 <__aeabi_dsub>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002430:	f7fe f8f6 	bl	8000620 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002440:	f7fe fa18 	bl	8000874 <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff32 	bl	80002b4 <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <Zero_XYZ+0x7a0>)
 800245e:	f7fd ff29 	bl	80002b4 <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800246a:	a34d      	add	r3, pc, #308	@ (adr r3, 80025a0 <Zero_XYZ+0x780>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002474:	f7fd ff1c 	bl	80002b0 <__aeabi_dsub>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002484:	f7fe f9f6 	bl	8000874 <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <Zero_XYZ+0x79c>)
 8002496:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800249a:	f7fd ff0b 	bl	80002b4 <__adddf3>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024aa:	f7fe f8b9 	bl	8000620 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fefd 	bl	80002b4 <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <Zero_XYZ+0x7a0>)
 80024c8:	f7fd fef2 	bl	80002b0 <__aeabi_dsub>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024d8:	f7fe f8a2 	bl	8000620 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024e8:	f7fe f9c4 	bl	8000874 <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	a32a      	add	r3, pc, #168	@ (adr r3, 80025a0 <Zero_XYZ+0x780>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fd fedb 	bl	80002b4 <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	Theta1 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 8002506:	a326      	add	r3, pc, #152	@ (adr r3, 80025a0 <Zero_XYZ+0x780>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002510:	f7fd fece 	bl	80002b0 <__aeabi_dsub>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	ec43 2b18 	vmov	d8, r2, r3
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <Zero_XYZ+0x7a0>)
 8002522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002526:	f7fd fec3 	bl	80002b0 <__aeabi_dsub>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	ec43 2b17 	vmov	d7, r2, r3
 8002532:	eeb0 1a47 	vmov.f32	s2, s14
 8002536:	eef0 1a67 	vmov.f32	s3, s15
 800253a:	eeb0 0a48 	vmov.f32	s0, s16
 800253e:	eef0 0a68 	vmov.f32	s1, s17
 8002542:	f00f fa63 	bl	8011a0c <atan2>
 8002546:	ec51 0b10 	vmov	r0, r1, d0
 800254a:	a319      	add	r3, pc, #100	@ (adr r3, 80025b0 <Zero_XYZ+0x790>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f866 	bl	8000620 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	f7fd fea6 	bl	80002b4 <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f980 	bl	8000874 <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//-----------------------------Motor 2
		alpha = atan2(Y_target,X_target);
 800257c:	ed97 1b04 	vldr	d1, [r7, #16]
 8002580:	ed97 0b02 	vldr	d0, [r7, #8]
 8002584:	f00f fa42 	bl	8011a0c <atan2>
 8002588:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800258c:	e01a      	b.n	80025c4 <Zero_XYZ+0x7a4>
 800258e:	bf00      	nop
 8002590:	00000000 	.word	0x00000000
 8002594:	40000000 	.word	0x40000000
 8002598:	00000000 	.word	0x00000000
 800259c:	40fa9640 	.word	0x40fa9640
 80025a0:	00000000 	.word	0x00000000
 80025a4:	4079a000 	.word	0x4079a000
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40d3f840 	.word	0x40d3f840
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40e38800 	.word	0x40e38800
 80025b8:	40080000 	.word	0x40080000
 80025bc:	40418000 	.word	0x40418000
 80025c0:	40440000 	.word	0x40440000
		r = sqrt(pow(X_target,2)+pow(Y_target,2));
 80025c4:	ed9f 1bda 	vldr	d1, [pc, #872]	@ 8002930 <Zero_XYZ+0xb10>
 80025c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80025cc:	f00f fa20 	bl	8011a10 <pow>
 80025d0:	ec55 4b10 	vmov	r4, r5, d0
 80025d4:	ed9f 1bd6 	vldr	d1, [pc, #856]	@ 8002930 <Zero_XYZ+0xb10>
 80025d8:	ed97 0b02 	vldr	d0, [r7, #8]
 80025dc:	f00f fa18 	bl	8011a10 <pow>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fd fe64 	bl	80002b4 <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	ec43 2b17 	vmov	d7, r2, r3
 80025f4:	eeb0 0a47 	vmov.f32	s0, s14
 80025f8:	eef0 0a67 	vmov.f32	s1, s15
 80025fc:	f00f fa78 	bl	8011af0 <sqrt>
 8002600:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
		X_target_forgatott = r*cos(alpha - 2*PI/3);
 8002604:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	f7fd fe52 	bl	80002b4 <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	4bcc      	ldr	r3, [pc, #816]	@ (8002950 <Zero_XYZ+0xb30>)
 800261e:	f7fe f929 	bl	8000874 <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800262a:	f7fd fe41 	bl	80002b0 <__aeabi_dsub>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b17 	vmov	d7, r2, r3
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	eef0 0a67 	vmov.f32	s1, s15
 800263e:	f00f fa83 	bl	8011b48 <cos>
 8002642:	ec53 2b10 	vmov	r2, r3, d0
 8002646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800264a:	f7fd ffe9 	bl	8000620 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		Y_target_forgatott = r*sin(alpha - 2*PI/3);
 8002656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	f7fd fe29 	bl	80002b4 <__adddf3>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	4bb8      	ldr	r3, [pc, #736]	@ (8002950 <Zero_XYZ+0xb30>)
 8002670:	f7fe f900 	bl	8000874 <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800267c:	f7fd fe18 	bl	80002b0 <__aeabi_dsub>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	ec43 2b17 	vmov	d7, r2, r3
 8002688:	eeb0 0a47 	vmov.f32	s0, s14
 800268c:	eef0 0a67 	vmov.f32	s1, s15
 8002690:	f00f faae 	bl	8011bf0 <sin>
 8002694:	ec53 2b10 	vmov	r2, r3, d0
 8002698:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800269c:	f7fd ffc0 	bl	8000620 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

		also_arm_lenght_XZ = sqrt(pow(also_arm_lenght, 2) - pow((Y_target_forgatott), 2));
 80026a8:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8002930 <Zero_XYZ+0xb10>
 80026ac:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80026b0:	f00f f9ae 	bl	8011a10 <pow>
 80026b4:	ec53 2b10 	vmov	r2, r3, d0
 80026b8:	a19f      	add	r1, pc, #636	@ (adr r1, 8002938 <Zero_XYZ+0xb18>)
 80026ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026be:	f7fd fdf7 	bl	80002b0 <__aeabi_dsub>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b17 	vmov	d7, r2, r3
 80026ca:	eeb0 0a47 	vmov.f32	s0, s14
 80026ce:	eef0 0a67 	vmov.f32	s1, s15
 80026d2:	f00f fa0d 	bl	8011af0 <sqrt>
 80026d6:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
		d = sqrt(pow(motor_offset-(X_target_forgatott+effektor_offset), 2) + pow(motor_height-Z_target, 2));
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b9d      	ldr	r3, [pc, #628]	@ (8002954 <Zero_XYZ+0xb34>)
 80026e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026e4:	f7fd fde6 	bl	80002b4 <__adddf3>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	4999      	ldr	r1, [pc, #612]	@ (8002958 <Zero_XYZ+0xb38>)
 80026f2:	f7fd fddd 	bl	80002b0 <__aeabi_dsub>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	ec43 2b17 	vmov	d7, r2, r3
 80026fe:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8002930 <Zero_XYZ+0xb10>
 8002702:	eeb0 0a47 	vmov.f32	s0, s14
 8002706:	eef0 0a67 	vmov.f32	s1, s15
 800270a:	f00f f981 	bl	8011a10 <pow>
 800270e:	ec55 4b10 	vmov	r4, r5, d0
 8002712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002716:	a18a      	add	r1, pc, #552	@ (adr r1, 8002940 <Zero_XYZ+0xb20>)
 8002718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800271c:	f7fd fdc8 	bl	80002b0 <__aeabi_dsub>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	ec43 2b17 	vmov	d7, r2, r3
 8002728:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 8002930 <Zero_XYZ+0xb10>
 800272c:	eeb0 0a47 	vmov.f32	s0, s14
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	f00f f96c 	bl	8011a10 <pow>
 8002738:	ec53 2b10 	vmov	r2, r3, d0
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd fdb8 	bl	80002b4 <__adddf3>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b17 	vmov	d7, r2, r3
 800274c:	eeb0 0a47 	vmov.f32	s0, s14
 8002750:	eef0 0a67 	vmov.f32	s1, s15
 8002754:	f00f f9cc 	bl	8011af0 <sqrt>
 8002758:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
		l = (pow(upper_arm_lenght, 2) - pow(also_arm_lenght_XZ, 2) + pow(d, 2))/(2*d);
 800275c:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002930 <Zero_XYZ+0xb10>
 8002760:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8002764:	f00f f954 	bl	8011a10 <pow>
 8002768:	ec53 2b10 	vmov	r2, r3, d0
 800276c:	a176      	add	r1, pc, #472	@ (adr r1, 8002948 <Zero_XYZ+0xb28>)
 800276e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002772:	f7fd fd9d 	bl	80002b0 <__aeabi_dsub>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4614      	mov	r4, r2
 800277c:	461d      	mov	r5, r3
 800277e:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8002930 <Zero_XYZ+0xb10>
 8002782:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002786:	f00f f943 	bl	8011a10 <pow>
 800278a:	ec53 2b10 	vmov	r2, r3, d0
 800278e:	4620      	mov	r0, r4
 8002790:	4629      	mov	r1, r5
 8002792:	f7fd fd8f 	bl	80002b4 <__adddf3>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4614      	mov	r4, r2
 800279c:	461d      	mov	r5, r3
 800279e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	f7fd fd85 	bl	80002b4 <__adddf3>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f85f 	bl	8000874 <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		h = sqrt(pow(upper_arm_lenght, 2) - pow(l, 2));
 80027be:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 8002930 <Zero_XYZ+0xb10>
 80027c2:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80027c6:	f00f f923 	bl	8011a10 <pow>
 80027ca:	ec53 2b10 	vmov	r2, r3, d0
 80027ce:	a15e      	add	r1, pc, #376	@ (adr r1, 8002948 <Zero_XYZ+0xb28>)
 80027d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027d4:	f7fd fd6c 	bl	80002b0 <__aeabi_dsub>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	ec43 2b17 	vmov	d7, r2, r3
 80027e0:	eeb0 0a47 	vmov.f32	s0, s14
 80027e4:	eef0 0a67 	vmov.f32	s1, s15
 80027e8:	f00f f982 	bl	8011af0 <sqrt>
 80027ec:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

		Arm_joint_X = l*((X_target_forgatott+effektor_offset) - motor_offset)/d + h*(Z_target - motor_height)/d + motor_offset;
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b57      	ldr	r3, [pc, #348]	@ (8002954 <Zero_XYZ+0xb34>)
 80027f6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80027fa:	f7fd fd5b 	bl	80002b4 <__adddf3>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <Zero_XYZ+0xb38>)
 800280c:	f7fd fd50 	bl	80002b0 <__aeabi_dsub>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800281c:	f7fd ff00 	bl	8000620 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800282c:	f7fe f822 	bl	8000874 <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	a341      	add	r3, pc, #260	@ (adr r3, 8002940 <Zero_XYZ+0xb20>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002842:	f7fd fd35 	bl	80002b0 <__aeabi_dsub>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002852:	f7fd fee5 	bl	8000620 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002862:	f7fe f807 	bl	8000874 <__aeabi_ddiv>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fd21 	bl	80002b4 <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b36      	ldr	r3, [pc, #216]	@ (8002958 <Zero_XYZ+0xb38>)
 8002880:	f7fd fd18 	bl	80002b4 <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		Arm_joint_Z = l*((Z_target - motor_height)/d + h*(X_target_forgatott+effektor_offset) - motor_offset)/d + motor_height;
 800288c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002940 <Zero_XYZ+0xb20>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002896:	f7fd fd0b 	bl	80002b0 <__aeabi_dsub>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80028a6:	f7fd ffe5 	bl	8000874 <__aeabi_ddiv>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4614      	mov	r4, r2
 80028b0:	461d      	mov	r5, r3
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <Zero_XYZ+0xb34>)
 80028b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028bc:	f7fd fcfa 	bl	80002b4 <__adddf3>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028cc:	f7fd fea8 	bl	8000620 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4620      	mov	r0, r4
 80028d6:	4629      	mov	r1, r5
 80028d8:	f7fd fcec 	bl	80002b4 <__adddf3>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <Zero_XYZ+0xb38>)
 80028ea:	f7fd fce1 	bl	80002b0 <__aeabi_dsub>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028fa:	f7fd fe91 	bl	8000620 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800290a:	f7fd ffb3 	bl	8000874 <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	a30a      	add	r3, pc, #40	@ (adr r3, 8002940 <Zero_XYZ+0xb20>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd fcca 	bl	80002b4 <__adddf3>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002928:	e018      	b.n	800295c <Zero_XYZ+0xb3c>
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w
 8002930:	00000000 	.word	0x00000000
 8002934:	40000000 	.word	0x40000000
 8002938:	00000000 	.word	0x00000000
 800293c:	40fa9640 	.word	0x40fa9640
 8002940:	00000000 	.word	0x00000000
 8002944:	4079a000 	.word	0x4079a000
 8002948:	00000000 	.word	0x00000000
 800294c:	40d3f840 	.word	0x40d3f840
 8002950:	40080000 	.word	0x40080000
 8002954:	40418000 	.word	0x40418000
 8002958:	40440000 	.word	0x40440000

		Theta2 =40000 * atan2((Arm_joint_Z-motor_height),(Arm_joint_X-motor_offset)) /(2*PI);
 800295c:	a32f      	add	r3, pc, #188	@ (adr r3, 8002a1c <Zero_XYZ+0xbfc>)
 800295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002962:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002966:	f7fd fca3 	bl	80002b0 <__aeabi_dsub>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	ec43 2b18 	vmov	d8, r2, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <Zero_XYZ+0xbf8>)
 8002978:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800297c:	f7fd fc98 	bl	80002b0 <__aeabi_dsub>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	ec43 2b17 	vmov	d7, r2, r3
 8002988:	eeb0 1a47 	vmov.f32	s2, s14
 800298c:	eef0 1a67 	vmov.f32	s3, s15
 8002990:	eeb0 0a48 	vmov.f32	s0, s16
 8002994:	eef0 0a68 	vmov.f32	s1, s17
 8002998:	f00f f838 	bl	8011a0c <atan2>
 800299c:	ec51 0b10 	vmov	r0, r1, d0
 80029a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002a10 <Zero_XYZ+0xbf0>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fe3b 	bl	8000620 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4614      	mov	r4, r2
 80029b0:	461d      	mov	r5, r3
 80029b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	f7fd fc7b 	bl	80002b4 <__adddf3>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4620      	mov	r0, r4
 80029c4:	4629      	mov	r1, r5
 80029c6:	f7fd ff55 	bl	8000874 <__aeabi_ddiv>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	e9c7 2306 	strd	r2, r3, [r7, #24]

	Set_M_Poz_0(Theta0);
 80029d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80029d6:	f7fe f8fb 	bl	8000bd0 <__aeabi_d2uiz>
 80029da:	4603      	mov	r3, r0
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f91d 	bl	8003c1c <Set_M_Poz_0>
	Set_M_Poz_1(Theta1);
 80029e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e6:	f7fe f8f3 	bl	8000bd0 <__aeabi_d2uiz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f925 	bl	8003c3c <Set_M_Poz_1>
	Set_M_Poz_2(Theta2);
 80029f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029f6:	f7fe f8eb 	bl	8000bd0 <__aeabi_d2uiz>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f92d 	bl	8003c5c <Set_M_Poz_2>
}
 8002a02:	bf00      	nop
 8002a04:	3788      	adds	r7, #136	@ 0x88
 8002a06:	46bd      	mov	sp, r7
 8002a08:	ecbd 8b02 	vpop	{d8}
 8002a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	00000000 	.word	0x00000000
 8002a14:	40e38800 	.word	0x40e38800
 8002a18:	40440000 	.word	0x40440000
 8002a1c:	00000000 	.word	0x00000000
 8002a20:	4079a000 	.word	0x4079a000

08002a24 <Menu_UART_Start>:


void (*Menu_State)(UART_HandleTypeDef *huart) = Menu_UART_Main;

void Menu_UART_Start(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0f0      	sub	sp, #448	@ 0x1c0
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a2e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a32:	6018      	str	r0, [r3, #0]
	uint8_t Banner[] = {"\r\n         :::::::::   ::::::::::  :::     :::::::::::  :::  \r\n        :+:    :+:  :+:         :+:         :+:    :+: :+: \r\n       +:+    +:+  +:+         +:+         +:+   +:+   +:+ \r\n      +#+    +:+  +#++:++#    +#+         +#+  +#++:++#++: \r\n     +#+    +#+  +#+         +#+         +#+  +#+     +#+  \r\n    #+#    #+#  #+#         #+#         #+#  #+#     #+#   \r\n   #########   ##########  ##########  ###  ###     ###    \r\n\r\n"};
 8002a34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a38:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <Menu_UART_Start+0x84>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4611      	mov	r1, r2
 8002a42:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8002a46:	461a      	mov	r2, r3
 8002a48:	f00b fcf9 	bl	800e43e <memcpy>
	for(uint32_t j=0;Banner[j];j++) HAL_UART_Transmit(huart, (Banner+j), 1, 1000);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a52:	e013      	b.n	8002a7c <Menu_UART_Start+0x58>
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a5c:	18d1      	adds	r1, r2, r3
 8002a5e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a62:	f5a3 70de 	sub.w	r0, r3, #444	@ 0x1bc
 8002a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	6800      	ldr	r0, [r0, #0]
 8002a6e:	f009 fd9b 	bl	800c5a8 <HAL_UART_Transmit>
 8002a72:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a76:	3301      	adds	r3, #1
 8002a78:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a80:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 8002a84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e1      	bne.n	8002a54 <Menu_UART_Start+0x30>
	Menu_UART_Update(huart);
 8002a90:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	f000 f807 	bl	8002aac <Menu_UART_Update>
}
 8002a9e:	bf00      	nop
 8002aa0:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	08013e00 	.word	0x08013e00

08002aac <Menu_UART_Update>:

void Menu_UART_Update(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	(*Menu_State)(huart);
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <Menu_UART_Update+0x18>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <Menu_UART_Main>:
//----------------------------------------------------------Menu_UART_Main------------------------------------------------------------------------
void Menu_UART_Main(UART_HandleTypeDef *huart)
{
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b09e      	sub	sp, #120	@ 0x78
 8002ace:	af06      	add	r7, sp, #24
 8002ad0:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8002ad2:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002adc:	2224      	movs	r2, #36	@ 0x24
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00b fc1e 	bl	800e322 <memset>
	int32_t poz0;
	int32_t poz1;
	int32_t poz2;

	uint8_t *Menu_Main[] = {
 8002ae6:	4b76      	ldr	r3, [pc, #472]	@ (8002cc0 <Menu_UART_Main+0x1f8>)
 8002ae8:	f107 0410 	add.w	r4, r7, #16
 8002aec:	461d      	mov	r5, r3
 8002aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Move to motor poz",
			"Move to XYZ poz",
			"Set/Reset Relay",
			"Read sensors"
	};
	Menu_UART_Out(huart, Menu_Main, 6);
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	2206      	movs	r2, #6
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fd00 	bl	8003508 <Menu_UART_Out>

	uint8_t rx_buff[2] = {0};
 8002b08:	2300      	movs	r3, #0
 8002b0a:	81bb      	strh	r3, [r7, #12]
	while(1)
	{
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8002b0c:	f107 010c 	add.w	r1, r7, #12
 8002b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b14:	2201      	movs	r2, #1
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f009 fde4 	bl	800c6e4 <HAL_UART_Receive>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 82b4 	bne.w	800308c <Menu_UART_Main+0x5c4>
		{
			switch (rx_buff[0])
 8002b24:	7b3b      	ldrb	r3, [r7, #12]
 8002b26:	3b30      	subs	r3, #48	@ 0x30
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	f200 82b1 	bhi.w	8003090 <Menu_UART_Main+0x5c8>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <Menu_UART_Main+0x6c>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b51 	.word	0x08002b51
 8002b38:	08002bcb 	.word	0x08002bcb
 8002b3c:	08002c45 	.word	0x08002c45
 8002b40:	08002ce9 	.word	0x08002ce9
 8002b44:	08002ef1 	.word	0x08002ef1
 8002b48:	0800307b 	.word	0x0800307b
 8002b4c:	08003083 	.word	0x08003083
			{
				case '0':
					sprintf(tx_buff, "\r\nf MAX was: %d\r\n",Get_f_MAX());
 8002b50:	f001 f81c 	bl	8003b8c <Get_f_MAX>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b5a:	495a      	ldr	r1, [pc, #360]	@ (8002cc4 <Menu_UART_Main+0x1fc>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00b fb7d 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fd17 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input f MAX\r\n");
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	4a55      	ldr	r2, [pc, #340]	@ (8002cc8 <Menu_UART_Main+0x200>)
 8002b74:	461c      	mov	r4, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7a:	c407      	stmia	r4!, {r0, r1, r2}
 8002b7c:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fd09 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8e:	2214      	movs	r2, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fd21 	bl	80035da <UART_In>
					Set_f_MAX(atoi(tx_buff));
 8002b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00a fba4 	bl	800d2ea <atoi>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 ffc1 	bl	8003b2c <Set_f_MAX>
					sprintf(tx_buff, "New f MAX is: %d\r\n",Get_f_MAX());
 8002baa:	f000 ffef 	bl	8003b8c <Get_f_MAX>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb4:	4945      	ldr	r1, [pc, #276]	@ (8002ccc <Menu_UART_Main+0x204>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00b fb50 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fcea 	bl	800359c <UART_Out>
					break;
 8002bc8:	e25f      	b.n	800308a <Menu_UART_Main+0x5c2>
				case '1':
					sprintf(tx_buff, "\r\nf MIN was: %d\r\n",Get_f_MIN());
 8002bca:	f000 ffeb 	bl	8003ba4 <Get_f_MIN>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd4:	493e      	ldr	r1, [pc, #248]	@ (8002cd0 <Menu_UART_Main+0x208>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00b fb40 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fcda 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input f MIN\r\n");
 8002be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bec:	4a39      	ldr	r2, [pc, #228]	@ (8002cd4 <Menu_UART_Main+0x20c>)
 8002bee:	461c      	mov	r4, r3
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8002bf6:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fccc 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c08:	2214      	movs	r2, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fce4 	bl	80035da <UART_In>
					Set_f_MIN(atoi(tx_buff));
 8002c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00a fb67 	bl	800d2ea <atoi>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 ff94 	bl	8003b4c <Set_f_MIN>
					sprintf(tx_buff, "New f MIN is: %d\r\n",Get_f_MIN());
 8002c24:	f000 ffbe 	bl	8003ba4 <Get_f_MIN>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2e:	492a      	ldr	r1, [pc, #168]	@ (8002cd8 <Menu_UART_Main+0x210>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f00b fb13 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fcad 	bl	800359c <UART_Out>
					break;
 8002c42:	e222      	b.n	800308a <Menu_UART_Main+0x5c2>
				case '2':
					sprintf(tx_buff, "\r\na MAX was: %d\r\n",Get_a_MAX());
 8002c44:	f000 ffba 	bl	8003bbc <Get_a_MAX>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4e:	4923      	ldr	r1, [pc, #140]	@ (8002cdc <Menu_UART_Main+0x214>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00b fb03 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fc9d 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input a MAX\r\n");
 8002c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <Menu_UART_Main+0x218>)
 8002c68:	461c      	mov	r4, r3
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c6e:	c407      	stmia	r4!, {r0, r1, r2}
 8002c70:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002c72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fc8f 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c82:	2214      	movs	r2, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fca7 	bl	80035da <UART_In>
					Set_a_MAX(atoi(tx_buff));
 8002c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00a fb2a 	bl	800d2ea <atoi>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 ff67 	bl	8003b6c <Set_a_MAX>
					sprintf(tx_buff, "New a MAX is: %d\r\n",Get_a_MAX());
 8002c9e:	f000 ff8d 	bl	8003bbc <Get_a_MAX>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca8:	490e      	ldr	r1, [pc, #56]	@ (8002ce4 <Menu_UART_Main+0x21c>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	f00b fad6 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fc70 	bl	800359c <UART_Out>
					break;
 8002cbc:	e1e5      	b.n	800308a <Menu_UART_Main+0x5c2>
 8002cbe:	bf00      	nop
 8002cc0:	08014260 	.word	0x08014260
 8002cc4:	08013fb0 	.word	0x08013fb0
 8002cc8:	08013fc4 	.word	0x08013fc4
 8002ccc:	08013fd4 	.word	0x08013fd4
 8002cd0:	08013fe8 	.word	0x08013fe8
 8002cd4:	08013ffc 	.word	0x08013ffc
 8002cd8:	0801400c 	.word	0x0801400c
 8002cdc:	08014020 	.word	0x08014020
 8002ce0:	08014034 	.word	0x08014034
 8002ce4:	08014044 	.word	0x08014044
				case '3':
					sprintf(tx_buff, "\r\nMotor 0 poz was: %d\r\n",M_Poz_0());
 8002ce8:	f000 ff74 	bl	8003bd4 <M_Poz_0>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf2:	4970      	ldr	r1, [pc, #448]	@ (8002eb4 <Menu_UART_Main+0x3ec>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f00b fab1 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fc4b 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input motor 0 poz\r\n");
 8002d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0a:	4a6b      	ldr	r2, [pc, #428]	@ (8002eb8 <Menu_UART_Main+0x3f0>)
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	4615      	mov	r5, r2
 8002d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fc3c 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	2214      	movs	r2, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fc54 	bl	80035da <UART_In>
					poz0 = atoi(tx_buff);
 8002d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00a fad7 	bl	800d2ea <atoi>
 8002d3c:	65f8      	str	r0, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New motor 0 poz will be: %d\r\n",poz0);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d44:	495d      	ldr	r1, [pc, #372]	@ (8002ebc <Menu_UART_Main+0x3f4>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f00b fa88 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fc22 	bl	800359c <UART_Out>

					sprintf(tx_buff, "\r\nMotor 1 poz was: %d\r\n",M_Poz_1());
 8002d58:	f000 ff48 	bl	8003bec <M_Poz_1>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d62:	4957      	ldr	r1, [pc, #348]	@ (8002ec0 <Menu_UART_Main+0x3f8>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00b fa79 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fc13 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input motor 1 poz\r\n");
 8002d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7a:	4a52      	ldr	r2, [pc, #328]	@ (8002ec4 <Menu_UART_Main+0x3fc>)
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	4615      	mov	r5, r2
 8002d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fc04 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	2214      	movs	r2, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fc1c 	bl	80035da <UART_In>
					poz1 = atoi(tx_buff);
 8002da2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002da6:	4618      	mov	r0, r3
 8002da8:	f00a fa9f 	bl	800d2ea <atoi>
 8002dac:	65b8      	str	r0, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New motor 1 poz will be: %d\r\n",poz1);
 8002dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002db4:	4944      	ldr	r1, [pc, #272]	@ (8002ec8 <Menu_UART_Main+0x400>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	f00b fa50 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fbea 	bl	800359c <UART_Out>

					sprintf(tx_buff, "\r\nMotor 2 poz was: %d\r\n",M_Poz_2());
 8002dc8:	f000 ff1c 	bl	8003c04 <M_Poz_2>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd2:	493e      	ldr	r1, [pc, #248]	@ (8002ecc <Menu_UART_Main+0x404>)
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00b fa41 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fbdb 	bl	800359c <UART_Out>
					strcpy(tx_buff, "Input motor 2 poz\r\n");
 8002de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dea:	4a39      	ldr	r2, [pc, #228]	@ (8002ed0 <Menu_UART_Main+0x408>)
 8002dec:	461c      	mov	r4, r3
 8002dee:	4615      	mov	r5, r2
 8002df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	6023      	str	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fbcc 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e08:	2214      	movs	r2, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fbe4 	bl	80035da <UART_In>
					poz2 = atoi(tx_buff);
 8002e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e16:	4618      	mov	r0, r3
 8002e18:	f00a fa67 	bl	800d2ea <atoi>
 8002e1c:	6578      	str	r0, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New motor 2 poz will be: %d\r\n",poz2);
 8002e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e24:	492b      	ldr	r1, [pc, #172]	@ (8002ed4 <Menu_UART_Main+0x40c>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f00b fa18 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbb2 	bl	800359c <UART_Out>

					move(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8002e38:	230c      	movs	r3, #12
 8002e3a:	9304      	str	r3, [sp, #16]
 8002e3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <Menu_UART_Main+0x410>)
 8002e3e:	9303      	str	r3, [sp, #12]
 8002e40:	2304      	movs	r3, #4
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <Menu_UART_Main+0x414>)
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <Menu_UART_Main+0x418>)
 8002e4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e52:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002e54:	f000 fd70 	bl	8003938 <move>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 8002e58:	f000 febc 	bl	8003bd4 <M_Poz_0>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e62:	4920      	ldr	r1, [pc, #128]	@ (8002ee4 <Menu_UART_Main+0x41c>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f00b f9f9 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fb93 	bl	800359c <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 8002e76:	f000 feb9 	bl	8003bec <M_Poz_1>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e80:	4919      	ldr	r1, [pc, #100]	@ (8002ee8 <Menu_UART_Main+0x420>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f00b f9ea 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fb84 	bl	800359c <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 8002e94:	f000 feb6 	bl	8003c04 <M_Poz_2>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e9e:	4913      	ldr	r1, [pc, #76]	@ (8002eec <Menu_UART_Main+0x424>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00b f9db 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002ea6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb75 	bl	800359c <UART_Out>
					break;
 8002eb2:	e0ea      	b.n	800308a <Menu_UART_Main+0x5c2>
 8002eb4:	08014058 	.word	0x08014058
 8002eb8:	08014070 	.word	0x08014070
 8002ebc:	08014084 	.word	0x08014084
 8002ec0:	080140a4 	.word	0x080140a4
 8002ec4:	080140bc 	.word	0x080140bc
 8002ec8:	080140d0 	.word	0x080140d0
 8002ecc:	080140f0 	.word	0x080140f0
 8002ed0:	08014108 	.word	0x08014108
 8002ed4:	0801411c 	.word	0x0801411c
 8002ed8:	2003acf0 	.word	0x2003acf0
 8002edc:	2003aca4 	.word	0x2003aca4
 8002ee0:	2003ad3c 	.word	0x2003ad3c
 8002ee4:	0801413c 	.word	0x0801413c
 8002ee8:	08014154 	.word	0x08014154
 8002eec:	0801416c 	.word	0x0801416c
				case '4':
					strcpy(tx_buff, "Input X poz\r\n");
 8002ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef4:	4a69      	ldr	r2, [pc, #420]	@ (800309c <Menu_UART_Main+0x5d4>)
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002efc:	c407      	stmia	r4!, {r0, r1, r2}
 8002efe:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fb48 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f10:	2214      	movs	r2, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb60 	bl	80035da <UART_In>
					poz0 = atoi(tx_buff);
 8002f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00a f9e3 	bl	800d2ea <atoi>
 8002f24:	65f8      	str	r0, [r7, #92]	@ 0x5c
					sprintf(tx_buff, "New X poz will be: %d\r\n",poz0);
 8002f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f2c:	495c      	ldr	r1, [pc, #368]	@ (80030a0 <Menu_UART_Main+0x5d8>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00b f994 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fb2e 	bl	800359c <UART_Out>

					strcpy(tx_buff, "Input Y poz\r\n");
 8002f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f44:	4a57      	ldr	r2, [pc, #348]	@ (80030a4 <Menu_UART_Main+0x5dc>)
 8002f46:	461c      	mov	r4, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f4c:	c407      	stmia	r4!, {r0, r1, r2}
 8002f4e:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fb20 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002f5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f60:	2214      	movs	r2, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fb38 	bl	80035da <UART_In>
					poz1 = atoi(tx_buff);
 8002f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00a f9bb 	bl	800d2ea <atoi>
 8002f74:	65b8      	str	r0, [r7, #88]	@ 0x58
					sprintf(tx_buff, "New Y poz will be: %d\r\n",poz1);
 8002f76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f7c:	494a      	ldr	r1, [pc, #296]	@ (80030a8 <Menu_UART_Main+0x5e0>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00b f96c 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb06 	bl	800359c <UART_Out>

					strcpy(tx_buff, "Input Z poz\r\n");
 8002f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f94:	4a45      	ldr	r2, [pc, #276]	@ (80030ac <Menu_UART_Main+0x5e4>)
 8002f96:	461c      	mov	r4, r3
 8002f98:	4613      	mov	r3, r2
 8002f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f9c:	c407      	stmia	r4!, {r0, r1, r2}
 8002f9e:	8023      	strh	r3, [r4, #0]
					UART_Out(huart, tx_buff);
 8002fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 faf8 	bl	800359c <UART_Out>
					UART_In(huart, tx_buff, 20);
 8002fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb0:	2214      	movs	r2, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fb10 	bl	80035da <UART_In>
					poz2 = atoi(tx_buff);
 8002fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f00a f993 	bl	800d2ea <atoi>
 8002fc4:	6578      	str	r0, [r7, #84]	@ 0x54
					sprintf(tx_buff, "New Z poz will be: %d\r\n",poz2);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fcc:	4938      	ldr	r1, [pc, #224]	@ (80030b0 <Menu_UART_Main+0x5e8>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00b f944 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8002fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fade 	bl	800359c <UART_Out>

					Move_to_XYZ(poz0,poz1,poz2,M0_TIM, M0_CHANNEL, M1_TIM, M1_CHANNEL, M2_TIM, M2_CHANNEL);
 8002fe0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002fe2:	f7fd fab3 	bl	800054c <__aeabi_i2d>
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	460d      	mov	r5, r1
 8002fea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fec:	f7fd faae 	bl	800054c <__aeabi_i2d>
 8002ff0:	4680      	mov	r8, r0
 8002ff2:	4689      	mov	r9, r1
 8002ff4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002ff6:	f7fd faa9 	bl	800054c <__aeabi_i2d>
 8002ffa:	4682      	mov	sl, r0
 8002ffc:	468b      	mov	fp, r1
 8002ffe:	230c      	movs	r3, #12
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	4b2c      	ldr	r3, [pc, #176]	@ (80030b4 <Menu_UART_Main+0x5ec>)
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2304      	movs	r3, #4
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <Menu_UART_Main+0x5f0>)
 800300a:	2100      	movs	r1, #0
 800300c:	482b      	ldr	r0, [pc, #172]	@ (80030bc <Menu_UART_Main+0x5f4>)
 800300e:	ec4b ab12 	vmov	d2, sl, fp
 8003012:	ec49 8b11 	vmov	d1, r8, r9
 8003016:	ec45 4b10 	vmov	d0, r4, r5
 800301a:	f7fe f8f1 	bl	8001200 <Move_to_XYZ>

					sprintf(tx_buff, "\r\nNew motor 0 poz: %d\r\n",M_Poz_0());
 800301e:	f000 fdd9 	bl	8003bd4 <M_Poz_0>
 8003022:	4602      	mov	r2, r0
 8003024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003028:	4925      	ldr	r1, [pc, #148]	@ (80030c0 <Menu_UART_Main+0x5f8>)
 800302a:	4618      	mov	r0, r3
 800302c:	f00b f916 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 8003030:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fab0 	bl	800359c <UART_Out>
					sprintf(tx_buff, "New motor 1 poz: %d\r\n",M_Poz_1());
 800303c:	f000 fdd6 	bl	8003bec <M_Poz_1>
 8003040:	4602      	mov	r2, r0
 8003042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003046:	491f      	ldr	r1, [pc, #124]	@ (80030c4 <Menu_UART_Main+0x5fc>)
 8003048:	4618      	mov	r0, r3
 800304a:	f00b f907 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 800304e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 faa1 	bl	800359c <UART_Out>
					sprintf(tx_buff, "New motor 2 poz: %d\r\n",M_Poz_2());
 800305a:	f000 fdd3 	bl	8003c04 <M_Poz_2>
 800305e:	4602      	mov	r2, r0
 8003060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003064:	4918      	ldr	r1, [pc, #96]	@ (80030c8 <Menu_UART_Main+0x600>)
 8003066:	4618      	mov	r0, r3
 8003068:	f00b f8f8 	bl	800e25c <siprintf>
					UART_Out(huart, tx_buff);
 800306c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa92 	bl	800359c <UART_Out>
					break;
 8003078:	e007      	b.n	800308a <Menu_UART_Main+0x5c2>
				case '5':
					Menu_State = Menu_UART_Relay;
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <Menu_UART_Main+0x604>)
 800307c:	4a14      	ldr	r2, [pc, #80]	@ (80030d0 <Menu_UART_Main+0x608>)
 800307e:	601a      	str	r2, [r3, #0]
					break;
 8003080:	e003      	b.n	800308a <Menu_UART_Main+0x5c2>
				case '6':
					Menu_State = Menu_UART_Sensors;
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <Menu_UART_Main+0x604>)
 8003084:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <Menu_UART_Main+0x60c>)
 8003086:	601a      	str	r2, [r3, #0]
					break;
 8003088:	bf00      	nop
			}
			break;
 800308a:	e001      	b.n	8003090 <Menu_UART_Main+0x5c8>
		} else {
			__NOP();
 800308c:	bf00      	nop
		if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800308e:	e53d      	b.n	8002b0c <Menu_UART_Main+0x44>
			break;
 8003090:	bf00      	nop
		}
	}
}
 8003092:	bf00      	nop
 8003094:	3760      	adds	r7, #96	@ 0x60
 8003096:	46bd      	mov	sp, r7
 8003098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309c:	08014184 	.word	0x08014184
 80030a0:	08014194 	.word	0x08014194
 80030a4:	080141ac 	.word	0x080141ac
 80030a8:	080141bc 	.word	0x080141bc
 80030ac:	080141d4 	.word	0x080141d4
 80030b0:	080141e4 	.word	0x080141e4
 80030b4:	2003acf0 	.word	0x2003acf0
 80030b8:	2003aca4 	.word	0x2003aca4
 80030bc:	2003ad3c 	.word	0x2003ad3c
 80030c0:	0801413c 	.word	0x0801413c
 80030c4:	08014154 	.word	0x08014154
 80030c8:	0801416c 	.word	0x0801416c
 80030cc:	20000000 	.word	0x20000000
 80030d0:	08003325 	.word	0x08003325
 80030d4:	080030d9 	.word	0x080030d9

080030d8 <Menu_UART_Sensors>:
//--------------------------------------------------------------------------------Menu_UART_Sensors-----------------------------------------------------------
void Menu_UART_Sensors(UART_HandleTypeDef *huart)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b094      	sub	sp, #80	@ 0x50
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 80030e0:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ea:	2224      	movs	r2, #36	@ 0x24
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f00b f917 	bl	800e322 <memset>

	uint8_t *Menu_Sensor[] = {
 80030f4:	4b7e      	ldr	r3, [pc, #504]	@ (80032f0 <Menu_UART_Sensors+0x218>)
 80030f6:	f107 040c 	add.w	r4, r7, #12
 80030fa:	461d      	mov	r5, r3
 80030fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"HALL 1 Amplitude",
			"HALL 2 Angle",
			"HALL 2 Amplitude",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Sensor, 7);
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	2207      	movs	r2, #7
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9f9 	bl	8003508 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 8003116:	2300      	movs	r3, #0
 8003118:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800311a:	f107 0108 	add.w	r1, r7, #8
 800311e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003122:	2201      	movs	r2, #1
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f009 fadd 	bl	800c6e4 <HAL_UART_Receive>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 80d4 	bne.w	80032da <Menu_UART_Sensors+0x202>
			{
				switch (rx_buff[0])
 8003132:	7a3b      	ldrb	r3, [r7, #8]
 8003134:	3b30      	subs	r3, #48	@ 0x30
 8003136:	2b06      	cmp	r3, #6
 8003138:	f200 80d1 	bhi.w	80032de <Menu_UART_Sensors+0x206>
 800313c:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <Menu_UART_Sensors+0x6c>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003161 	.word	0x08003161
 8003148:	080031b1 	.word	0x080031b1
 800314c:	080031dd 	.word	0x080031dd
 8003150:	0800322d 	.word	0x0800322d
 8003154:	08003259 	.word	0x08003259
 8003158:	080032a7 	.word	0x080032a7
 800315c:	080032d1 	.word	0x080032d1
				{
					case '0':
						sprintf(tx_buff, "\r\nHALL 0 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF));
 8003160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003164:	4963      	ldr	r1, [pc, #396]	@ (80032f4 <Menu_UART_Sensors+0x21c>)
 8003166:	4864      	ldr	r0, [pc, #400]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 8003168:	f7fd ffb9 	bl	80010de <Hall_Sensor_Read_Angle>
 800316c:	4603      	mov	r3, r0
 800316e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f9ea 	bl	800054c <__aeabi_i2d>
 8003178:	a35b      	add	r3, pc, #364	@ (adr r3, 80032e8 <Menu_UART_Sensors+0x210>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f7fd fb79 	bl	8000874 <__aeabi_ddiv>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	4b5b      	ldr	r3, [pc, #364]	@ (80032fc <Menu_UART_Sensors+0x224>)
 8003190:	f7fd fa46 	bl	8000620 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800319c:	4958      	ldr	r1, [pc, #352]	@ (8003300 <Menu_UART_Sensors+0x228>)
 800319e:	f00b f85d 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 80031a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9f7 	bl	800359c <UART_Out>
						break;
 80031ae:	e093      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '1':
						sprintf(tx_buff, "\r\nHALL 0 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS0_PORT, Hall_SS0_PIN));
 80031b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031b4:	494f      	ldr	r1, [pc, #316]	@ (80032f4 <Menu_UART_Sensors+0x21c>)
 80031b6:	4850      	ldr	r0, [pc, #320]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 80031b8:	f7fd ff3c 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80031bc:	4603      	mov	r3, r0
 80031be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031c6:	494f      	ldr	r1, [pc, #316]	@ (8003304 <Menu_UART_Sensors+0x22c>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00b f847 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 80031ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9e1 	bl	800359c <UART_Out>
						break;
 80031da:	e07d      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '2':
						sprintf(tx_buff, "\r\nHALL 1 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN))/0x3FFF));
 80031dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e0:	4949      	ldr	r1, [pc, #292]	@ (8003308 <Menu_UART_Sensors+0x230>)
 80031e2:	4845      	ldr	r0, [pc, #276]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 80031e4:	f7fd ff7b 	bl	80010de <Hall_Sensor_Read_Angle>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f9ac 	bl	800054c <__aeabi_i2d>
 80031f4:	a33c      	add	r3, pc, #240	@ (adr r3, 80032e8 <Menu_UART_Sensors+0x210>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fb3b 	bl	8000874 <__aeabi_ddiv>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	4b3c      	ldr	r3, [pc, #240]	@ (80032fc <Menu_UART_Sensors+0x224>)
 800320c:	f7fd fa08 	bl	8000620 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003218:	493c      	ldr	r1, [pc, #240]	@ (800330c <Menu_UART_Sensors+0x234>)
 800321a:	f00b f81f 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 800321e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9b9 	bl	800359c <UART_Out>
						break;
 800322a:	e055      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '3':
						sprintf(tx_buff, "\r\nHALL 1 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS1_PORT, Hall_SS1_PIN));
 800322c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003230:	4935      	ldr	r1, [pc, #212]	@ (8003308 <Menu_UART_Sensors+0x230>)
 8003232:	4831      	ldr	r0, [pc, #196]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 8003234:	f7fd fefe 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 8003238:	4603      	mov	r3, r0
 800323a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800323e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003242:	4933      	ldr	r1, [pc, #204]	@ (8003310 <Menu_UART_Sensors+0x238>)
 8003244:	4618      	mov	r0, r3
 8003246:	f00b f809 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 800324a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9a3 	bl	800359c <UART_Out>
						break;
 8003256:	e03f      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '4':
						sprintf(tx_buff, "\r\nHALL 2 angle: %f \r\n",360*(double)((double)(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS2_PORT, Hall_SS2_PIN))/0x3FFF));
 8003258:	2220      	movs	r2, #32
 800325a:	492b      	ldr	r1, [pc, #172]	@ (8003308 <Menu_UART_Sensors+0x230>)
 800325c:	4826      	ldr	r0, [pc, #152]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 800325e:	f7fd ff3e 	bl	80010de <Hall_Sensor_Read_Angle>
 8003262:	4603      	mov	r3, r0
 8003264:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f96f 	bl	800054c <__aeabi_i2d>
 800326e:	a31e      	add	r3, pc, #120	@ (adr r3, 80032e8 <Menu_UART_Sensors+0x210>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd fafe 	bl	8000874 <__aeabi_ddiv>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <Menu_UART_Sensors+0x224>)
 8003286:	f7fd f9cb 	bl	8000620 <__aeabi_dmul>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003292:	4920      	ldr	r1, [pc, #128]	@ (8003314 <Menu_UART_Sensors+0x23c>)
 8003294:	f00a ffe2 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 8003298:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f97c 	bl	800359c <UART_Out>
						break;
 80032a4:	e018      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '5':
						sprintf(tx_buff, "\r\nHALL 2 amplitude: %d \r\n", 0x3FFF&Hall_Sensor_Read_Magnitude(Hall_SPI, Hall_SS2_PORT, Hall_SS2_PIN));
 80032a6:	2220      	movs	r2, #32
 80032a8:	4917      	ldr	r1, [pc, #92]	@ (8003308 <Menu_UART_Sensors+0x230>)
 80032aa:	4813      	ldr	r0, [pc, #76]	@ (80032f8 <Menu_UART_Sensors+0x220>)
 80032ac:	f7fd fec2 	bl	8001034 <Hall_Sensor_Read_Magnitude>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ba:	4917      	ldr	r1, [pc, #92]	@ (8003318 <Menu_UART_Sensors+0x240>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f00a ffcd 	bl	800e25c <siprintf>
						UART_Out(huart, tx_buff);
 80032c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f967 	bl	800359c <UART_Out>
						break;
 80032ce:	e003      	b.n	80032d8 <Menu_UART_Sensors+0x200>
					case '6':
						Menu_State = Menu_UART_Main;
 80032d0:	4b12      	ldr	r3, [pc, #72]	@ (800331c <Menu_UART_Sensors+0x244>)
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <Menu_UART_Sensors+0x248>)
 80032d4:	601a      	str	r2, [r3, #0]
						break;
 80032d6:	bf00      	nop
				}
				break;
 80032d8:	e001      	b.n	80032de <Menu_UART_Sensors+0x206>
			} else {
				__NOP();
 80032da:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80032dc:	e71d      	b.n	800311a <Menu_UART_Sensors+0x42>
				break;
 80032de:	bf00      	nop
			}
		}
}
 80032e0:	bf00      	nop
 80032e2:	3750      	adds	r7, #80	@ 0x50
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	00000000 	.word	0x00000000
 80032ec:	40cfff80 	.word	0x40cfff80
 80032f0:	08014378 	.word	0x08014378
 80032f4:	42020000 	.word	0x42020000
 80032f8:	2003ac14 	.word	0x2003ac14
 80032fc:	40768000 	.word	0x40768000
 8003300:	0801427c 	.word	0x0801427c
 8003304:	08014294 	.word	0x08014294
 8003308:	42020400 	.word	0x42020400
 800330c:	080142b0 	.word	0x080142b0
 8003310:	080142c8 	.word	0x080142c8
 8003314:	080142e4 	.word	0x080142e4
 8003318:	080142fc 	.word	0x080142fc
 800331c:	20000000 	.word	0x20000000
 8003320:	08002ac9 	.word	0x08002ac9

08003324 <Menu_UART_Relay>:

//--------------------------------------------------------------------------------Menu_UART_Relay-----------------------------------------------------------
void Menu_UART_Relay(UART_HandleTypeDef *huart)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b092      	sub	sp, #72	@ 0x48
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 800332c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003336:	2224      	movs	r2, #36	@ 0x24
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f00a fff1 	bl	800e322 <memset>

	uint8_t *Menu_Relay[] = {
 8003340:	4b66      	ldr	r3, [pc, #408]	@ (80034dc <Menu_UART_Relay+0x1b8>)
 8003342:	f107 040c 	add.w	r4, r7, #12
 8003346:	461d      	mov	r5, r3
 8003348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	6023      	str	r3, [r4, #0]
			"Reset Relay 0",
			"Set Relay 1",
			"Reset Relay 1",
			"Exit"
	};
	Menu_UART_Out(huart, Menu_Relay, 5);
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	2205      	movs	r2, #5
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8d5 	bl	8003508 <Menu_UART_Out>
	uint8_t rx_buff[2] = {0};
 800335e:	2300      	movs	r3, #0
 8003360:	813b      	strh	r3, [r7, #8]
		while(1)
		{
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003362:	f107 0108 	add.w	r1, r7, #8
 8003366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336a:	2201      	movs	r2, #1
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f009 f9b9 	bl	800c6e4 <HAL_UART_Receive>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 80aa 	bne.w	80034ce <Menu_UART_Relay+0x1aa>
			{
				switch (rx_buff[0])
 800337a:	7a3b      	ldrb	r3, [r7, #8]
 800337c:	3b30      	subs	r3, #48	@ 0x30
 800337e:	2b04      	cmp	r3, #4
 8003380:	f200 80a7 	bhi.w	80034d2 <Menu_UART_Relay+0x1ae>
 8003384:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <Menu_UART_Relay+0x68>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033a1 	.word	0x080033a1
 8003390:	080033e7 	.word	0x080033e7
 8003394:	08003433 	.word	0x08003433
 8003398:	08003479 	.word	0x08003479
 800339c:	080034c5 	.word	0x080034c5
				{
					case '0':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was set\r\n");
 80033a0:	f7fd ff0a 	bl	80011b8 <Relay_0_Read>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <Menu_UART_Relay+0x9a>
 80033aa:	f107 0320 	add.w	r3, r7, #32
 80033ae:	4a4c      	ldr	r2, [pc, #304]	@ (80034e0 <Menu_UART_Relay+0x1bc>)
 80033b0:	461c      	mov	r4, r3
 80033b2:	4615      	mov	r5, r2
 80033b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	e00a      	b.n	80033d4 <Menu_UART_Relay+0xb0>
						else strcpy(tx_buff, "\r\nRelay 0 was already set\r\n");
 80033be:	f107 0320 	add.w	r3, r7, #32
 80033c2:	4a48      	ldr	r2, [pc, #288]	@ (80034e4 <Menu_UART_Relay+0x1c0>)
 80033c4:	461c      	mov	r4, r3
 80033c6:	4615      	mov	r5, r2
 80033c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 80033d4:	f107 0320 	add.w	r3, r7, #32
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8de 	bl	800359c <UART_Out>
						Relay_0_Set();
 80033e0:	f7fd fed2 	bl	8001188 <Relay_0_Set>
						break;
 80033e4:	e072      	b.n	80034cc <Menu_UART_Relay+0x1a8>
					case '1':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 0 was already reset\r\n");
 80033e6:	f7fd fee7 	bl	80011b8 <Relay_0_Read>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <Menu_UART_Relay+0xe4>
 80033f0:	f107 0320 	add.w	r3, r7, #32
 80033f4:	4a3c      	ldr	r2, [pc, #240]	@ (80034e8 <Menu_UART_Relay+0x1c4>)
 80033f6:	461c      	mov	r4, r3
 80033f8:	4615      	mov	r5, r2
 80033fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003402:	c407      	stmia	r4!, {r0, r1, r2}
 8003404:	8023      	strh	r3, [r4, #0]
 8003406:	e00b      	b.n	8003420 <Menu_UART_Relay+0xfc>
						else strcpy(tx_buff, "\r\nRelay 0 was reset\r\n");
 8003408:	f107 0320 	add.w	r3, r7, #32
 800340c:	4a37      	ldr	r2, [pc, #220]	@ (80034ec <Menu_UART_Relay+0x1c8>)
 800340e:	461c      	mov	r4, r3
 8003410:	4615      	mov	r5, r2
 8003412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003416:	e895 0003 	ldmia.w	r5, {r0, r1}
 800341a:	6020      	str	r0, [r4, #0]
 800341c:	3404      	adds	r4, #4
 800341e:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 8003420:	f107 0320 	add.w	r3, r7, #32
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b8 	bl	800359c <UART_Out>
						Relay_0_Reset();
 800342c:	f7fd feb8 	bl	80011a0 <Relay_0_Reset>
						break;
 8003430:	e04c      	b.n	80034cc <Menu_UART_Relay+0x1a8>
					case '2':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was set\r\n");
 8003432:	f7fd fec1 	bl	80011b8 <Relay_0_Read>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <Menu_UART_Relay+0x12c>
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <Menu_UART_Relay+0x1cc>)
 8003442:	461c      	mov	r4, r3
 8003444:	4615      	mov	r5, r2
 8003446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	e00a      	b.n	8003466 <Menu_UART_Relay+0x142>
						else strcpy(tx_buff, "\r\nRelay 1 was already set\r\n");
 8003450:	f107 0320 	add.w	r3, r7, #32
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <Menu_UART_Relay+0x1d0>)
 8003456:	461c      	mov	r4, r3
 8003458:	4615      	mov	r5, r2
 800345a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800345c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800345e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						UART_Out(huart, tx_buff);
 8003466:	f107 0320 	add.w	r3, r7, #32
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f895 	bl	800359c <UART_Out>
						Relay_1_Set();
 8003472:	f7fd fead 	bl	80011d0 <Relay_1_Set>
						break;
 8003476:	e029      	b.n	80034cc <Menu_UART_Relay+0x1a8>
					case '3':
						if(!Relay_0_Read()) strcpy(tx_buff, "\r\nRelay 1 was already reset\r\n");
 8003478:	f7fd fe9e 	bl	80011b8 <Relay_0_Read>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <Menu_UART_Relay+0x176>
 8003482:	f107 0320 	add.w	r3, r7, #32
 8003486:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <Menu_UART_Relay+0x1d4>)
 8003488:	461c      	mov	r4, r3
 800348a:	4615      	mov	r5, r2
 800348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003494:	c407      	stmia	r4!, {r0, r1, r2}
 8003496:	8023      	strh	r3, [r4, #0]
 8003498:	e00b      	b.n	80034b2 <Menu_UART_Relay+0x18e>
						else strcpy(tx_buff, "\r\nRelay 1 was reset\r\n");
 800349a:	f107 0320 	add.w	r3, r7, #32
 800349e:	4a17      	ldr	r2, [pc, #92]	@ (80034fc <Menu_UART_Relay+0x1d8>)
 80034a0:	461c      	mov	r4, r3
 80034a2:	4615      	mov	r5, r2
 80034a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034ac:	6020      	str	r0, [r4, #0]
 80034ae:	3404      	adds	r4, #4
 80034b0:	8021      	strh	r1, [r4, #0]
						UART_Out(huart, tx_buff);
 80034b2:	f107 0320 	add.w	r3, r7, #32
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f86f 	bl	800359c <UART_Out>
						Relay_1_Reset();
 80034be:	f7fd fe93 	bl	80011e8 <Relay_1_Reset>
						break;
 80034c2:	e003      	b.n	80034cc <Menu_UART_Relay+0x1a8>
					case '4':
						Menu_State = Menu_UART_Main;
 80034c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <Menu_UART_Relay+0x1dc>)
 80034c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <Menu_UART_Relay+0x1e0>)
 80034c8:	601a      	str	r2, [r3, #0]
						break;
 80034ca:	bf00      	nop
				}
				break;
 80034cc:	e001      	b.n	80034d2 <Menu_UART_Relay+0x1ae>
			} else {
				__NOP();
 80034ce:	bf00      	nop
			if(HAL_UART_Receive(huart, rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80034d0:	e747      	b.n	8003362 <Menu_UART_Relay+0x3e>
				break;
 80034d2:	bf00      	nop
			}
		}
}
 80034d4:	bf00      	nop
 80034d6:	3748      	adds	r7, #72	@ 0x48
 80034d8:	46bd      	mov	sp, r7
 80034da:	bdb0      	pop	{r4, r5, r7, pc}
 80034dc:	0801449c 	.word	0x0801449c
 80034e0:	08014394 	.word	0x08014394
 80034e4:	080143a8 	.word	0x080143a8
 80034e8:	080143c4 	.word	0x080143c4
 80034ec:	080143e4 	.word	0x080143e4
 80034f0:	080143fc 	.word	0x080143fc
 80034f4:	08014410 	.word	0x08014410
 80034f8:	0801442c 	.word	0x0801442c
 80034fc:	0801444c 	.word	0x0801444c
 8003500:	20000000 	.word	0x20000000
 8003504:	08002ac9 	.word	0x08002ac9

08003508 <Menu_UART_Out>:

void Menu_UART_Out(UART_HandleTypeDef *huart, uint8_t** p, uint32_t size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b090      	sub	sp, #64	@ 0x40
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	uint8_t tx_buff[40]={"\r\n"};
 8003514:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	2224      	movs	r2, #36	@ 0x24
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f00a fefd 	bl	800e322 <memset>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003528:	f107 0114 	add.w	r1, r7, #20
 800352c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003530:	2204      	movs	r2, #4
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f009 f838 	bl	800c5a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 8003538:	f107 0114 	add.w	r1, r7, #20
 800353c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003540:	2204      	movs	r2, #4
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f009 f830 	bl	800c5a8 <HAL_UART_Transmit>
	for(uint8_t i=0;i<size;i++)
 8003548:	2300      	movs	r3, #0
 800354a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800354e:	e018      	b.n	8003582 <Menu_UART_Out+0x7a>
	{
		sprintf(tx_buff, "   %d.  %s\r\n", i, p[i]);
 8003550:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003554:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4413      	add	r3, r2
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f107 0014 	add.w	r0, r7, #20
 8003564:	460a      	mov	r2, r1
 8003566:	490c      	ldr	r1, [pc, #48]	@ (8003598 <Menu_UART_Out+0x90>)
 8003568:	f00a fe78 	bl	800e25c <siprintf>
		UART_Out(huart, tx_buff);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f812 	bl	800359c <UART_Out>
	for(uint8_t i=0;i<size;i++)
 8003578:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800357c:	3301      	adds	r3, #1
 800357e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8e1      	bhi.n	8003550 <Menu_UART_Out+0x48>
	}
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3740      	adds	r7, #64	@ 0x40
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	080144b0 	.word	0x080144b0

0800359c <UART_Out>:

void UART_Out(UART_HandleTypeDef *huart, uint8_t* p)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	for(uint8_t j=0;p[j];j++) HAL_UART_Transmit(huart, (p+j), 1, 1000);
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e00b      	b.n	80035c4 <UART_Out+0x28>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	18d1      	adds	r1, r2, r3
 80035b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b6:	2201      	movs	r2, #1
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f008 fff5 	bl	800c5a8 <HAL_UART_Transmit>
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3301      	adds	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ed      	bne.n	80035ac <UART_Out+0x10>
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_In>:

void UART_In(UART_HandleTypeDef *huart, uint8_t* p, uint8_t len)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b088      	sub	sp, #32
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff =0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_buff[10]={"\r\n"};
 80035ec:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	f107 0318 	add.w	r3, r7, #24
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	809a      	strh	r2, [r3, #4]
	uint8_t i=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8003600:	e020      	b.n	8003644 <UART_In+0x6a>
	{
		while(1)
		{
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 8003602:	f107 011e 	add.w	r1, r7, #30
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	2201      	movs	r2, #1
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f009 f869 	bl	800c6e4 <HAL_UART_Receive>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <UART_In+0x42>
			{
				break;
			} else {
				__NOP();
 8003618:	bf00      	nop
			if(HAL_UART_Receive(huart, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800361a:	e7f2      	b.n	8003602 <UART_In+0x28>
				break;
 800361c:	bf00      	nop
			}
		}
		if(rx_buff=='\r') break;
 800361e:	7fbb      	ldrb	r3, [r7, #30]
 8003620:	2b0d      	cmp	r3, #13
 8003622:	d014      	beq.n	800364e <UART_In+0x74>
		*(p+i) = rx_buff;
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4413      	add	r3, r2
 800362a:	7fba      	ldrb	r2, [r7, #30]
 800362c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, &rx_buff, 1, 1000);
 800362e:	f107 011e 	add.w	r1, r7, #30
 8003632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003636:	2201      	movs	r2, #1
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f008 ffb5 	bl	800c5a8 <HAL_UART_Transmit>
		i++;
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	3301      	adds	r3, #1
 8003642:	77fb      	strb	r3, [r7, #31]
	while(i<len)
 8003644:	7ffa      	ldrb	r2, [r7, #31]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d3da      	bcc.n	8003602 <UART_In+0x28>
 800364c:	e000      	b.n	8003650 <UART_In+0x76>
		if(rx_buff=='\r') break;
 800364e:	bf00      	nop
	}
	*(p+i) = 0;
 8003650:	7ffb      	ldrb	r3, [r7, #31]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, tx_buff, 4, 1000);
 800365a:	f107 0114 	add.w	r1, r7, #20
 800365e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003662:	2204      	movs	r2, #4
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f008 ff9f 	bl	800c5a8 <HAL_UART_Transmit>
}
 800366a:	bf00      	nop
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <Frequency_To_Period>:
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
}

uint32_t Frequency_To_Period(uint32_t f)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	return (Timer_F/((Devider+1)*f*2)-1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <Frequency_To_Period+0x28>)
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	3b01      	subs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	07735940 	.word	0x07735940

080036a0 <Period_Out>:

void Period_Out(TIM_HandleTypeDef* htim,uint32_t T)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f007 fb0e 	bl	800accc <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, T );
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_SET_COUNTER(htim,0);
	HAL_TIM_Base_Start_IT(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f007 fa56 	bl	800ab70 <HAL_TIM_Base_Start_IT>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <Mototr_Poz_Inc>:

void Mototr_Poz_Inc(uint32_t M)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	if(M_direction[M])
 80036d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <Mototr_Poz_Inc+0x48>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <Mototr_Poz_Inc+0x28>
		M_poz[M]++;
 80036e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <Mototr_Poz_Inc+0x4c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	490b      	ldr	r1, [pc, #44]	@ (8003718 <Mototr_Poz_Inc+0x4c>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	else
		M_poz[M]--;
}
 80036f2:	e008      	b.n	8003706 <Mototr_Poz_Inc+0x3a>
		M_poz[M]--;
 80036f4:	4a08      	ldr	r2, [pc, #32]	@ (8003718 <Mototr_Poz_Inc+0x4c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	4906      	ldr	r1, [pc, #24]	@ (8003718 <Mototr_Poz_Inc+0x4c>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000010 	.word	0x20000010
 8003718:	2000021c 	.word	0x2000021c

0800371c <Ramp>:

void Ramp(uint32_t M)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(uint32_t i = 0; i<M_move_l[M];i++)
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	e0b1      	b.n	8003890 <Ramp+0x174>
	{
		if(i<M_move_l[M]/2)
 800372c:	4a60      	ldr	r2, [pc, #384]	@ (80038b0 <Ramp+0x194>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	0fda      	lsrs	r2, r3, #31
 8003736:	4413      	add	r3, r2
 8003738:	105b      	asrs	r3, r3, #1
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4293      	cmp	r3, r2
 8003740:	d246      	bcs.n	80037d0 <Ramp+0xb4>
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*i)/a_MAX);
 8003742:	4b5c      	ldr	r3, [pc, #368]	@ (80038b4 <Ramp+0x198>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fef0 	bl	800052c <__aeabi_ui2d>
 800374c:	4604      	mov	r4, r0
 800374e:	460d      	mov	r5, r1
 8003750:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <Ramp+0x19c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fee9 	bl	800052c <__aeabi_ui2d>
 800375a:	4680      	mov	r8, r0
 800375c:	4689      	mov	r9, r1
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fee2 	bl	800052c <__aeabi_ui2d>
 8003768:	4682      	mov	sl, r0
 800376a:	468b      	mov	fp, r1
 800376c:	4b52      	ldr	r3, [pc, #328]	@ (80038b8 <Ramp+0x19c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc fedb 	bl	800052c <__aeabi_ui2d>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4650      	mov	r0, sl
 800377c:	4659      	mov	r1, fp
 800377e:	f7fd f879 	bl	8000874 <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	ec43 2b17 	vmov	d7, r2, r3
 800378a:	eeb0 0a47 	vmov.f32	s0, s14
 800378e:	eef0 0a67 	vmov.f32	s1, s15
 8003792:	f00e f9ad 	bl	8011af0 <sqrt>
 8003796:	ec53 2b10 	vmov	r2, r3, d0
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f7fc ff3f 	bl	8000620 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd83 	bl	80002b4 <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd fa0b 	bl	8000bd0 <__aeabi_d2uiz>
 80037ba:	4603      	mov	r3, r0
 80037bc:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 80037be:	4b3f      	ldr	r3, [pc, #252]	@ (80038bc <Ramp+0x1a0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d950      	bls.n	800386a <Ramp+0x14e>
				tmp = f_MAX;
 80037c8:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <Ramp+0x1a0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e04c      	b.n	800386a <Ramp+0x14e>
		}
		else
		{
			tmp = f_MIN+(double)a_MAX*(double)sqrt((double)(2*(M_move_l[M]-1-i))/a_MAX);
 80037d0:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <Ramp+0x198>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fea9 	bl	800052c <__aeabi_ui2d>
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
 80037de:	4b36      	ldr	r3, [pc, #216]	@ (80038b8 <Ramp+0x19c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fea2 	bl	800052c <__aeabi_ui2d>
 80037e8:	4680      	mov	r8, r0
 80037ea:	4689      	mov	r9, r1
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <Ramp+0x194>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fe94 	bl	800052c <__aeabi_ui2d>
 8003804:	4682      	mov	sl, r0
 8003806:	468b      	mov	fp, r1
 8003808:	4b2b      	ldr	r3, [pc, #172]	@ (80038b8 <Ramp+0x19c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe8d 	bl	800052c <__aeabi_ui2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4650      	mov	r0, sl
 8003818:	4659      	mov	r1, fp
 800381a:	f7fd f82b 	bl	8000874 <__aeabi_ddiv>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ec43 2b17 	vmov	d7, r2, r3
 8003826:	eeb0 0a47 	vmov.f32	s0, s14
 800382a:	eef0 0a67 	vmov.f32	s1, s15
 800382e:	f00e f95f 	bl	8011af0 <sqrt>
 8003832:	ec53 2b10 	vmov	r2, r3, d0
 8003836:	4640      	mov	r0, r8
 8003838:	4649      	mov	r1, r9
 800383a:	f7fc fef1 	bl	8000620 <__aeabi_dmul>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fc fd35 	bl	80002b4 <__adddf3>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f9bd 	bl	8000bd0 <__aeabi_d2uiz>
 8003856:	4603      	mov	r3, r0
 8003858:	60fb      	str	r3, [r7, #12]
			if(tmp > f_MAX)
 800385a:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <Ramp+0x1a0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d902      	bls.n	800386a <Ramp+0x14e>
				tmp = f_MAX;
 8003864:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <Ramp+0x1a0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
		}

		Period_ramp[M][i] = Frequency_To_Period(tmp);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff02 	bl	8003674 <Frequency_To_Period>
 8003870:	4603      	mov	r3, r0
 8003872:	b298      	uxth	r0, r3
 8003874:	4912      	ldr	r1, [pc, #72]	@ (80038c0 <Ramp+0x1a4>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800387c:	fb03 f202 	mul.w	r2, r3, r2
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4413      	add	r3, r2
 8003884:	4602      	mov	r2, r0
 8003886:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i = 0; i<M_move_l[M];i++)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	4a07      	ldr	r2, [pc, #28]	@ (80038b0 <Ramp+0x194>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4293      	cmp	r3, r2
 800389e:	f4ff af45 	bcc.w	800372c <Ramp+0x10>
	}
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	2003aba8 	.word	0x2003aba8
 80038b4:	20000008 	.word	0x20000008
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	20000004 	.word	0x20000004
 80038c0:	20000228 	.word	0x20000228

080038c4 <Ramp_Out>:

void Ramp_Out(TIM_HandleTypeDef* htim,uint32_t Channel, uint32_t M)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	if(M_move_poz[M]>=M_move_l[M])
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <Ramp_Out+0x68>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d8:	4915      	ldr	r1, [pc, #84]	@ (8003930 <Ramp_Out+0x6c>)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d304      	bcc.n	80038ee <Ramp_Out+0x2a>
	{
		HAL_TIM_OC_Stop_IT(htim,Channel);
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f007 fc12 	bl	800b110 <HAL_TIM_OC_Stop_IT>
	else
	{
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
		M_move_poz[M]++;
	}
}
 80038ec:	e019      	b.n	8003922 <Ramp_Out+0x5e>
		Period_Out(htim,Period_ramp[M][M_move_poz[M]]);
 80038ee:	4a0f      	ldr	r2, [pc, #60]	@ (800392c <Ramp_Out+0x68>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f6:	490f      	ldr	r1, [pc, #60]	@ (8003934 <Ramp_Out+0x70>)
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80038fe:	fb00 f202 	mul.w	r2, r0, r2
 8003902:	4413      	add	r3, r2
 8003904:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003908:	4619      	mov	r1, r3
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fec8 	bl	80036a0 <Period_Out>
		M_move_poz[M]++;
 8003910:	4a06      	ldr	r2, [pc, #24]	@ (800392c <Ramp_Out+0x68>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	4904      	ldr	r1, [pc, #16]	@ (800392c <Ramp_Out+0x68>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2003abb4 	.word	0x2003abb4
 8003930:	2003aba8 	.word	0x2003aba8
 8003934:	20000228 	.word	0x20000228

08003938 <move>:

void move (int32_t theta0_target,int32_t theta1_target,int32_t theta2_target,TIM_HandleTypeDef* tim1,uint32_t Channel1, TIM_HandleTypeDef* tim2,uint32_t Channel2, TIM_HandleTypeDef* tim3,uint32_t Channel3)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
	M_move_l[0] = theta0_target - M_poz[0];
 8003946:	4b72      	ldr	r3, [pc, #456]	@ (8003b10 <move+0x1d8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	4a71      	ldr	r2, [pc, #452]	@ (8003b14 <move+0x1dc>)
 8003950:	6013      	str	r3, [r2, #0]
	M_move_l[1] = theta1_target - M_poz[1];
 8003952:	4b6f      	ldr	r3, [pc, #444]	@ (8003b10 <move+0x1d8>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b14 <move+0x1dc>)
 800395c:	6053      	str	r3, [r2, #4]
	M_move_l[2] = theta2_target - M_poz[2];
 800395e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b10 <move+0x1d8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	4a6b      	ldr	r2, [pc, #428]	@ (8003b14 <move+0x1dc>)
 8003968:	6093      	str	r3, [r2, #8]

	if(M_move_l[0]<0)
 800396a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b14 <move+0x1dc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da0d      	bge.n	800398e <move+0x56>
	{
		M_move_l[0] = ~M_move_l[0]+1;
 8003972:	4b68      	ldr	r3, [pc, #416]	@ (8003b14 <move+0x1dc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	425b      	negs	r3, r3
 8003978:	4a66      	ldr	r2, [pc, #408]	@ (8003b14 <move+0x1dc>)
 800397a:	6013      	str	r3, [r2, #0]
		M_direction[0] = 0;
 800397c:	4b66      	ldr	r3, [pc, #408]	@ (8003b18 <move+0x1e0>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_SET);
 8003982:	2201      	movs	r2, #1
 8003984:	2101      	movs	r1, #1
 8003986:	4865      	ldr	r0, [pc, #404]	@ (8003b1c <move+0x1e4>)
 8003988:	f001 ffc6 	bl	8005918 <HAL_GPIO_WritePin>
 800398c:	e007      	b.n	800399e <move+0x66>
	}
	else
	{
		M_direction[0] = 1;
 800398e:	4b62      	ldr	r3, [pc, #392]	@ (8003b18 <move+0x1e0>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(M0_DIR_PORT, M0_DIR_PIN, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	2101      	movs	r1, #1
 8003998:	4860      	ldr	r0, [pc, #384]	@ (8003b1c <move+0x1e4>)
 800399a:	f001 ffbd 	bl	8005918 <HAL_GPIO_WritePin>
	}

	if(M_move_l[1]<0)
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <move+0x1dc>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da0d      	bge.n	80039c2 <move+0x8a>
	{
		M_move_l[1] = ~M_move_l[1]+1;
 80039a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <move+0x1dc>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	425b      	negs	r3, r3
 80039ac:	4a59      	ldr	r2, [pc, #356]	@ (8003b14 <move+0x1dc>)
 80039ae:	6053      	str	r3, [r2, #4]
		M_direction[1] = 0;
 80039b0:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <move+0x1e0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_SET);
 80039b6:	2201      	movs	r2, #1
 80039b8:	2102      	movs	r1, #2
 80039ba:	4859      	ldr	r0, [pc, #356]	@ (8003b20 <move+0x1e8>)
 80039bc:	f001 ffac 	bl	8005918 <HAL_GPIO_WritePin>
 80039c0:	e007      	b.n	80039d2 <move+0x9a>
		}
	else
	{
		M_direction[1] = 1;
 80039c2:	4b55      	ldr	r3, [pc, #340]	@ (8003b18 <move+0x1e0>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(M1_DIR_PORT, M1_DIR_PIN, GPIO_PIN_RESET);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2102      	movs	r1, #2
 80039cc:	4854      	ldr	r0, [pc, #336]	@ (8003b20 <move+0x1e8>)
 80039ce:	f001 ffa3 	bl	8005918 <HAL_GPIO_WritePin>
	}

	if(M_move_l[2]<0)
 80039d2:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <move+0x1dc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da0d      	bge.n	80039f6 <move+0xbe>
	{
		M_move_l[2] = ~M_move_l[2]+1;
 80039da:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <move+0x1dc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	425b      	negs	r3, r3
 80039e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b14 <move+0x1dc>)
 80039e2:	6093      	str	r3, [r2, #8]
		M_direction[2] = 0;
 80039e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003b18 <move+0x1e0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_SET);
 80039ea:	2201      	movs	r2, #1
 80039ec:	2101      	movs	r1, #1
 80039ee:	484c      	ldr	r0, [pc, #304]	@ (8003b20 <move+0x1e8>)
 80039f0:	f001 ff92 	bl	8005918 <HAL_GPIO_WritePin>
 80039f4:	e007      	b.n	8003a06 <move+0xce>
	}
	else
	{
		M_direction[2] = 1;
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <move+0x1e0>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
		HAL_GPIO_WritePin(M2_DIR_PORT, M2_DIR_PIN, GPIO_PIN_RESET);
 80039fc:	2200      	movs	r2, #0
 80039fe:	2101      	movs	r1, #1
 8003a00:	4847      	ldr	r0, [pc, #284]	@ (8003b20 <move+0x1e8>)
 8003a02:	f001 ff89 	bl	8005918 <HAL_GPIO_WritePin>
	}

	Ramp(0);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7ff fe88 	bl	800371c <Ramp>
	Ramp(1);
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	f7ff fe85 	bl	800371c <Ramp>
	Ramp(2);
 8003a12:	2002      	movs	r0, #2
 8003a14:	f7ff fe82 	bl	800371c <Ramp>

	M_move_poz[0] =0;
 8003a18:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <move+0x1ec>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
	M_move_poz[1] =0;
 8003a1e:	4b41      	ldr	r3, [pc, #260]	@ (8003b24 <move+0x1ec>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
	M_move_poz[2] = 0;
 8003a24:	4b3f      	ldr	r3, [pc, #252]	@ (8003b24 <move+0x1ec>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(tim1,0);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim2,0);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(tim3,0);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

	Period_Out(tim1,Period_ramp[0][M_move_poz[0]]);
 8003a42:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <move+0x1ec>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a38      	ldr	r2, [pc, #224]	@ (8003b28 <move+0x1f0>)
 8003a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f7ff fe26 	bl	80036a0 <Period_Out>
	Period_Out(tim2,Period_ramp[1][M_move_poz[1]]);
 8003a54:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <move+0x1ec>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a33      	ldr	r2, [pc, #204]	@ (8003b28 <move+0x1f0>)
 8003a5a:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8003a5e:	3340      	adds	r3, #64	@ 0x40
 8003a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a64:	4619      	mov	r1, r3
 8003a66:	69f8      	ldr	r0, [r7, #28]
 8003a68:	f7ff fe1a 	bl	80036a0 <Period_Out>
	Period_Out(tim3,Period_ramp[2][M_move_poz[2]]);
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <move+0x1ec>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a2d      	ldr	r2, [pc, #180]	@ (8003b28 <move+0x1f0>)
 8003a72:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003a76:	3380      	adds	r3, #128	@ 0x80
 8003a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a80:	f7ff fe0e 	bl	80036a0 <Period_Out>

	if(M_move_l[0] >  M_move_poz[0])
 8003a84:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <move+0x1dc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <move+0x1ec>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d903      	bls.n	8003a9a <move+0x162>
	HAL_TIM_OC_Start_IT(tim1,Channel1);
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f007 f9a9 	bl	800adec <HAL_TIM_OC_Start_IT>
	if(M_move_l[1] >  M_move_poz[1])
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <move+0x1dc>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <move+0x1ec>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d903      	bls.n	8003ab0 <move+0x178>
	HAL_TIM_OC_Start_IT(tim2,Channel2);
 8003aa8:	6a39      	ldr	r1, [r7, #32]
 8003aaa:	69f8      	ldr	r0, [r7, #28]
 8003aac:	f007 f99e 	bl	800adec <HAL_TIM_OC_Start_IT>
	if(M_move_l[2] >  M_move_poz[2])
 8003ab0:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <move+0x1dc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <move+0x1ec>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d903      	bls.n	8003ac6 <move+0x18e>
	HAL_TIM_OC_Start_IT(tim3,Channel3);
 8003abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ac2:	f007 f993 	bl	800adec <HAL_TIM_OC_Start_IT>

	M_move_poz[0]++;
 8003ac6:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <move+0x1ec>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <move+0x1ec>)
 8003ace:	6013      	str	r3, [r2, #0]
	M_move_poz[1]++;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <move+0x1ec>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a13      	ldr	r2, [pc, #76]	@ (8003b24 <move+0x1ec>)
 8003ad8:	6053      	str	r3, [r2, #4]
	M_move_poz[2]++;
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <move+0x1ec>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	4a10      	ldr	r2, [pc, #64]	@ (8003b24 <move+0x1ec>)
 8003ae2:	6093      	str	r3, [r2, #8]

	while(!(theta0_target ==  M_poz[0]) || !(theta1_target ==  M_poz[1]) || !(theta2_target ==  M_poz[2]))
 8003ae4:	bf00      	nop
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <move+0x1d8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1fa      	bne.n	8003ae6 <move+0x1ae>
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <move+0x1d8>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d1f5      	bne.n	8003ae6 <move+0x1ae>
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <move+0x1d8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1f0      	bne.n	8003ae6 <move+0x1ae>
	{
	}
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000021c 	.word	0x2000021c
 8003b14:	2003aba8 	.word	0x2003aba8
 8003b18:	20000010 	.word	0x20000010
 8003b1c:	42020400 	.word	0x42020400
 8003b20:	42020800 	.word	0x42020800
 8003b24:	2003abb4 	.word	0x2003abb4
 8003b28:	20000228 	.word	0x20000228

08003b2c <Set_f_MAX>:

void Set_f_MAX(uint32_t tmp)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	f_MAX = tmp;
 8003b34:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <Set_f_MAX+0x1c>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000004 	.word	0x20000004

08003b4c <Set_f_MIN>:

void Set_f_MIN(uint32_t tmp)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	f_MIN = tmp;
 8003b54:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <Set_f_MIN+0x1c>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000008 	.word	0x20000008

08003b6c <Set_a_MAX>:

void Set_a_MAX(uint32_t tmp)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	a_MAX = tmp;
 8003b74:	4a04      	ldr	r2, [pc, #16]	@ (8003b88 <Set_a_MAX+0x1c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <Get_f_MAX>:

uint32_t Get_f_MAX(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	return f_MAX;
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <Get_f_MAX+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <Get_f_MIN>:

uint32_t Get_f_MIN(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	return f_MIN;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <Get_f_MIN+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000008 	.word	0x20000008

08003bbc <Get_a_MAX>:

uint32_t Get_a_MAX(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
	return a_MAX;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <Get_a_MAX+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <M_Poz_0>:

uint32_t M_Poz_0(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
	return M_poz[0];
 8003bd8:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <M_Poz_0+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000021c 	.word	0x2000021c

08003bec <M_Poz_1>:

uint32_t M_Poz_1(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
	return M_poz[1];
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <M_Poz_1+0x14>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	2000021c 	.word	0x2000021c

08003c04 <M_Poz_2>:

uint32_t M_Poz_2(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	return M_poz[2];
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <M_Poz_2+0x14>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000021c 	.word	0x2000021c

08003c1c <Set_M_Poz_0>:

void Set_M_Poz_0(uint32_t tmp)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	M_poz[0] = tmp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a04      	ldr	r2, [pc, #16]	@ (8003c38 <Set_M_Poz_0+0x1c>)
 8003c28:	6013      	str	r3, [r2, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000021c 	.word	0x2000021c

08003c3c <Set_M_Poz_1>:
void Set_M_Poz_1(uint32_t tmp)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	M_poz[1] = tmp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <Set_M_Poz_1+0x1c>)
 8003c48:	6053      	str	r3, [r2, #4]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000021c 	.word	0x2000021c

08003c5c <Set_M_Poz_2>:
void Set_M_Poz_2(uint32_t tmp)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	M_poz[2] = tmp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <Set_M_Poz_2+0x1c>)
 8003c68:	6093      	str	r3, [r2, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000021c 	.word	0x2000021c
 8003c7c:	00000000 	.word	0x00000000

08003c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b090      	sub	sp, #64	@ 0x40
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c86:	f001 fa6b 	bl	8005160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c8a:	f000 f853 	bl	8003d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c8e:	f000 fc31 	bl	80044f4 <MX_GPIO_Init>
  MX_UART5_Init();
 8003c92:	f000 fb17 	bl	80042c4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8003c96:	f000 fb63 	bl	8004360 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8003c9a:	f000 fbf9 	bl	8004490 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8003c9e:	f000 f8bd 	bl	8003e1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003ca2:	f000 f907 	bl	8003eb4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8003ca6:	f000 fba7 	bl	80043f8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8003caa:	f000 f959 	bl	8003f60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003cae:	f000 f9cd 	bl	800404c <MX_TIM3_Init>
  MX_TIM5_Init();
 8003cb2:	f000 fa41 	bl	8004138 <MX_TIM5_Init>
  MX_TIM15_Init();
 8003cb6:	f000 fab5 	bl	8004224 <MX_TIM15_Init>
  MX_ICACHE_Init();
 8003cba:	f000 f8ef 	bl	8003e9c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t tx_buff[60] = {"test \r\n"};
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d28 <main+0xa8>)
 8003cc0:	1d3b      	adds	r3, r7, #4
 8003cc2:	6810      	ldr	r0, [r2, #0]
 8003cc4:	6851      	ldr	r1, [r2, #4]
 8003cc6:	c303      	stmia	r3!, {r0, r1}
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	2234      	movs	r2, #52	@ 0x34
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00a fb26 	bl	800e322 <memset>
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  //sprintf(tx_buff, "%d \r\n", 360*(0x3FFF&Hall_Sensor_Read_Angle(&hspi1, Hall_SS0_PORT, Hall_SS0_PIN))/0x3FFF); // @suppress("Float formatting support")
  //HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);

  Relay_0_Set();
 8003cd6:	f7fd fa57 	bl	8001188 <Relay_0_Set>
  HAL_Delay(200);
 8003cda:	20c8      	movs	r0, #200	@ 0xc8
 8003cdc:	f001 fafe 	bl	80052dc <HAL_Delay>
  Relay_1_Set();
 8003ce0:	f7fd fa76 	bl	80011d0 <Relay_1_Set>
  HAL_Delay(200);
 8003ce4:	20c8      	movs	r0, #200	@ 0xc8
 8003ce6:	f001 faf9 	bl	80052dc <HAL_Delay>
  Relay_0_Reset();
 8003cea:	f7fd fa59 	bl	80011a0 <Relay_0_Reset>
  HAL_Delay(200);
 8003cee:	20c8      	movs	r0, #200	@ 0xc8
 8003cf0:	f001 faf4 	bl	80052dc <HAL_Delay>
  Relay_1_Reset();
 8003cf4:	f7fd fa78 	bl	80011e8 <Relay_1_Reset>

  Zero_XYZ(0, 0, 0);
 8003cf8:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 8003d20 <main+0xa0>
 8003cfc:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8003d20 <main+0xa0>
 8003d00:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8003d20 <main+0xa0>
 8003d04:	f7fe f88c 	bl	8001e20 <Zero_XYZ>

  //HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_2);
  //Frequency_Out(&htim2,10000);
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_4);
  //HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8003d08:	4808      	ldr	r0, [pc, #32]	@ (8003d2c <main+0xac>)
 8003d0a:	f006 ff31 	bl	800ab70 <HAL_TIM_Base_Start_IT>
  //Frequency_Out(&htim5,40000);
  //Frequency_Out(&htim3,40000);
  //Frequency_Out(&htim2,40000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);

  Menu_UART_Start(&huart1);
 8003d0e:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <main+0xb0>)
 8003d10:	f7fe fe88 	bl	8002a24 <Menu_UART_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Menu_UART_Update(&huart1);
 8003d14:	4806      	ldr	r0, [pc, #24]	@ (8003d30 <main+0xb0>)
 8003d16:	f7fe fec9 	bl	8002aac <Menu_UART_Update>
 8003d1a:	e7fb      	b.n	8003d14 <main+0x94>
 8003d1c:	f3af 8000 	nop.w
	...
 8003d28:	080144c0 	.word	0x080144c0
 8003d2c:	2003ad88 	.word	0x2003ad88
 8003d30:	2003ae68 	.word	0x2003ae68

08003d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b09c      	sub	sp, #112	@ 0x70
 8003d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	2250      	movs	r2, #80	@ 0x50
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00a faed 	bl	800e322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
 8003d58:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e14 <SystemClock_Config+0xe0>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <SystemClock_Config+0xe0>)
 8003d60:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d64:	6113      	str	r3, [r2, #16]
 8003d66:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <SystemClock_Config+0xe0>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003d72:	bf00      	nop
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <SystemClock_Config+0xe0>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d1f9      	bne.n	8003d74 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003d80:	2321      	movs	r3, #33	@ 0x21
 8003d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d90:	2302      	movs	r3, #2
 8003d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8003d94:	2303      	movs	r3, #3
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003d98:	2306      	movs	r3, #6
 8003d9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8003d9c:	237d      	movs	r3, #125	@ 0x7d
 8003d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003da4:	2308      	movs	r3, #8
 8003da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003da8:	2302      	movs	r3, #2
 8003daa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8003dac:	2308      	movs	r3, #8
 8003dae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db8:	f107 0320 	add.w	r3, r7, #32
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 f809 	bl	8005dd4 <HAL_RCC_OscConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003dc8:	f000 fc4c 	bl	8004664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dcc:	231f      	movs	r3, #31
 8003dce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dd8:	2350      	movs	r3, #80	@ 0x50
 8003dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003ddc:	2350      	movs	r3, #80	@ 0x50
 8003dde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV4;
 8003de0:	2350      	movs	r3, #80	@ 0x50
 8003de2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	2105      	movs	r1, #5
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fc2a 	bl	8006644 <HAL_RCC_ClockConfig>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003df6:	f000 fc35 	bl	8004664 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <SystemClock_Config+0xe4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e02:	4a05      	ldr	r2, [pc, #20]	@ (8003e18 <SystemClock_Config+0xe4>)
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	6013      	str	r3, [r2, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	3770      	adds	r7, #112	@ 0x70
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	44020800 	.word	0x44020800
 8003e18:	40022000 	.word	0x40022000

08003e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e22:	4a1c      	ldr	r2, [pc, #112]	@ (8003e94 <MX_I2C1_Init+0x78>)
 8003e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2050517A;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e28:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <MX_I2C1_Init+0x7c>)
 8003e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003e2c:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e3e:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e44:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e56:	480e      	ldr	r0, [pc, #56]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e58:	f001 fd76 	bl	8005948 <HAL_I2C_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003e62:	f000 fbff 	bl	8004664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e66:	2100      	movs	r1, #0
 8003e68:	4809      	ldr	r0, [pc, #36]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e6a:	f001 fe08 	bl	8005a7e <HAL_I2CEx_ConfigAnalogFilter>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003e74:	f000 fbf6 	bl	8004664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4805      	ldr	r0, [pc, #20]	@ (8003e90 <MX_I2C1_Init+0x74>)
 8003e7c:	f001 fe4a 	bl	8005b14 <HAL_I2CEx_ConfigDigitalFilter>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003e86:	f000 fbed 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2003abc0 	.word	0x2003abc0
 8003e94:	40005400 	.word	0x40005400
 8003e98:	2050517a 	.word	0x2050517a

08003e9c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003ea0:	f001 fe84 	bl	8005bac <HAL_ICACHE_Enable>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8003eaa:	f000 fbdb 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003eba:	4a28      	ldr	r2, [pc, #160]	@ (8003f5c <MX_SPI1_Init+0xa8>)
 8003ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ebe:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ec0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003ecc:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ece:	220f      	movs	r2, #15
 8003ed0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed2:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ede:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ee2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ee6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003eea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003eee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ef6:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f0e:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f14:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f20:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003f38:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003f3e:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f44:	4804      	ldr	r0, [pc, #16]	@ (8003f58 <MX_SPI1_Init+0xa4>)
 8003f46:	f006 f93d 	bl	800a1c4 <HAL_SPI_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003f50:	f000 fb88 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	2003ac14 	.word	0x2003ac14
 8003f5c:	40013000 	.word	0x40013000

08003f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	@ 0x38
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f74:	f107 031c 	add.w	r3, r7, #28
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f80:	463b      	mov	r3, r7
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	615a      	str	r2, [r3, #20]
 8003f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f92:	4b2d      	ldr	r3, [pc, #180]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003f94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003f9c:	22f9      	movs	r2, #249	@ 0xf9
 8003f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa0:	4b29      	ldr	r3, [pc, #164]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003fa6:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fac:	4b26      	ldr	r3, [pc, #152]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb2:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fb8:	4823      	ldr	r0, [pc, #140]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fba:	f006 fd82 	bl	800aac2 <HAL_TIM_Base_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003fc4:	f000 fb4e 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	481c      	ldr	r0, [pc, #112]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fd6:	f007 fb4f 	bl	800b678 <HAL_TIM_ConfigClockSource>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003fe0:	f000 fb40 	bl	8004664 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003fe4:	4818      	ldr	r0, [pc, #96]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8003fe6:	f006 fea0 	bl	800ad2a <HAL_TIM_OC_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003ff0:	f000 fb38 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4619      	mov	r1, r3
 8004002:	4811      	ldr	r0, [pc, #68]	@ (8004048 <MX_TIM2_Init+0xe8>)
 8004004:	f008 f96a 	bl	800c2dc <HAL_TIMEx_MasterConfigSynchronization>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800400e:	f000 fb29 	bl	8004664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004012:	2330      	movs	r3, #48	@ 0x30
 8004014:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004022:	463b      	mov	r3, r7
 8004024:	2204      	movs	r2, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4807      	ldr	r0, [pc, #28]	@ (8004048 <MX_TIM2_Init+0xe8>)
 800402a:	f007 faab 	bl	800b584 <HAL_TIM_OC_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004034:	f000 fb16 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004038:	4803      	ldr	r0, [pc, #12]	@ (8004048 <MX_TIM2_Init+0xe8>)
 800403a:	f000 fc8b 	bl	8004954 <HAL_TIM_MspPostInit>

}
 800403e:	bf00      	nop
 8004040:	3738      	adds	r7, #56	@ 0x38
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2003aca4 	.word	0x2003aca4

0800404c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	@ 0x38
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	f107 031c 	add.w	r3, r7, #28
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800406c:	463b      	mov	r3, r7
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	615a      	str	r2, [r3, #20]
 800407c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800407e:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004080:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <MX_TIM3_Init+0xe8>)
 8004082:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 249;
 8004084:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004086:	22f9      	movs	r2, #249	@ 0xf9
 8004088:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408a:	4b29      	ldr	r3, [pc, #164]	@ (8004130 <MX_TIM3_Init+0xe4>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8004090:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004092:	2201      	movs	r2, #1
 8004094:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004096:	4b26      	ldr	r3, [pc, #152]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <MX_TIM3_Init+0xe4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040a2:	4823      	ldr	r0, [pc, #140]	@ (8004130 <MX_TIM3_Init+0xe4>)
 80040a4:	f006 fd0d 	bl	800aac2 <HAL_TIM_Base_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80040ae:	f000 fad9 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040bc:	4619      	mov	r1, r3
 80040be:	481c      	ldr	r0, [pc, #112]	@ (8004130 <MX_TIM3_Init+0xe4>)
 80040c0:	f007 fada 	bl	800b678 <HAL_TIM_ConfigClockSource>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80040ca:	f000 facb 	bl	8004664 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80040ce:	4818      	ldr	r0, [pc, #96]	@ (8004130 <MX_TIM3_Init+0xe4>)
 80040d0:	f006 fe2b 	bl	800ad2a <HAL_TIM_OC_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80040da:	f000 fac3 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	4810      	ldr	r0, [pc, #64]	@ (8004130 <MX_TIM3_Init+0xe4>)
 80040ee:	f008 f8f5 	bl	800c2dc <HAL_TIMEx_MasterConfigSynchronization>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80040f8:	f000 fab4 	bl	8004664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80040fc:	2330      	movs	r3, #48	@ 0x30
 80040fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800410c:	463b      	mov	r3, r7
 800410e:	220c      	movs	r2, #12
 8004110:	4619      	mov	r1, r3
 8004112:	4807      	ldr	r0, [pc, #28]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004114:	f007 fa36 	bl	800b584 <HAL_TIM_OC_ConfigChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800411e:	f000 faa1 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004122:	4803      	ldr	r0, [pc, #12]	@ (8004130 <MX_TIM3_Init+0xe4>)
 8004124:	f000 fc16 	bl	8004954 <HAL_TIM_MspPostInit>

}
 8004128:	bf00      	nop
 800412a:	3738      	adds	r7, #56	@ 0x38
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2003acf0 	.word	0x2003acf0
 8004134:	40000400 	.word	0x40000400

08004138 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	@ 0x38
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800413e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800414c:	f107 031c 	add.w	r3, r7, #28
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004158:	463b      	mov	r3, r7
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	615a      	str	r2, [r3, #20]
 8004168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <MX_TIM5_Init+0xe4>)
 800416c:	4a2c      	ldr	r2, [pc, #176]	@ (8004220 <MX_TIM5_Init+0xe8>)
 800416e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8004170:	4b2a      	ldr	r3, [pc, #168]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004172:	22f9      	movs	r2, #249	@ 0xf9
 8004174:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004176:	4b29      	ldr	r3, [pc, #164]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 800417c:	4b27      	ldr	r3, [pc, #156]	@ (800421c <MX_TIM5_Init+0xe4>)
 800417e:	2201      	movs	r2, #1
 8004180:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004182:	4b26      	ldr	r3, [pc, #152]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004188:	4b24      	ldr	r3, [pc, #144]	@ (800421c <MX_TIM5_Init+0xe4>)
 800418a:	2200      	movs	r2, #0
 800418c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800418e:	4823      	ldr	r0, [pc, #140]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004190:	f006 fc97 	bl	800aac2 <HAL_TIM_Base_Init>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800419a:	f000 fa63 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80041a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041a8:	4619      	mov	r1, r3
 80041aa:	481c      	ldr	r0, [pc, #112]	@ (800421c <MX_TIM5_Init+0xe4>)
 80041ac:	f007 fa64 	bl	800b678 <HAL_TIM_ConfigClockSource>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80041b6:	f000 fa55 	bl	8004664 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80041ba:	4818      	ldr	r0, [pc, #96]	@ (800421c <MX_TIM5_Init+0xe4>)
 80041bc:	f006 fdb5 	bl	800ad2a <HAL_TIM_OC_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80041c6:	f000 fa4d 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80041d2:	f107 031c 	add.w	r3, r7, #28
 80041d6:	4619      	mov	r1, r3
 80041d8:	4810      	ldr	r0, [pc, #64]	@ (800421c <MX_TIM5_Init+0xe4>)
 80041da:	f008 f87f 	bl	800c2dc <HAL_TIMEx_MasterConfigSynchronization>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80041e4:	f000 fa3e 	bl	8004664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80041e8:	2330      	movs	r3, #48	@ 0x30
 80041ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041f8:	463b      	mov	r3, r7
 80041fa:	2200      	movs	r2, #0
 80041fc:	4619      	mov	r1, r3
 80041fe:	4807      	ldr	r0, [pc, #28]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004200:	f007 f9c0 	bl	800b584 <HAL_TIM_OC_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800420a:	f000 fa2b 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800420e:	4803      	ldr	r0, [pc, #12]	@ (800421c <MX_TIM5_Init+0xe4>)
 8004210:	f000 fba0 	bl	8004954 <HAL_TIM_MspPostInit>

}
 8004214:	bf00      	nop
 8004216:	3738      	adds	r7, #56	@ 0x38
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	2003ad3c 	.word	0x2003ad3c
 8004220:	40000c00 	.word	0x40000c00

08004224 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004242:	4b1e      	ldr	r3, [pc, #120]	@ (80042bc <MX_TIM15_Init+0x98>)
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <MX_TIM15_Init+0x9c>)
 8004246:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 8004248:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <MX_TIM15_Init+0x98>)
 800424a:	220a      	movs	r2, #10
 800424c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424e:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <MX_TIM15_Init+0x98>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 124;
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <MX_TIM15_Init+0x98>)
 8004256:	227c      	movs	r2, #124	@ 0x7c
 8004258:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <MX_TIM15_Init+0x98>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004260:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <MX_TIM15_Init+0x98>)
 8004262:	2200      	movs	r2, #0
 8004264:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004266:	4b15      	ldr	r3, [pc, #84]	@ (80042bc <MX_TIM15_Init+0x98>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800426c:	4813      	ldr	r0, [pc, #76]	@ (80042bc <MX_TIM15_Init+0x98>)
 800426e:	f006 fc28 	bl	800aac2 <HAL_TIM_Base_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8004278:	f000 f9f4 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800427c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	4619      	mov	r1, r3
 8004288:	480c      	ldr	r0, [pc, #48]	@ (80042bc <MX_TIM15_Init+0x98>)
 800428a:	f007 f9f5 	bl	800b678 <HAL_TIM_ConfigClockSource>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8004294:	f000 f9e6 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4805      	ldr	r0, [pc, #20]	@ (80042bc <MX_TIM15_Init+0x98>)
 80042a6:	f008 f819 	bl	800c2dc <HAL_TIMEx_MasterConfigSynchronization>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80042b0:	f000 f9d8 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80042b4:	bf00      	nop
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	2003ad88 	.word	0x2003ad88
 80042c0:	40014000 	.word	0x40014000

080042c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042c8:	4b23      	ldr	r3, [pc, #140]	@ (8004358 <MX_UART5_Init+0x94>)
 80042ca:	4a24      	ldr	r2, [pc, #144]	@ (800435c <MX_UART5_Init+0x98>)
 80042cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042ce:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <MX_UART5_Init+0x94>)
 80042d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <MX_UART5_Init+0x94>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <MX_UART5_Init+0x94>)
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80042e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <MX_UART5_Init+0x94>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <MX_UART5_Init+0x94>)
 80042ea:	220c      	movs	r2, #12
 80042ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80042ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <MX_UART5_Init+0x94>)
 80042f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80042f4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f6:	4b18      	ldr	r3, [pc, #96]	@ (8004358 <MX_UART5_Init+0x94>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042fc:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <MX_UART5_Init+0x94>)
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004302:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <MX_UART5_Init+0x94>)
 8004304:	2200      	movs	r2, #0
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <MX_UART5_Init+0x94>)
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800430e:	4812      	ldr	r0, [pc, #72]	@ (8004358 <MX_UART5_Init+0x94>)
 8004310:	f008 f8fa 	bl	800c508 <HAL_UART_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 800431a:	f000 f9a3 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800431e:	2100      	movs	r1, #0
 8004320:	480d      	ldr	r0, [pc, #52]	@ (8004358 <MX_UART5_Init+0x94>)
 8004322:	f008 febd 	bl	800d0a0 <HAL_UARTEx_SetTxFifoThreshold>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 800432c:	f000 f99a 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004330:	2100      	movs	r1, #0
 8004332:	4809      	ldr	r0, [pc, #36]	@ (8004358 <MX_UART5_Init+0x94>)
 8004334:	f008 fef2 	bl	800d11c <HAL_UARTEx_SetRxFifoThreshold>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 800433e:	f000 f991 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004342:	4805      	ldr	r0, [pc, #20]	@ (8004358 <MX_UART5_Init+0x94>)
 8004344:	f008 fe73 	bl	800d02e <HAL_UARTEx_DisableFifoMode>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 800434e:	f000 f989 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	2003add4 	.word	0x2003add4
 800435c:	40005000 	.word	0x40005000

08004360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004364:	4b22      	ldr	r3, [pc, #136]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004366:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <MX_USART1_UART_Init+0x94>)
 8004368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 800436c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004372:	4b1f      	ldr	r3, [pc, #124]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800437e:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004386:	220c      	movs	r2, #12
 8004388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438a:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004390:	4b17      	ldr	r3, [pc, #92]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800439c:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 800439e:	2200      	movs	r2, #0
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043a2:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043a8:	4811      	ldr	r0, [pc, #68]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 80043aa:	f008 f8ad 	bl	800c508 <HAL_UART_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80043b4:	f000 f956 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043b8:	2100      	movs	r1, #0
 80043ba:	480d      	ldr	r0, [pc, #52]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 80043bc:	f008 fe70 	bl	800d0a0 <HAL_UARTEx_SetTxFifoThreshold>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80043c6:	f000 f94d 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ca:	2100      	movs	r1, #0
 80043cc:	4808      	ldr	r0, [pc, #32]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 80043ce:	f008 fea5 	bl	800d11c <HAL_UARTEx_SetRxFifoThreshold>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80043d8:	f000 f944 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80043dc:	4804      	ldr	r0, [pc, #16]	@ (80043f0 <MX_USART1_UART_Init+0x90>)
 80043de:	f008 fe26 	bl	800d02e <HAL_UARTEx_DisableFifoMode>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80043e8:	f000 f93c 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	2003ae68 	.word	0x2003ae68
 80043f4:	40013800 	.word	0x40013800

080043f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80043fc:	4b22      	ldr	r3, [pc, #136]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 80043fe:	4a23      	ldr	r2, [pc, #140]	@ (800448c <MX_USART6_UART_Init+0x94>)
 8004400:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004402:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004404:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004408:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b19      	ldr	r3, [pc, #100]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800442e:	4b16      	ldr	r3, [pc, #88]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004430:	2200      	movs	r2, #0
 8004432:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004436:	2200      	movs	r2, #0
 8004438:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 800443c:	2200      	movs	r2, #0
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004440:	4811      	ldr	r0, [pc, #68]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004442:	f008 f861 	bl	800c508 <HAL_UART_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800444c:	f000 f90a 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004450:	2100      	movs	r1, #0
 8004452:	480d      	ldr	r0, [pc, #52]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004454:	f008 fe24 	bl	800d0a0 <HAL_UARTEx_SetTxFifoThreshold>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800445e:	f000 f901 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004462:	2100      	movs	r1, #0
 8004464:	4808      	ldr	r0, [pc, #32]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004466:	f008 fe59 	bl	800d11c <HAL_UARTEx_SetRxFifoThreshold>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004470:	f000 f8f8 	bl	8004664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004474:	4804      	ldr	r0, [pc, #16]	@ (8004488 <MX_USART6_UART_Init+0x90>)
 8004476:	f008 fdda 	bl	800d02e <HAL_UARTEx_DisableFifoMode>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004480:	f000 f8f0 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2003aefc 	.word	0x2003aefc
 800448c:	40006400 	.word	0x40006400

08004490 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8004494:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 8004496:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <MX_USB_PCD_Init+0x60>)
 8004498:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800449a:	4b14      	ldr	r3, [pc, #80]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 800449c:	2208      	movs	r2, #8
 800449e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044a2:	2202      	movs	r2, #2
 80044a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80044a6:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044a8:	2202      	movs	r2, #2
 80044aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80044d6:	4805      	ldr	r0, [pc, #20]	@ (80044ec <MX_USB_PCD_Init+0x5c>)
 80044d8:	f001 fb78 	bl	8005bcc <HAL_PCD_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80044e2:	f000 f8bf 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2003af90 	.word	0x2003af90
 80044f0:	40016000 	.word	0x40016000

080044f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800450a:	4b51      	ldr	r3, [pc, #324]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004510:	4a4f      	ldr	r2, [pc, #316]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800451a:	4b4d      	ldr	r3, [pc, #308]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800451c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004528:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800452a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800452e:	4a48      	ldr	r2, [pc, #288]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004534:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004538:	4b45      	ldr	r3, [pc, #276]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800453a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004546:	4b42      	ldr	r3, [pc, #264]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454c:	4a40      	ldr	r2, [pc, #256]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004556:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004564:	4b3a      	ldr	r3, [pc, #232]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800456a:	4a39      	ldr	r2, [pc, #228]	@ (8004650 <MX_GPIO_Init+0x15c>)
 800456c:	f043 0302 	orr.w	r3, r3, #2
 8004570:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004574:	4b36      	ldr	r3, [pc, #216]	@ (8004650 <MX_GPIO_Init+0x15c>)
 8004576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8004582:	2200      	movs	r2, #0
 8004584:	f24a 0113 	movw	r1, #40979	@ 0xa013
 8004588:	4832      	ldr	r0, [pc, #200]	@ (8004654 <MX_GPIO_Init+0x160>)
 800458a:	f001 f9c5 	bl	8005918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800458e:	2200      	movs	r2, #0
 8004590:	f240 1101 	movw	r1, #257	@ 0x101
 8004594:	4830      	ldr	r0, [pc, #192]	@ (8004658 <MX_GPIO_Init+0x164>)
 8004596:	f001 f9bf 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_SET);
 800459a:	2201      	movs	r2, #1
 800459c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80045a0:	482d      	ldr	r0, [pc, #180]	@ (8004658 <MX_GPIO_Init+0x164>)
 80045a2:	f001 f9b9 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80045a6:	2201      	movs	r2, #1
 80045a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045ac:	482b      	ldr	r0, [pc, #172]	@ (800465c <MX_GPIO_Init+0x168>)
 80045ae:	f001 f9b3 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80045b2:	f24a 0313 	movw	r3, #40979	@ 0xa013
 80045b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b8:	2301      	movs	r3, #1
 80045ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	2300      	movs	r3, #0
 80045c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4619      	mov	r1, r3
 80045ca:	4822      	ldr	r0, [pc, #136]	@ (8004654 <MX_GPIO_Init+0x160>)
 80045cc:	f001 f83a 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <MX_GPIO_Init+0x16c>)
 80045d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4619      	mov	r1, r3
 80045e4:	481b      	ldr	r0, [pc, #108]	@ (8004654 <MX_GPIO_Init+0x160>)
 80045e6:	f001 f82d 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045ea:	2304      	movs	r3, #4
 80045ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045fa:	2302      	movs	r3, #2
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	4619      	mov	r1, r3
 8004604:	4813      	ldr	r0, [pc, #76]	@ (8004654 <MX_GPIO_Init+0x160>)
 8004606:	f001 f81d 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_8;
 800460a:	f240 5321 	movw	r3, #1313	@ 0x521
 800460e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004610:	2301      	movs	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4619      	mov	r1, r3
 8004622:	480d      	ldr	r0, [pc, #52]	@ (8004658 <MX_GPIO_Init+0x164>)
 8004624:	f001 f80e 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800462c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800462e:	2301      	movs	r3, #1
 8004630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004636:	2300      	movs	r3, #0
 8004638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	4619      	mov	r1, r3
 8004640:	4806      	ldr	r0, [pc, #24]	@ (800465c <MX_GPIO_Init+0x168>)
 8004642:	f000 ffff 	bl	8005644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004646:	bf00      	nop
 8004648:	3728      	adds	r7, #40	@ 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	44020c00 	.word	0x44020c00
 8004654:	42020800 	.word	0x42020800
 8004658:	42020400 	.word	0x42020400
 800465c:	42020000 	.word	0x42020000
 8004660:	10110000 	.word	0x10110000

08004664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004668:	b672      	cpsid	i
}
 800466a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <Error_Handler+0x8>

08004670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0be      	sub	sp, #248	@ 0xf8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	22d0      	movs	r2, #208	@ 0xd0
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f009 fe3e 	bl	800e322 <memset>
  if(hi2c->Instance==I2C1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a26      	ldr	r2, [pc, #152]	@ (8004744 <HAL_I2C_MspInit+0xc4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d145      	bne.n	800473c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80046b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046c2:	f107 0310 	add.w	r3, r7, #16
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 fafe 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80046d2:	f7ff ffc7 	bl	8004664 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046e6:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046f4:	23c0      	movs	r3, #192	@ 0xc0
 80046f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046fa:	2312      	movs	r3, #18
 80046fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800470c:	2304      	movs	r3, #4
 800470e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004712:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004716:	4619      	mov	r1, r3
 8004718:	480c      	ldr	r0, [pc, #48]	@ (800474c <HAL_I2C_MspInit+0xcc>)
 800471a:	f000 ff93 	bl	8005644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 8004720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004724:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 8004726:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800472a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800472e:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_I2C_MspInit+0xc8>)
 8004730:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800473c:	bf00      	nop
 800473e:	37f8      	adds	r7, #248	@ 0xf8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40005400 	.word	0x40005400
 8004748:	44020c00 	.word	0x44020c00
 800474c:	42020400 	.word	0x42020400

08004750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b0be      	sub	sp, #248	@ 0xf8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004758:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	22d0      	movs	r2, #208	@ 0xd0
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f009 fdd6 	bl	800e322 <memset>
  if(hspi->Instance==SPI1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a31      	ldr	r2, [pc, #196]	@ (8004840 <HAL_SPI_MspInit+0xf0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d15a      	bne.n	8004836 <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004780:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	4618      	mov	r0, r3
 8004798:	f002 fa96 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80047a2:	f7ff ff5f 	bl	8004664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047a6:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047ac:	4a25      	ldr	r2, [pc, #148]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047b2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80047b6:	4b23      	ldr	r3, [pc, #140]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <HAL_SPI_MspInit+0xf4>)
 80047d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80047e2:	23a0      	movs	r3, #160	@ 0xa0
 80047e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e8:	2302      	movs	r3, #2
 80047ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047fa:	2305      	movs	r3, #5
 80047fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004804:	4619      	mov	r1, r3
 8004806:	4810      	ldr	r0, [pc, #64]	@ (8004848 <HAL_SPI_MspInit+0xf8>)
 8004808:	f000 ff1c 	bl	8005644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800480c:	2340      	movs	r3, #64	@ 0x40
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004812:	2302      	movs	r3, #2
 8004814:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004818:	2301      	movs	r3, #1
 800481a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004824:	2305      	movs	r3, #5
 8004826:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800482e:	4619      	mov	r1, r3
 8004830:	4805      	ldr	r0, [pc, #20]	@ (8004848 <HAL_SPI_MspInit+0xf8>)
 8004832:	f000 ff07 	bl	8005644 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004836:	bf00      	nop
 8004838:	37f8      	adds	r7, #248	@ 0xf8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40013000 	.word	0x40013000
 8004844:	44020c00 	.word	0x44020c00
 8004848:	42020000 	.word	0x42020000

0800484c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485c:	d117      	bne.n	800488e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800485e:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 8004860:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004864:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800486e:	4b35      	ldr	r3, [pc, #212]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 8004870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800487c:	2200      	movs	r2, #0
 800487e:	2100      	movs	r1, #0
 8004880:	202d      	movs	r0, #45	@ 0x2d
 8004882:	f000 fe07 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004886:	202d      	movs	r0, #45	@ 0x2d
 8004888:	f000 fe1e 	bl	80054c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800488c:	e055      	b.n	800493a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2d      	ldr	r2, [pc, #180]	@ (8004948 <HAL_TIM_Base_MspInit+0xfc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d117      	bne.n	80048c8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004898:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800489e:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 80048a0:	f043 0302 	orr.w	r3, r3, #2
 80048a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048a8:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 80048aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	202e      	movs	r0, #46	@ 0x2e
 80048bc:	f000 fdea 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048c0:	202e      	movs	r0, #46	@ 0x2e
 80048c2:	f000 fe01 	bl	80054c8 <HAL_NVIC_EnableIRQ>
}
 80048c6:	e038      	b.n	800493a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <HAL_TIM_Base_MspInit+0x100>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d117      	bne.n	8004902 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 80048d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 80048da:	f043 0308 	orr.w	r3, r3, #8
 80048de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048e2:	4b18      	ldr	r3, [pc, #96]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 80048e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80048f0:	2200      	movs	r2, #0
 80048f2:	2100      	movs	r1, #0
 80048f4:	2030      	movs	r0, #48	@ 0x30
 80048f6:	f000 fdcd 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80048fa:	2030      	movs	r0, #48	@ 0x30
 80048fc:	f000 fde4 	bl	80054c8 <HAL_NVIC_EnableIRQ>
}
 8004900:	e01b      	b.n	800493a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <HAL_TIM_Base_MspInit+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d116      	bne.n	800493a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800490c:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 800490e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004918:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800491c:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <HAL_TIM_Base_MspInit+0xf8>)
 800491e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2047      	movs	r0, #71	@ 0x47
 8004930:	f000 fdb0 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004934:	2047      	movs	r0, #71	@ 0x47
 8004936:	f000 fdc7 	bl	80054c8 <HAL_NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	44020c00 	.word	0x44020c00
 8004948:	40000400 	.word	0x40000400
 800494c:	40000c00 	.word	0x40000c00
 8004950:	40014000 	.word	0x40014000

08004954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	@ 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d11f      	bne.n	80049b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004976:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 8004978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800497c:	4a34      	ldr	r2, [pc, #208]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004986:	4b32      	ldr	r3, [pc, #200]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 8004988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004994:	2302      	movs	r3, #2
 8004996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049a4:	2301      	movs	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	4619      	mov	r1, r3
 80049ae:	4829      	ldr	r0, [pc, #164]	@ (8004a54 <HAL_TIM_MspPostInit+0x100>)
 80049b0:	f000 fe48 	bl	8005644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80049b4:	e048      	b.n	8004a48 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a27      	ldr	r2, [pc, #156]	@ (8004a58 <HAL_TIM_MspPostInit+0x104>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d11f      	bne.n	8004a00 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c0:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 80049c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c6:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80049de:	2302      	movs	r3, #2
 80049e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e2:	2302      	movs	r3, #2
 80049e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049ee:	2302      	movs	r3, #2
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	4619      	mov	r1, r3
 80049f8:	4818      	ldr	r0, [pc, #96]	@ (8004a5c <HAL_TIM_MspPostInit+0x108>)
 80049fa:	f000 fe23 	bl	8005644 <HAL_GPIO_Init>
}
 80049fe:	e023      	b.n	8004a48 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM5)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a16      	ldr	r2, [pc, #88]	@ (8004a60 <HAL_TIM_MspPostInit+0x10c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d11e      	bne.n	8004a48 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a10:	4a0f      	ldr	r2, [pc, #60]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <HAL_TIM_MspPostInit+0xfc>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a34:	2300      	movs	r3, #0
 8004a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	4619      	mov	r1, r3
 8004a42:	4804      	ldr	r0, [pc, #16]	@ (8004a54 <HAL_TIM_MspPostInit+0x100>)
 8004a44:	f000 fdfe 	bl	8005644 <HAL_GPIO_Init>
}
 8004a48:	bf00      	nop
 8004a4a:	3728      	adds	r7, #40	@ 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	44020c00 	.word	0x44020c00
 8004a54:	42020000 	.word	0x42020000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	42020400 	.word	0x42020400
 8004a60:	40000c00 	.word	0x40000c00

08004a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b0c4      	sub	sp, #272	@ 0x110
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a72:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a74:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a88:	22d0      	movs	r2, #208	@ 0xd0
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f009 fc48 	bl	800e322 <memset>
  if(huart->Instance==UART5)
 8004a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a92      	ldr	r2, [pc, #584]	@ (8004ce8 <HAL_UART_MspInit+0x284>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d16c      	bne.n	8004b7e <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004aa4:	f04f 0210 	mov.w	r2, #16
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 f904 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8004ac6:	f7ff fdcd 	bl	8004664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004aca:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad0:	4a86      	ldr	r2, [pc, #536]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ada:	4b84      	ldr	r3, [pc, #528]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae8:	4b80      	ldr	r3, [pc, #512]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aee:	4a7f      	ldr	r2, [pc, #508]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004af8:	4b7c      	ldr	r3, [pc, #496]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b06:	4b79      	ldr	r3, [pc, #484]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0c:	4a77      	ldr	r2, [pc, #476]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b16:	4b75      	ldr	r3, [pc, #468]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	69fb      	ldr	r3, [r7, #28]
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    PC8     ------> UART5_RTS
    PC9     ------> UART5_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004b24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004b28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004b3e:	230e      	movs	r3, #14
 8004b40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b44:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4869      	ldr	r0, [pc, #420]	@ (8004cf0 <HAL_UART_MspInit+0x28c>)
 8004b4c:	f000 fd7a 	bl	8005644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b70:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004b74:	4619      	mov	r1, r3
 8004b76:	485f      	ldr	r0, [pc, #380]	@ (8004cf4 <HAL_UART_MspInit+0x290>)
 8004b78:	f000 fd64 	bl	8005644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004b7c:	e0af      	b.n	8004cde <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART1)
 8004b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf8 <HAL_UART_MspInit+0x294>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d147      	bne.n	8004c20 <HAL_UART_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b90:	f04f 0201 	mov.w	r2, #1
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f002 f88e 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8004bb2:	f7ff fd57 	bl	8004664 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004bb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bc2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004bc6:	4b49      	ldr	r3, [pc, #292]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd4:	4b45      	ldr	r3, [pc, #276]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bda:	4a44      	ldr	r2, [pc, #272]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004be4:	4b41      	ldr	r3, [pc, #260]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004bf2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c12:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004c16:	4619      	mov	r1, r3
 8004c18:	4835      	ldr	r0, [pc, #212]	@ (8004cf0 <HAL_UART_MspInit+0x28c>)
 8004c1a:	f000 fd13 	bl	8005644 <HAL_GPIO_Init>
}
 8004c1e:	e05e      	b.n	8004cde <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8004c20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a33      	ldr	r2, [pc, #204]	@ (8004cfc <HAL_UART_MspInit+0x298>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d155      	bne.n	8004cde <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004c32:	f04f 0220 	mov.w	r2, #32
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f002 f83d 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8004c54:	f7ff fd06 	bl	8004664 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c58:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c5e:	4a23      	ldr	r2, [pc, #140]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c68:	4b20      	ldr	r3, [pc, #128]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c6e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8004c72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004c84:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8c:	4a17      	ldr	r2, [pc, #92]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <HAL_UART_MspInit+0x288>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c9c:	f003 0204 	and.w	r2, r3, #4
 8004ca0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cb2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cb4:	23c0      	movs	r3, #192	@ 0xc0
 8004cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004ccc:	2307      	movs	r3, #7
 8004cce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cd2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4806      	ldr	r0, [pc, #24]	@ (8004cf4 <HAL_UART_MspInit+0x290>)
 8004cda:	f000 fcb3 	bl	8005644 <HAL_GPIO_Init>
}
 8004cde:	bf00      	nop
 8004ce0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40005000 	.word	0x40005000
 8004cec:	44020c00 	.word	0x44020c00
 8004cf0:	42020400 	.word	0x42020400
 8004cf4:	42020800 	.word	0x42020800
 8004cf8:	40013800 	.word	0x40013800
 8004cfc:	40006400 	.word	0x40006400

08004d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0b8      	sub	sp, #224	@ 0xe0
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d08:	f107 0310 	add.w	r3, r7, #16
 8004d0c:	22d0      	movs	r2, #208	@ 0xd0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f009 fb06 	bl	800e322 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <HAL_PCD_MspInit+0x70>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d123      	bne.n	8004d68 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0310 	mov.w	r3, #16
 8004d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004d2c:	2330      	movs	r3, #48	@ 0x30
 8004d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d32:	f107 0310 	add.w	r3, r7, #16
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 ffc6 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8004d42:	f7ff fc8f 	bl	8004664 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 8004d46:	f001 f835 	bl	8005db4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <HAL_PCD_MspInit+0x74>)
 8004d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d50:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <HAL_PCD_MspInit+0x74>)
 8004d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_PCD_MspInit+0x74>)
 8004d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8004d68:	bf00      	nop
 8004d6a:	37e0      	adds	r7, #224	@ 0xe0
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40016000 	.word	0x40016000
 8004d74:	44020c00 	.word	0x44020c00

08004d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <NMI_Handler+0x4>

08004d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <HardFault_Handler+0x4>

08004d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <MemManage_Handler+0x4>

08004d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <BusFault_Handler+0x4>

08004d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <UsageFault_Handler+0x4>

08004da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dce:	f000 fa65 	bl	800529c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M1_PLS_PORT, M1_PLS_PIN))
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4809      	ldr	r0, [pc, #36]	@ (8004e04 <TIM2_IRQHandler+0x2c>)
 8004de0:	f000 fd82 	bl	80058e8 <HAL_GPIO_ReadPin>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <TIM2_IRQHandler+0x22>
	{
		Ramp_Out(M1_TIM,M1_CHANNEL,1);
 8004dea:	2201      	movs	r2, #1
 8004dec:	2104      	movs	r1, #4
 8004dee:	4806      	ldr	r0, [pc, #24]	@ (8004e08 <TIM2_IRQHandler+0x30>)
 8004df0:	f7fe fd68 	bl	80038c4 <Ramp_Out>
		Mototr_Poz_Inc(1);
 8004df4:	2001      	movs	r0, #1
 8004df6:	f7fe fc69 	bl	80036cc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004dfa:	4803      	ldr	r0, [pc, #12]	@ (8004e08 <TIM2_IRQHandler+0x30>)
 8004dfc:	f006 fa72 	bl	800b2e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Mototr_Poz_Inc(2);

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	42020000 	.word	0x42020000
 8004e08:	2003aca4 	.word	0x2003aca4

08004e0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M2_PLS_PORT, M2_PLS_PIN))
 8004e10:	2102      	movs	r1, #2
 8004e12:	4809      	ldr	r0, [pc, #36]	@ (8004e38 <TIM3_IRQHandler+0x2c>)
 8004e14:	f000 fd68 	bl	80058e8 <HAL_GPIO_ReadPin>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <TIM3_IRQHandler+0x22>
	{
		Ramp_Out(M2_TIM,M2_CHANNEL,2);
 8004e1e:	2202      	movs	r2, #2
 8004e20:	210c      	movs	r1, #12
 8004e22:	4806      	ldr	r0, [pc, #24]	@ (8004e3c <TIM3_IRQHandler+0x30>)
 8004e24:	f7fe fd4e 	bl	80038c4 <Ramp_Out>
		Mototr_Poz_Inc(2);
 8004e28:	2002      	movs	r0, #2
 8004e2a:	f7fe fc4f 	bl	80036cc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e2e:	4803      	ldr	r0, [pc, #12]	@ (8004e3c <TIM3_IRQHandler+0x30>)
 8004e30:	f006 fa58 	bl	800b2e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	42020400 	.word	0x42020400
 8004e3c:	2003acf0 	.word	0x2003acf0

08004e40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(!HAL_GPIO_ReadPin(M0_PLS_PORT, M0_PLS_PIN))
 8004e44:	2101      	movs	r1, #1
 8004e46:	4809      	ldr	r0, [pc, #36]	@ (8004e6c <TIM5_IRQHandler+0x2c>)
 8004e48:	f000 fd4e 	bl	80058e8 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d107      	bne.n	8004e62 <TIM5_IRQHandler+0x22>
	{
		Ramp_Out(M0_TIM,M0_CHANNEL,0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	4806      	ldr	r0, [pc, #24]	@ (8004e70 <TIM5_IRQHandler+0x30>)
 8004e58:	f7fe fd34 	bl	80038c4 <Ramp_Out>
		  Mototr_Poz_Inc(0);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7fe fc35 	bl	80036cc <Mototr_Poz_Inc>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004e62:	4803      	ldr	r0, [pc, #12]	@ (8004e70 <TIM5_IRQHandler+0x30>)
 8004e64:	f006 fa3e 	bl	800b2e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	42020000 	.word	0x42020000
 8004e70:	2003ad3c 	.word	0x2003ad3c

08004e74 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004e78:	4802      	ldr	r0, [pc, #8]	@ (8004e84 <TIM15_IRQHandler+0x10>)
 8004e7a:	f006 fa33 	bl	800b2e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	2003ad88 	.word	0x2003ad88

08004e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return 1;
 8004e8c:	2301      	movs	r3, #1
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <_kill>:

int _kill(int pid, int sig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ea2:	f009 fa91 	bl	800e3c8 <__errno>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2216      	movs	r2, #22
 8004eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_exit>:

void _exit (int status)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ffe7 	bl	8004e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <_exit+0x12>

08004ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e00a      	b.n	8004ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ee0:	f3af 8000 	nop.w
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	60ba      	str	r2, [r7, #8]
 8004eec:	b2ca      	uxtb	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	dbf0      	blt.n	8004ee0 <_read+0x12>
  }

  return len;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e009      	b.n	8004f2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	60ba      	str	r2, [r7, #8]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	dbf1      	blt.n	8004f1a <_write+0x12>
  }
  return len;
 8004f36:	687b      	ldr	r3, [r7, #4]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_close>:

int _close(int file)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f68:	605a      	str	r2, [r3, #4]
  return 0;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <_isatty>:

int _isatty(int file)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f80:	2301      	movs	r3, #1
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fb0:	4a14      	ldr	r2, [pc, #80]	@ (8005004 <_sbrk+0x5c>)
 8004fb2:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <_sbrk+0x60>)
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fbc:	4b13      	ldr	r3, [pc, #76]	@ (800500c <_sbrk+0x64>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fc4:	4b11      	ldr	r3, [pc, #68]	@ (800500c <_sbrk+0x64>)
 8004fc6:	4a12      	ldr	r2, [pc, #72]	@ (8005010 <_sbrk+0x68>)
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fca:	4b10      	ldr	r3, [pc, #64]	@ (800500c <_sbrk+0x64>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d207      	bcs.n	8004fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fd8:	f009 f9f6 	bl	800e3c8 <__errno>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	220c      	movs	r2, #12
 8004fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	e009      	b.n	8004ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	@ (800500c <_sbrk+0x64>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fee:	4b07      	ldr	r3, [pc, #28]	@ (800500c <_sbrk+0x64>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a05      	ldr	r2, [pc, #20]	@ (800500c <_sbrk+0x64>)
 8004ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20044000 	.word	0x20044000
 8005008:	00000400 	.word	0x00000400
 800500c:	2003b270 	.word	0x2003b270
 8005010:	2003b3c8 	.word	0x2003b3c8

08005014 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800501a:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <SystemInit+0xdc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	4a33      	ldr	r2, [pc, #204]	@ (80050f0 <SystemInit+0xdc>)
 8005022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005026:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800502a:	4b32      	ldr	r3, [pc, #200]	@ (80050f4 <SystemInit+0xe0>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005030:	4b30      	ldr	r3, [pc, #192]	@ (80050f4 <SystemInit+0xe0>)
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005036:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <SystemInit+0xe0>)
 8005038:	2200      	movs	r2, #0
 800503a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800503c:	4b2d      	ldr	r3, [pc, #180]	@ (80050f4 <SystemInit+0xe0>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	492c      	ldr	r1, [pc, #176]	@ (80050f4 <SystemInit+0xe0>)
 8005042:	4b2d      	ldr	r3, [pc, #180]	@ (80050f8 <SystemInit+0xe4>)
 8005044:	4013      	ands	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005048:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <SystemInit+0xe0>)
 800504a:	2200      	movs	r2, #0
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800504e:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <SystemInit+0xe0>)
 8005050:	2200      	movs	r2, #0
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8005054:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <SystemInit+0xe0>)
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800505a:	4b26      	ldr	r3, [pc, #152]	@ (80050f4 <SystemInit+0xe0>)
 800505c:	4a27      	ldr	r2, [pc, #156]	@ (80050fc <SystemInit+0xe8>)
 800505e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005060:	4b24      	ldr	r3, [pc, #144]	@ (80050f4 <SystemInit+0xe0>)
 8005062:	2200      	movs	r2, #0
 8005064:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8005066:	4b23      	ldr	r3, [pc, #140]	@ (80050f4 <SystemInit+0xe0>)
 8005068:	4a24      	ldr	r2, [pc, #144]	@ (80050fc <SystemInit+0xe8>)
 800506a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800506c:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <SystemInit+0xe0>)
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8005072:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <SystemInit+0xe0>)
 8005074:	4a21      	ldr	r2, [pc, #132]	@ (80050fc <SystemInit+0xe8>)
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005078:	4b1e      	ldr	r3, [pc, #120]	@ (80050f4 <SystemInit+0xe0>)
 800507a:	2200      	movs	r2, #0
 800507c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800507e:	4b1d      	ldr	r3, [pc, #116]	@ (80050f4 <SystemInit+0xe0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <SystemInit+0xe0>)
 8005084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800508a:	4b1a      	ldr	r3, [pc, #104]	@ (80050f4 <SystemInit+0xe0>)
 800508c:	2200      	movs	r2, #0
 800508e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005090:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <SystemInit+0xdc>)
 8005092:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005096:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005098:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <SystemInit+0xec>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80050a0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80050a8:	d003      	beq.n	80050b2 <SystemInit+0x9e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050b0:	d117      	bne.n	80050e2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80050b2:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <SystemInit+0xec>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80050be:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <SystemInit+0xec>)
 80050c0:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <SystemInit+0xf0>)
 80050c2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <SystemInit+0xec>)
 80050c6:	4a10      	ldr	r2, [pc, #64]	@ (8005108 <SystemInit+0xf4>)
 80050c8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <SystemInit+0xec>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <SystemInit+0xec>)
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <SystemInit+0xec>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <SystemInit+0xec>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	61d3      	str	r3, [r2, #28]
  }
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	44020c00 	.word	0x44020c00
 80050f8:	eae2eae3 	.word	0xeae2eae3
 80050fc:	01010280 	.word	0x01010280
 8005100:	40022000 	.word	0x40022000
 8005104:	08192a3b 	.word	0x08192a3b
 8005108:	4c5d6e7f 	.word	0x4c5d6e7f

0800510c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800510c:	480d      	ldr	r0, [pc, #52]	@ (8005144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800510e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005110:	f7ff ff80 	bl	8005014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005114:	480c      	ldr	r0, [pc, #48]	@ (8005148 <LoopForever+0x6>)
  ldr r1, =_edata
 8005116:	490d      	ldr	r1, [pc, #52]	@ (800514c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005118:	4a0d      	ldr	r2, [pc, #52]	@ (8005150 <LoopForever+0xe>)
  movs r3, #0
 800511a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800511c:	e002      	b.n	8005124 <LoopCopyDataInit>

0800511e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800511e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005122:	3304      	adds	r3, #4

08005124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005128:	d3f9      	bcc.n	800511e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800512a:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800512c:	4c0a      	ldr	r4, [pc, #40]	@ (8005158 <LoopForever+0x16>)
  movs r3, #0
 800512e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005130:	e001      	b.n	8005136 <LoopFillZerobss>

08005132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005134:	3204      	adds	r2, #4

08005136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005138:	d3fb      	bcc.n	8005132 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800513a:	f009 f94b 	bl	800e3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800513e:	f7fe fd9f 	bl	8003c80 <main>

08005142 <LoopForever>:

LoopForever:
    b LoopForever
 8005142:	e7fe      	b.n	8005142 <LoopForever>
  ldr   r0, =_estack
 8005144:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8005148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800514c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005150:	08014bc0 	.word	0x08014bc0
  ldr r2, =_sbss
 8005154:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005158:	2003b3c4 	.word	0x2003b3c4

0800515c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800515c:	e7fe      	b.n	800515c <ADC1_IRQHandler>
	...

08005160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005164:	2003      	movs	r0, #3
 8005166:	f000 f98a 	bl	800547e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800516a:	f001 fc23 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <HAL_Init+0x44>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	490b      	ldr	r1, [pc, #44]	@ (80051a8 <HAL_Init+0x48>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
 8005180:	4a0a      	ldr	r2, [pc, #40]	@ (80051ac <HAL_Init+0x4c>)
 8005182:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005184:	2004      	movs	r0, #4
 8005186:	f000 f9cf 	bl	8005528 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800518a:	200f      	movs	r0, #15
 800518c:	f000 f810 	bl	80051b0 <HAL_InitTick>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e002      	b.n	80051a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800519a:	f7ff fa69 	bl	8004670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	44020c00 	.word	0x44020c00
 80051a8:	080144c8 	.word	0x080144c8
 80051ac:	2000001c 	.word	0x2000001c

080051b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80051bc:	4b33      	ldr	r3, [pc, #204]	@ (800528c <HAL_InitTick+0xdc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e05c      	b.n	8005282 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80051c8:	4b31      	ldr	r3, [pc, #196]	@ (8005290 <HAL_InitTick+0xe0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d10c      	bne.n	80051ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80051d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005294 <HAL_InitTick+0xe4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b2c      	ldr	r3, [pc, #176]	@ (800528c <HAL_InitTick+0xdc>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
 80051de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e037      	b.n	800525e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80051ee:	f000 f9f3 	bl	80055d8 <HAL_SYSTICK_GetCLKSourceConfig>
 80051f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d023      	beq.n	8005242 <HAL_InitTick+0x92>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d82d      	bhi.n	800525c <HAL_InitTick+0xac>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_InitTick+0x5e>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d00d      	beq.n	8005228 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800520c:	e026      	b.n	800525c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800520e:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <HAL_InitTick+0xe4>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <HAL_InitTick+0xdc>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800521c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	60fb      	str	r3, [r7, #12]
        break;
 8005226:	e01a      	b.n	800525e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005228:	4b18      	ldr	r3, [pc, #96]	@ (800528c <HAL_InitTick+0xdc>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005232:	fbb3 f3f2 	udiv	r3, r3, r2
 8005236:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	60fb      	str	r3, [r7, #12]
        break;
 8005240:	e00d      	b.n	800525e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <HAL_InitTick+0xdc>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800524c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005250:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	60fb      	str	r3, [r7, #12]
        break;
 800525a:	e000      	b.n	800525e <HAL_InitTick+0xae>
        break;
 800525c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f940 	bl	80054e4 <HAL_SYSTICK_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e009      	b.n	8005282 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800526e:	2200      	movs	r2, #0
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	f000 f90d 	bl	8005494 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800527a:	4a07      	ldr	r2, [pc, #28]	@ (8005298 <HAL_InitTick+0xe8>)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000024 	.word	0x20000024
 8005290:	e000e010 	.word	0xe000e010
 8005294:	2000001c 	.word	0x2000001c
 8005298:	20000020 	.word	0x20000020

0800529c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_IncTick+0x20>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <HAL_IncTick+0x24>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4413      	add	r3, r2
 80052ac:	4a04      	ldr	r2, [pc, #16]	@ (80052c0 <HAL_IncTick+0x24>)
 80052ae:	6013      	str	r3, [r2, #0]
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000024 	.word	0x20000024
 80052c0:	2003b274 	.word	0x2003b274

080052c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return uwTick;
 80052c8:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <HAL_GetTick+0x14>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	2003b274 	.word	0x2003b274

080052dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052e4:	f7ff ffee 	bl	80052c4 <HAL_GetTick>
 80052e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d005      	beq.n	8005302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <HAL_Delay+0x44>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005302:	bf00      	nop
 8005304:	f7ff ffde 	bl	80052c4 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	429a      	cmp	r2, r3
 8005312:	d8f7      	bhi.n	8005304 <HAL_Delay+0x28>
  {
  }
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000024 	.word	0x20000024

08005324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005334:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <__NVIC_SetPriorityGrouping+0x44>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005340:	4013      	ands	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800534c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005356:	4a04      	ldr	r2, [pc, #16]	@ (8005368 <__NVIC_SetPriorityGrouping+0x44>)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	60d3      	str	r3, [r2, #12]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005370:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__NVIC_GetPriorityGrouping+0x18>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	f003 0307 	and.w	r3, r3, #7
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005396:	2b00      	cmp	r3, #0
 8005398:	db0b      	blt.n	80053b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	f003 021f 	and.w	r2, r3, #31
 80053a0:	4907      	ldr	r1, [pc, #28]	@ (80053c0 <__NVIC_EnableIRQ+0x38>)
 80053a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2001      	movs	r0, #1
 80053aa:	fa00 f202 	lsl.w	r2, r0, r2
 80053ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e100 	.word	0xe000e100

080053c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	db0a      	blt.n	80053ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	490c      	ldr	r1, [pc, #48]	@ (8005410 <__NVIC_SetPriority+0x4c>)
 80053de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053e2:	0112      	lsls	r2, r2, #4
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	440b      	add	r3, r1
 80053e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053ec:	e00a      	b.n	8005404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	4908      	ldr	r1, [pc, #32]	@ (8005414 <__NVIC_SetPriority+0x50>)
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	3b04      	subs	r3, #4
 80053fc:	0112      	lsls	r2, r2, #4
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	440b      	add	r3, r1
 8005402:	761a      	strb	r2, [r3, #24]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000e100 	.word	0xe000e100
 8005414:	e000ed00 	.word	0xe000ed00

08005418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005418:	b480      	push	{r7}
 800541a:	b089      	sub	sp, #36	@ 0x24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f1c3 0307 	rsb	r3, r3, #7
 8005432:	2b04      	cmp	r3, #4
 8005434:	bf28      	it	cs
 8005436:	2304      	movcs	r3, #4
 8005438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3304      	adds	r3, #4
 800543e:	2b06      	cmp	r3, #6
 8005440:	d902      	bls.n	8005448 <NVIC_EncodePriority+0x30>
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3b03      	subs	r3, #3
 8005446:	e000      	b.n	800544a <NVIC_EncodePriority+0x32>
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	401a      	ands	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005460:	f04f 31ff 	mov.w	r1, #4294967295
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	43d9      	mvns	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005470:	4313      	orrs	r3, r2
         );
}
 8005472:	4618      	mov	r0, r3
 8005474:	3724      	adds	r7, #36	@ 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ff4c 	bl	8005324 <__NVIC_SetPriorityGrouping>
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054a2:	f7ff ff63 	bl	800536c <__NVIC_GetPriorityGrouping>
 80054a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6978      	ldr	r0, [r7, #20]
 80054ae:	f7ff ffb3 	bl	8005418 <NVIC_EncodePriority>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ff82 	bl	80053c4 <__NVIC_SetPriority>
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ff56 	bl	8005388 <__NVIC_EnableIRQ>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054f4:	d301      	bcc.n	80054fa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80054f6:	2301      	movs	r3, #1
 80054f8:	e00d      	b.n	8005516 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <HAL_SYSTICK_Config+0x40>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005502:	4b08      	ldr	r3, [pc, #32]	@ (8005524 <HAL_SYSTICK_Config+0x40>)
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005508:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_SYSTICK_Config+0x40>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a05      	ldr	r2, [pc, #20]	@ (8005524 <HAL_SYSTICK_Config+0x40>)
 800550e:	f043 0303 	orr.w	r3, r3, #3
 8005512:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	e000e010 	.word	0xe000e010

08005528 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d844      	bhi.n	80055c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800555f 	.word	0x0800555f
 8005540:	0800557d 	.word	0x0800557d
 8005544:	0800559f 	.word	0x0800559f
 8005548:	080055c1 	.word	0x080055c1
 800554c:	08005551 	.word	0x08005551
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005550:	4b1f      	ldr	r3, [pc, #124]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1e      	ldr	r2, [pc, #120]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	6013      	str	r3, [r2, #0]
      break;
 800555c:	e031      	b.n	80055c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800555e:	4b1c      	ldr	r3, [pc, #112]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005564:	f023 0304 	bic.w	r3, r3, #4
 8005568:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800556a:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800556c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005570:	4a18      	ldr	r2, [pc, #96]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005572:	f023 030c 	bic.w	r3, r3, #12
 8005576:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800557a:	e022      	b.n	80055c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800557c:	4b14      	ldr	r3, [pc, #80]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005582:	f023 0304 	bic.w	r3, r3, #4
 8005586:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005588:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800558a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800558e:	f023 030c 	bic.w	r3, r3, #12
 8005592:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005594:	f043 0304 	orr.w	r3, r3, #4
 8005598:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800559c:	e011      	b.n	80055c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0b      	ldr	r2, [pc, #44]	@ (80055d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80055ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055b0:	f023 030c 	bic.w	r3, r3, #12
 80055b4:	4a07      	ldr	r2, [pc, #28]	@ (80055d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80055b6:	f043 0308 	orr.w	r3, r3, #8
 80055ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80055be:	e000      	b.n	80055c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80055c0:	bf00      	nop
  }
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010
 80055d4:	44020c00 	.word	0x44020c00

080055d8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80055de:	4b17      	ldr	r3, [pc, #92]	@ (800563c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80055ea:	2304      	movs	r3, #4
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	e01e      	b.n	800562e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80055f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d00f      	beq.n	8005622 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d80f      	bhi.n	8005628 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d003      	beq.n	800561c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005614:	e008      	b.n	8005628 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
        break;
 800561a:	e008      	b.n	800562e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800561c:	2301      	movs	r3, #1
 800561e:	607b      	str	r3, [r7, #4]
        break;
 8005620:	e005      	b.n	800562e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005622:	2302      	movs	r3, #2
 8005624:	607b      	str	r3, [r7, #4]
        break;
 8005626:	e002      	b.n	800562e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005628:	2300      	movs	r3, #0
 800562a:	607b      	str	r3, [r7, #4]
        break;
 800562c:	bf00      	nop
    }
  }
  return systick_source;
 800562e:	687b      	ldr	r3, [r7, #4]
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000e010 	.word	0xe000e010
 8005640:	44020c00 	.word	0x44020c00

08005644 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005652:	e136      	b.n	80058c2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2101      	movs	r1, #1
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	fa01 f303 	lsl.w	r3, r1, r3
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8128 	beq.w	80058bc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x38>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b12      	cmp	r3, #18
 800567a:	d125      	bne.n	80056c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	08da      	lsrs	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3208      	adds	r2, #8
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	220f      	movs	r2, #15
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4013      	ands	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	08da      	lsrs	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3208      	adds	r2, #8
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	2203      	movs	r2, #3
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4013      	ands	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0203 	and.w	r2, r3, #3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d00b      	beq.n	800571c <HAL_GPIO_Init+0xd8>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d007      	beq.n	800571c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005710:	2b11      	cmp	r3, #17
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b12      	cmp	r3, #18
 800571a:	d130      	bne.n	800577e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	2203      	movs	r2, #3
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4013      	ands	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005752:	2201      	movs	r2, #1
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4013      	ands	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	f003 0201 	and.w	r2, r3, #1
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d017      	beq.n	80057b6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2203      	movs	r2, #3
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4013      	ands	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d07c      	beq.n	80058bc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80057c2:	4a47      	ldr	r2, [pc, #284]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3318      	adds	r3, #24
 80057ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	220f      	movs	r2, #15
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43db      	mvns	r3, r3
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4013      	ands	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0a9a      	lsrs	r2, r3, #10
 80057ea:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <HAL_GPIO_Init+0x2a0>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	00d2      	lsls	r2, r2, #3
 80057f6:	4093      	lsls	r3, r2
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057fe:	4938      	ldr	r1, [pc, #224]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3318      	adds	r3, #24
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800580c:	4b34      	ldr	r3, [pc, #208]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	43db      	mvns	r3, r3
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4013      	ands	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005830:	4a2b      	ldr	r2, [pc, #172]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005836:	4b2a      	ldr	r3, [pc, #168]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	43db      	mvns	r3, r3
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4013      	ands	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800585a:	4a21      	ldr	r2, [pc, #132]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005860:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005866:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	43db      	mvns	r3, r3
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4013      	ands	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005886:	4a16      	ldr	r2, [pc, #88]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800588e:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	43db      	mvns	r3, r3
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4013      	ands	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80058b4:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <HAL_GPIO_Init+0x29c>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	3301      	adds	r3, #1
 80058c0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f aec1 	bne.w	8005654 <HAL_GPIO_Init+0x10>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	44022000 	.word	0x44022000
 80058e4:	002f7f7f 	.word	0x002f7f7f

080058e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e001      	b.n	800590a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
 8005924:	4613      	mov	r3, r2
 8005926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005928:	787b      	ldrb	r3, [r7, #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005934:	e002      	b.n	800593c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e08d      	b.n	8005a76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe fe86 	bl	8004680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e006      	b.n	80059d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d108      	bne.n	80059ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	e007      	b.n	80059fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d138      	bne.n	8005b06 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e032      	b.n	8005b08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2224      	movs	r2, #36	@ 0x24
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ad0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6819      	ldr	r1, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d139      	bne.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e033      	b.n	8005ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	@ 0x24
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_ICACHE_Enable+0x1c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	@ (8005bc8 <HAL_ICACHE_Enable+0x1c>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40030400 	.word	0x40030400

08005bcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0c3      	b.n	8005d66 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff f884 	bl	8004d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f007 fb15 	bl	800d234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	e03f      	b.n	8005c90 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3315      	adds	r3, #21
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	440b      	add	r3, r1
 8005c32:	3314      	adds	r3, #20
 8005c34:	7bfa      	ldrb	r2, [r7, #15]
 8005c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c38:	7bfa      	ldrb	r2, [r7, #15]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	440b      	add	r3, r1
 8005c46:	3317      	adds	r3, #23
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c4c:	7bfa      	ldrb	r2, [r7, #15]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	440b      	add	r3, r1
 8005c5a:	3324      	adds	r3, #36	@ 0x24
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c60:	7bfa      	ldrb	r2, [r7, #15]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3328      	adds	r3, #40	@ 0x28
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	440b      	add	r3, r1
 8005c84:	3304      	adds	r3, #4
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	791b      	ldrb	r3, [r3, #4]
 8005c94:	7bfa      	ldrb	r2, [r7, #15]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d3ba      	bcc.n	8005c10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e044      	b.n	8005d2a <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	440b      	add	r3, r1
 8005cae:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	440b      	add	r3, r1
 8005cda:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	440b      	add	r3, r1
 8005d06:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	3301      	adds	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3b5      	bcc.n	8005ca0 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7c1a      	ldrb	r2, [r3, #16]
 8005d3c:	f88d 2000 	strb.w	r2, [sp]
 8005d40:	3304      	adds	r3, #4
 8005d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d44:	f007 faae 	bl	800d2a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7b1b      	ldrb	r3, [r3, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f805 	bl	8005d6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f043 0202 	orr.w	r2, r3, #2
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	44020800 	.word	0x44020800

08005dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f000 bc28 	b.w	8006638 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de8:	4b94      	ldr	r3, [pc, #592]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f003 0318 	and.w	r3, r3, #24
 8005df0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005df2:	4b92      	ldr	r3, [pc, #584]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x46>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b18      	cmp	r3, #24
 8005e12:	d114      	bne.n	8005e3e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d111      	bne.n	8005e3e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f000 bc08 	b.w	8006638 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005e28:	4b84      	ldr	r3, [pc, #528]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	4981      	ldr	r1, [pc, #516]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005e3c:	e040      	b.n	8005ec0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d023      	beq.n	8005e8e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e46:	4b7d      	ldr	r3, [pc, #500]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7ff fa37 	bl	80052c4 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005e5a:	f7ff fa33 	bl	80052c4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e3e5      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005e6c:	4b73      	ldr	r3, [pc, #460]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005e78:	4b70      	ldr	r3, [pc, #448]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	496d      	ldr	r1, [pc, #436]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	618b      	str	r3, [r1, #24]
 8005e8c:	e018      	b.n	8005ec0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6a      	ldr	r2, [pc, #424]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7ff fa13 	bl	80052c4 <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005ea2:	f7ff fa0f 	bl	80052c4 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e3c1      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005eb4:	4b61      	ldr	r3, [pc, #388]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80a0 	beq.w	800600e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x10c>
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b18      	cmp	r3, #24
 8005ed8:	d109      	bne.n	8005eee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d106      	bne.n	8005eee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 8092 	bne.w	800600e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e3a4      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef6:	d106      	bne.n	8005f06 <HAL_RCC_OscConfig+0x132>
 8005ef8:	4b50      	ldr	r3, [pc, #320]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a4f      	ldr	r2, [pc, #316]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e058      	b.n	8005fb8 <HAL_RCC_OscConfig+0x1e4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d112      	bne.n	8005f34 <HAL_RCC_OscConfig+0x160>
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4a      	ldr	r2, [pc, #296]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b48      	ldr	r3, [pc, #288]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a47      	ldr	r2, [pc, #284]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b45      	ldr	r3, [pc, #276]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a44      	ldr	r2, [pc, #272]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e041      	b.n	8005fb8 <HAL_RCC_OscConfig+0x1e4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3c:	d112      	bne.n	8005f64 <HAL_RCC_OscConfig+0x190>
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a3e      	ldr	r2, [pc, #248]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b39      	ldr	r3, [pc, #228]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a38      	ldr	r2, [pc, #224]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e029      	b.n	8005fb8 <HAL_RCC_OscConfig+0x1e4>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005f6c:	d112      	bne.n	8005f94 <HAL_RCC_OscConfig+0x1c0>
 8005f6e:	4b33      	ldr	r3, [pc, #204]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a32      	ldr	r2, [pc, #200]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4b30      	ldr	r3, [pc, #192]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4b2d      	ldr	r3, [pc, #180]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e011      	b.n	8005fb8 <HAL_RCC_OscConfig+0x1e4>
 8005f94:	4b29      	ldr	r3, [pc, #164]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a28      	ldr	r2, [pc, #160]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b26      	ldr	r3, [pc, #152]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a25      	ldr	r2, [pc, #148]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b23      	ldr	r3, [pc, #140]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005fb2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d013      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7ff f980 	bl	80052c4 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005fc8:	f7ff f97c 	bl	80052c4 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	@ 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e32e      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fda:	4b18      	ldr	r3, [pc, #96]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x1f4>
 8005fe6:	e012      	b.n	800600e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7ff f96c 	bl	80052c4 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005ff0:	f7ff f968 	bl	80052c4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	@ 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e31a      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006002:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <HAL_RCC_OscConfig+0x268>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 809a 	beq.w	8006150 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_RCC_OscConfig+0x25a>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b18      	cmp	r3, #24
 8006026:	d149      	bne.n	80060bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d146      	bne.n	80060bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e2fe      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
 800603a:	bf00      	nop
 800603c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11c      	bne.n	8006080 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006046:	4b9a      	ldr	r3, [pc, #616]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0218 	and.w	r2, r3, #24
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	429a      	cmp	r2, r3
 8006054:	d014      	beq.n	8006080 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006056:	4b96      	ldr	r3, [pc, #600]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 0218 	bic.w	r2, r3, #24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	4993      	ldr	r1, [pc, #588]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006068:	f000 fdd0 	bl	8006c0c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800606c:	4b91      	ldr	r3, [pc, #580]	@ (80062b4 <HAL_RCC_OscConfig+0x4e0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff f89d 	bl	80051b0 <HAL_InitTick>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e2db      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7ff f920 	bl	80052c4 <HAL_GetTick>
 8006084:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006088:	f7ff f91c 	bl	80052c4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e2ce      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800609a:	4b85      	ldr	r3, [pc, #532]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80060a6:	4b82      	ldr	r3, [pc, #520]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	497e      	ldr	r1, [pc, #504]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80060ba:	e049      	b.n	8006150 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02c      	beq.n	800611e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80060c4:	4b7a      	ldr	r3, [pc, #488]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 0218 	bic.w	r2, r3, #24
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	4977      	ldr	r1, [pc, #476]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80060d6:	4b76      	ldr	r3, [pc, #472]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a75      	ldr	r2, [pc, #468]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7ff f8ef 	bl	80052c4 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80060ea:	f7ff f8eb 	bl	80052c4 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e29d      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fc:	4b6c      	ldr	r3, [pc, #432]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006108:	4b69      	ldr	r3, [pc, #420]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	4966      	ldr	r1, [pc, #408]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
 800611c:	e018      	b.n	8006150 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611e:	4b64      	ldr	r3, [pc, #400]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a63      	ldr	r2, [pc, #396]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612a:	f7ff f8cb 	bl	80052c4 <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006132:	f7ff f8c7 	bl	80052c4 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e279      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006144:	4b5a      	ldr	r3, [pc, #360]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f0      	bne.n	8006132 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03c      	beq.n	80061d6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01c      	beq.n	800619e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006164:	4b52      	ldr	r3, [pc, #328]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616a:	4a51      	ldr	r2, [pc, #324]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800616c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006170:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7ff f8a6 	bl	80052c4 <HAL_GetTick>
 8006178:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800617c:	f7ff f8a2 	bl	80052c4 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e254      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800618e:	4b48      	ldr	r3, [pc, #288]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ef      	beq.n	800617c <HAL_RCC_OscConfig+0x3a8>
 800619c:	e01b      	b.n	80061d6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619e:	4b44      	ldr	r3, [pc, #272]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80061a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061a4:	4a42      	ldr	r2, [pc, #264]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ae:	f7ff f889 	bl	80052c4 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80061b6:	f7ff f885 	bl	80052c4 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e237      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061c8:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80061ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1ef      	bne.n	80061b6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80d2 	beq.w	8006388 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061e4:	4b34      	ldr	r3, [pc, #208]	@ (80062b8 <HAL_RCC_OscConfig+0x4e4>)
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d118      	bne.n	8006222 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80061f0:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <HAL_RCC_OscConfig+0x4e4>)
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <HAL_RCC_OscConfig+0x4e4>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fc:	f7ff f862 	bl	80052c4 <HAL_GetTick>
 8006200:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006204:	f7ff f85e 	bl	80052c4 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e210      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006216:	4b28      	ldr	r3, [pc, #160]	@ (80062b8 <HAL_RCC_OscConfig+0x4e4>)
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <HAL_RCC_OscConfig+0x468>
 800622a:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800622c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006230:	4a1f      	ldr	r2, [pc, #124]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800623a:	e074      	b.n	8006326 <HAL_RCC_OscConfig+0x552>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d118      	bne.n	8006276 <HAL_RCC_OscConfig+0x4a2>
 8006244:	4b1a      	ldr	r3, [pc, #104]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800624a:	4a19      	ldr	r2, [pc, #100]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006254:	4b16      	ldr	r3, [pc, #88]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625a:	4a15      	ldr	r2, [pc, #84]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800625c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006260:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006264:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800626a:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800626c:	f023 0304 	bic.w	r3, r3, #4
 8006270:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006274:	e057      	b.n	8006326 <HAL_RCC_OscConfig+0x552>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b05      	cmp	r3, #5
 800627c:	d11e      	bne.n	80062bc <HAL_RCC_OscConfig+0x4e8>
 800627e:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006284:	4a0a      	ldr	r2, [pc, #40]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006286:	f043 0304 	orr.w	r3, r3, #4
 800628a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800628e:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	4a06      	ldr	r2, [pc, #24]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800629e:	4b04      	ldr	r3, [pc, #16]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80062a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a4:	4a02      	ldr	r2, [pc, #8]	@ (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062ae:	e03a      	b.n	8006326 <HAL_RCC_OscConfig+0x552>
 80062b0:	44020c00 	.word	0x44020c00
 80062b4:	20000020 	.word	0x20000020
 80062b8:	44020800 	.word	0x44020800
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b85      	cmp	r3, #133	@ 0x85
 80062c2:	d118      	bne.n	80062f6 <HAL_RCC_OscConfig+0x522>
 80062c4:	4ba2      	ldr	r3, [pc, #648]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ca:	4aa1      	ldr	r2, [pc, #644]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062da:	4a9d      	ldr	r2, [pc, #628]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ea:	4a99      	ldr	r2, [pc, #612]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062f4:	e017      	b.n	8006326 <HAL_RCC_OscConfig+0x552>
 80062f6:	4b96      	ldr	r3, [pc, #600]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062fc:	4a94      	ldr	r2, [pc, #592]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006306:	4b92      	ldr	r3, [pc, #584]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630c:	4a90      	ldr	r2, [pc, #576]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800630e:	f023 0304 	bic.w	r3, r3, #4
 8006312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006316:	4b8e      	ldr	r3, [pc, #568]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800631c:	4a8c      	ldr	r2, [pc, #560]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800631e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632e:	f7fe ffc9 	bl	80052c4 <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006334:	e00a      	b.n	800634c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fe ffc5 	bl	80052c4 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e175      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634c:	4b80      	ldr	r3, [pc, #512]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800634e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0ed      	beq.n	8006336 <HAL_RCC_OscConfig+0x562>
 800635a:	e015      	b.n	8006388 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fe ffb2 	bl	80052c4 <HAL_GetTick>
 8006360:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006362:	e00a      	b.n	800637a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006364:	f7fe ffae 	bl	80052c4 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006372:	4293      	cmp	r3, r2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e15e      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800637a:	4b75      	ldr	r3, [pc, #468]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800637c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1ed      	bne.n	8006364 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d036      	beq.n	8006402 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d019      	beq.n	80063d0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800639c:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a6b      	ldr	r2, [pc, #428]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80063a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fe ff8c 	bl	80052c4 <HAL_GetTick>
 80063ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80063b0:	f7fe ff88 	bl	80052c4 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e13a      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80063c2:	4b63      	ldr	r3, [pc, #396]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x5dc>
 80063ce:	e018      	b.n	8006402 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80063d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fe ff72 	bl	80052c4 <HAL_GetTick>
 80063e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80063e4:	f7fe ff6e 	bl	80052c4 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e120      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063f6:	4b56      	ldr	r3, [pc, #344]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 8115 	beq.w	8006636 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b18      	cmp	r3, #24
 8006410:	f000 80af 	beq.w	8006572 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	2b02      	cmp	r3, #2
 800641a:	f040 8086 	bne.w	800652a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800641e:	4b4c      	ldr	r3, [pc, #304]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a4b      	ldr	r2, [pc, #300]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fe ff4b 	bl	80052c4 <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006432:	f7fe ff47 	bl	80052c4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e0f9      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006444:	4b42      	ldr	r3, [pc, #264]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f0      	bne.n	8006432 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006450:	4b3f      	ldr	r3, [pc, #252]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006458:	f023 0303 	bic.w	r3, r3, #3
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006464:	0212      	lsls	r2, r2, #8
 8006466:	430a      	orrs	r2, r1
 8006468:	4939      	ldr	r1, [pc, #228]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	628b      	str	r3, [r1, #40]	@ 0x28
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006472:	3b01      	subs	r3, #1
 8006474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	3b01      	subs	r3, #1
 800647e:	025b      	lsls	r3, r3, #9
 8006480:	b29b      	uxth	r3, r3
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	3b01      	subs	r3, #1
 800648a:	041b      	lsls	r3, r3, #16
 800648c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	3b01      	subs	r3, #1
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800649e:	492c      	ldr	r1, [pc, #176]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80064a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a8:	4a29      	ldr	r2, [pc, #164]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b4:	4a26      	ldr	r2, [pc, #152]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80064ba:	4b25      	ldr	r3, [pc, #148]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	4a24      	ldr	r2, [pc, #144]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064c0:	f043 0310 	orr.w	r3, r3, #16
 80064c4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80064c6:	4b22      	ldr	r3, [pc, #136]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	f023 020c 	bic.w	r2, r3, #12
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	491f      	ldr	r1, [pc, #124]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f023 0220 	bic.w	r2, r3, #32
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e4:	491a      	ldr	r1, [pc, #104]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ea:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80064f6:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 80064fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006502:	f7fe fedf 	bl	80052c4 <HAL_GetTick>
 8006506:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800650a:	f7fe fedb 	bl	80052c4 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e08d      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800651c:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x736>
 8006528:	e085      	b.n	8006636 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800652a:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a08      	ldr	r2, [pc, #32]	@ (8006550 <HAL_RCC_OscConfig+0x77c>)
 8006530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006536:	f7fe fec5 	bl	80052c4 <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800653c:	e00a      	b.n	8006554 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800653e:	f7fe fec1 	bl	80052c4 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d903      	bls.n	8006554 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e073      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
 8006550:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006554:	4b3a      	ldr	r3, [pc, #232]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ee      	bne.n	800653e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006560:	4b37      	ldr	r3, [pc, #220]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	4a36      	ldr	r2, [pc, #216]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006566:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	6293      	str	r3, [r2, #40]	@ 0x28
 8006570:	e061      	b.n	8006636 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006572:	4b33      	ldr	r3, [pc, #204]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006578:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 800657a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800657c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	2b01      	cmp	r3, #1
 8006584:	d031      	beq.n	80065ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0203 	and.w	r2, r3, #3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d12a      	bne.n	80065ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d122      	bne.n	80065ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d11a      	bne.n	80065ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	0a5b      	lsrs	r3, r3, #9
 80065b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d111      	bne.n	80065ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d108      	bne.n	80065ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	0e1b      	lsrs	r3, r3, #24
 80065dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d001      	beq.n	80065ee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e024      	b.n	8006638 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065ee:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	08db      	lsrs	r3, r3, #3
 80065f4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d01a      	beq.n	8006636 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006600:	4b0f      	ldr	r3, [pc, #60]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	4a0e      	ldr	r2, [pc, #56]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006606:	f023 0310 	bic.w	r3, r3, #16
 800660a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fe fe5a 	bl	80052c4 <HAL_GetTick>
 8006610:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006612:	bf00      	nop
 8006614:	f7fe fe56 	bl	80052c4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4293      	cmp	r3, r2
 800661e:	d0f9      	beq.n	8006614 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	4a06      	ldr	r2, [pc, #24]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800662a:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	4a04      	ldr	r2, [pc, #16]	@ (8006640 <HAL_RCC_OscConfig+0x86c>)
 8006630:	f043 0310 	orr.w	r3, r3, #16
 8006634:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	44020c00 	.word	0x44020c00

08006644 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e19e      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006658:	4b83      	ldr	r3, [pc, #524]	@ (8006868 <HAL_RCC_ClockConfig+0x224>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d910      	bls.n	8006688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006666:	4b80      	ldr	r3, [pc, #512]	@ (8006868 <HAL_RCC_ClockConfig+0x224>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 020f 	bic.w	r2, r3, #15
 800666e:	497e      	ldr	r1, [pc, #504]	@ (8006868 <HAL_RCC_ClockConfig+0x224>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b7c      	ldr	r3, [pc, #496]	@ (8006868 <HAL_RCC_ClockConfig+0x224>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e186      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d012      	beq.n	80066ba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	4b74      	ldr	r3, [pc, #464]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d909      	bls.n	80066ba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80066a6:	4b71      	ldr	r3, [pc, #452]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	496d      	ldr	r1, [pc, #436]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	4b68      	ldr	r3, [pc, #416]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d909      	bls.n	80066ec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80066d8:	4b64      	ldr	r3, [pc, #400]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	4961      	ldr	r1, [pc, #388]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	4b5b      	ldr	r3, [pc, #364]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006704:	429a      	cmp	r2, r3
 8006706:	d908      	bls.n	800671a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006708:	4b58      	ldr	r3, [pc, #352]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4955      	ldr	r1, [pc, #340]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006716:	4313      	orrs	r3, r2
 8006718:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	4b50      	ldr	r3, [pc, #320]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	429a      	cmp	r2, r3
 8006734:	d908      	bls.n	8006748 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006736:	4b4d      	ldr	r3, [pc, #308]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f023 020f 	bic.w	r2, r3, #15
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	494a      	ldr	r1, [pc, #296]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006744:	4313      	orrs	r3, r2
 8006746:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8093 	beq.w	800687c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800675e:	4b43      	ldr	r3, [pc, #268]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d121      	bne.n	80067ae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e113      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006776:	4b3d      	ldr	r3, [pc, #244]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d115      	bne.n	80067ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e107      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800678e:	4b37      	ldr	r3, [pc, #220]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e0fb      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679e:	4b33      	ldr	r3, [pc, #204]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0f3      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80067ae:	4b2f      	ldr	r3, [pc, #188]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f023 0203 	bic.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	492c      	ldr	r1, [pc, #176]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c0:	f7fe fd80 	bl	80052c4 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d112      	bne.n	80067f4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067ce:	e00a      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067d0:	f7fe fd78 	bl	80052c4 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e0d7      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e6:	4b21      	ldr	r3, [pc, #132]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0318 	and.w	r3, r3, #24
 80067ee:	2b18      	cmp	r3, #24
 80067f0:	d1ee      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x18c>
 80067f2:	e043      	b.n	800687c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d112      	bne.n	8006822 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067fe:	f7fe fd61 	bl	80052c4 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0c0      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006814:	4b15      	ldr	r3, [pc, #84]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f003 0318 	and.w	r3, r3, #24
 800681c:	2b10      	cmp	r3, #16
 800681e:	d1ee      	bne.n	80067fe <HAL_RCC_ClockConfig+0x1ba>
 8006820:	e02c      	b.n	800687c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d122      	bne.n	8006870 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800682a:	e00a      	b.n	8006842 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800682c:	f7fe fd4a 	bl	80052c4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e0a9      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006842:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <HAL_RCC_ClockConfig+0x228>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f003 0318 	and.w	r3, r3, #24
 800684a:	2b08      	cmp	r3, #8
 800684c:	d1ee      	bne.n	800682c <HAL_RCC_ClockConfig+0x1e8>
 800684e:	e015      	b.n	800687c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fe fd38 	bl	80052c4 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d906      	bls.n	8006870 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e097      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
 8006866:	bf00      	nop
 8006868:	40022000 	.word	0x40022000
 800686c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006870:	4b4b      	ldr	r3, [pc, #300]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f003 0318 	and.w	r3, r3, #24
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e9      	bne.n	8006850 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d010      	beq.n	80068aa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	4b44      	ldr	r3, [pc, #272]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	429a      	cmp	r2, r3
 8006896:	d208      	bcs.n	80068aa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006898:	4b41      	ldr	r3, [pc, #260]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f023 020f 	bic.w	r2, r3, #15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	493e      	ldr	r1, [pc, #248]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068aa:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <HAL_RCC_ClockConfig+0x360>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d210      	bcs.n	80068da <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b8:	4b3a      	ldr	r3, [pc, #232]	@ (80069a4 <HAL_RCC_ClockConfig+0x360>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f023 020f 	bic.w	r2, r3, #15
 80068c0:	4938      	ldr	r1, [pc, #224]	@ (80069a4 <HAL_RCC_ClockConfig+0x360>)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <HAL_RCC_ClockConfig+0x360>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d001      	beq.n	80068da <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e05d      	b.n	8006996 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	4b2d      	ldr	r3, [pc, #180]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d208      	bcs.n	8006908 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80068f6:	4b2a      	ldr	r3, [pc, #168]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4927      	ldr	r1, [pc, #156]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	091b      	lsrs	r3, r3, #4
 800691e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006922:	429a      	cmp	r2, r3
 8006924:	d209      	bcs.n	800693a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006926:	4b1e      	ldr	r3, [pc, #120]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	491a      	ldr	r1, [pc, #104]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b00      	cmp	r3, #0
 8006944:	d012      	beq.n	800696c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006954:	429a      	cmp	r2, r3
 8006956:	d209      	bcs.n	800696c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006958:	4b11      	ldr	r3, [pc, #68]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	490e      	ldr	r1, [pc, #56]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800696c:	f000 f822 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8006970:	4602      	mov	r2, r0
 8006972:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x35c>)
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490b      	ldr	r1, [pc, #44]	@ (80069a8 <HAL_RCC_ClockConfig+0x364>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <HAL_RCC_ClockConfig+0x368>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006986:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <HAL_RCC_ClockConfig+0x36c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fc10 	bl	80051b0 <HAL_InitTick>
 8006990:	4603      	mov	r3, r0
 8006992:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006994:	7afb      	ldrb	r3, [r7, #11]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	44020c00 	.word	0x44020c00
 80069a4:	40022000 	.word	0x40022000
 80069a8:	080144c8 	.word	0x080144c8
 80069ac:	2000001c 	.word	0x2000001c
 80069b0:	20000020 	.word	0x20000020

080069b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	@ 0x24
 80069b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80069ba:	4b8c      	ldr	r3, [pc, #560]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0318 	and.w	r3, r3, #24
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d102      	bne.n	80069cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069c6:	4b8a      	ldr	r3, [pc, #552]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e107      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069cc:	4b87      	ldr	r3, [pc, #540]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f003 0318 	and.w	r3, r3, #24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d112      	bne.n	80069fe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80069d8:	4b84      	ldr	r3, [pc, #528]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e4:	4b81      	ldr	r3, [pc, #516]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	4a81      	ldr	r2, [pc, #516]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x240>)
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e0f1      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80069f8:	4b7e      	ldr	r3, [pc, #504]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x240>)
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	e0ee      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069fe:	4b7b      	ldr	r3, [pc, #492]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0318 	and.w	r3, r3, #24
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d102      	bne.n	8006a10 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0x244>)
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	e0e5      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a10:	4b76      	ldr	r3, [pc, #472]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 0318 	and.w	r3, r3, #24
 8006a18:	2b18      	cmp	r3, #24
 8006a1a:	f040 80dd 	bne.w	8006bd8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a1e:	4b73      	ldr	r3, [pc, #460]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a28:	4b70      	ldr	r3, [pc, #448]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a34:	4b6d      	ldr	r3, [pc, #436]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006a40:	4b6a      	ldr	r3, [pc, #424]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	fb02 f303 	mul.w	r3, r2, r3
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a58:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80b7 	beq.w	8006bd2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d003      	beq.n	8006a72 <HAL_RCC_GetSysClockFreq+0xbe>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d056      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0x16a>
 8006a70:	e077      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006a72:	4b5e      	ldr	r3, [pc, #376]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02d      	beq.n	8006ada <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa8:	4b50      	ldr	r3, [pc, #320]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006abc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x248>
 8006ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006ad8:	e065      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	ee07 3a90 	vmov	s15, r3
 8006ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006c00 <HAL_RCC_GetSysClockFreq+0x24c>
 8006ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aec:	4b3f      	ldr	r3, [pc, #252]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006afc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b00:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x248>
 8006b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b18:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006b1c:	e043      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b28:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006c04 <HAL_RCC_GetSysClockFreq+0x250>
 8006b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b30:	4b2e      	ldr	r3, [pc, #184]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b44:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x248>
 8006b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006b60:	e021      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c08 <HAL_RCC_GetSysClockFreq+0x254>
 8006b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b88:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x248>
 8006b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006ba4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006ba6:	4b11      	ldr	r3, [pc, #68]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x238>)
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006baa:	0a5b      	lsrs	r3, r3, #9
 8006bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bbe:	edd7 6a06 	vldr	s13, [r7, #24]
 8006bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bca:	ee17 3a90 	vmov	r3, s15
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e004      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e001      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006bd8:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006bda:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3724      	adds	r7, #36	@ 0x24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	44020c00 	.word	0x44020c00
 8006bf0:	003d0900 	.word	0x003d0900
 8006bf4:	03d09000 	.word	0x03d09000
 8006bf8:	016e3600 	.word	0x016e3600
 8006bfc:	46000000 	.word	0x46000000
 8006c00:	4c742400 	.word	0x4c742400
 8006c04:	4bb71b00 	.word	0x4bb71b00
 8006c08:	4a742400 	.word	0x4a742400

08006c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c10:	f7ff fed0 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8006c14:	4602      	mov	r2, r0
 8006c16:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006c18:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006c1a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c1e:	4907      	ldr	r1, [pc, #28]	@ (8006c3c <HAL_RCC_GetHCLKFreq+0x30>)
 8006c20:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006c22:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006c26:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2a:	4a05      	ldr	r2, [pc, #20]	@ (8006c40 <HAL_RCC_GetHCLKFreq+0x34>)
 8006c2c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <HAL_RCC_GetHCLKFreq+0x34>)
 8006c30:	681b      	ldr	r3, [r3, #0]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	44020c00 	.word	0x44020c00
 8006c3c:	080144c8 	.word	0x080144c8
 8006c40:	2000001c 	.word	0x2000001c

08006c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006c48:	f7ff ffe0 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	4904      	ldr	r1, [pc, #16]	@ (8006c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c5a:	5ccb      	ldrb	r3, [r1, r3]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	44020c00 	.word	0x44020c00
 8006c6c:	080144d8 	.word	0x080144d8

08006c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006c74:	f7ff ffca 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b06      	ldr	r3, [pc, #24]	@ (8006c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4904      	ldr	r1, [pc, #16]	@ (8006c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	44020c00 	.word	0x44020c00
 8006c98:	080144d8 	.word	0x080144d8

08006c9c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006ca0:	f7ff ffb4 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	0b1b      	lsrs	r3, r3, #12
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006cb2:	5ccb      	ldrb	r3, [r1, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	44020c00 	.word	0x44020c00
 8006cc4:	080144d8 	.word	0x080144d8

08006cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ccc:	b0ba      	sub	sp, #232	@ 0xe8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006cec:	2500      	movs	r5, #0
 8006cee:	ea54 0305 	orrs.w	r3, r4, r5
 8006cf2:	d00b      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006cf4:	4bcd      	ldr	r3, [pc, #820]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cfa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d04:	4ac9      	ldr	r2, [pc, #804]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d06:	430b      	orrs	r3, r1
 8006d08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f002 0801 	and.w	r8, r2, #1
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8006d20:	d042      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d823      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d34 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d4d 	.word	0x08006d4d
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d7d 	.word	0x08006d7d
 8006d44:	08006d7d 	.word	0x08006d7d
 8006d48:	08006d7d 	.word	0x08006d7d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d50:	3308      	adds	r3, #8
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 f906 	bl	8009f64 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006d5e:	e00e      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d64:	3330      	adds	r3, #48	@ 0x30
 8006d66:	4618      	mov	r0, r3
 8006d68:	f003 f994 	bl	800a094 <RCCEx_PLL3_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006d72:	e004      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d7a:	e000      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006d86:	4ba9      	ldr	r3, [pc, #676]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d8c:	f023 0107 	bic.w	r1, r3, #7
 8006d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d96:	4aa5      	ldr	r2, [pc, #660]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006da4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f002 0a02 	and.w	sl, r2, #2
 8006db4:	f04f 0b00 	mov.w	fp, #0
 8006db8:	ea5a 030b 	orrs.w	r3, sl, fp
 8006dbc:	f000 8088 	beq.w	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc6:	2b28      	cmp	r3, #40	@ 0x28
 8006dc8:	d868      	bhi.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006dca:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006ea5 	.word	0x08006ea5
 8006dd4:	08006e9d 	.word	0x08006e9d
 8006dd8:	08006e9d 	.word	0x08006e9d
 8006ddc:	08006e9d 	.word	0x08006e9d
 8006de0:	08006e9d 	.word	0x08006e9d
 8006de4:	08006e9d 	.word	0x08006e9d
 8006de8:	08006e9d 	.word	0x08006e9d
 8006dec:	08006e9d 	.word	0x08006e9d
 8006df0:	08006e75 	.word	0x08006e75
 8006df4:	08006e9d 	.word	0x08006e9d
 8006df8:	08006e9d 	.word	0x08006e9d
 8006dfc:	08006e9d 	.word	0x08006e9d
 8006e00:	08006e9d 	.word	0x08006e9d
 8006e04:	08006e9d 	.word	0x08006e9d
 8006e08:	08006e9d 	.word	0x08006e9d
 8006e0c:	08006e9d 	.word	0x08006e9d
 8006e10:	08006e89 	.word	0x08006e89
 8006e14:	08006e9d 	.word	0x08006e9d
 8006e18:	08006e9d 	.word	0x08006e9d
 8006e1c:	08006e9d 	.word	0x08006e9d
 8006e20:	08006e9d 	.word	0x08006e9d
 8006e24:	08006e9d 	.word	0x08006e9d
 8006e28:	08006e9d 	.word	0x08006e9d
 8006e2c:	08006e9d 	.word	0x08006e9d
 8006e30:	08006ea5 	.word	0x08006ea5
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e9d 	.word	0x08006e9d
 8006e3c:	08006e9d 	.word	0x08006e9d
 8006e40:	08006e9d 	.word	0x08006e9d
 8006e44:	08006e9d 	.word	0x08006e9d
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e9d 	.word	0x08006e9d
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e9d 	.word	0x08006e9d
 8006e58:	08006e9d 	.word	0x08006e9d
 8006e5c:	08006e9d 	.word	0x08006e9d
 8006e60:	08006e9d 	.word	0x08006e9d
 8006e64:	08006e9d 	.word	0x08006e9d
 8006e68:	08006e9d 	.word	0x08006e9d
 8006e6c:	08006e9d 	.word	0x08006e9d
 8006e70:	08006ea5 	.word	0x08006ea5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e78:	3308      	adds	r3, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f003 f872 	bl	8009f64 <RCCEx_PLL2_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006e86:	e00e      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e8c:	3330      	adds	r3, #48	@ 0x30
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f003 f900 	bl	800a094 <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006eae:	4b5f      	ldr	r3, [pc, #380]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006eb4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ecc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f002 0304 	and.w	r3, r2, #4
 8006edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ee6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006eea:	460b      	mov	r3, r1
 8006eec:	4313      	orrs	r3, r2
 8006eee:	d04e      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006efa:	d02c      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006efc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006f00:	d825      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f06:	d028      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f0c:	d81f      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f10:	d025      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f14:	d81b      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f16:	2b80      	cmp	r3, #128	@ 0x80
 8006f18:	d00f      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006f1a:	2b80      	cmp	r3, #128	@ 0x80
 8006f1c:	d817      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01f      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d113      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f003 f819 	bl	8009f64 <RCCEx_PLL2_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006f38:	e014      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f3e:	3330      	adds	r3, #48	@ 0x30
 8006f40:	4618      	mov	r0, r3
 8006f42:	f003 f8a7 	bl	800a094 <RCCEx_PLL3_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006f4c:	e00a      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f54:	e006      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f56:	bf00      	nop
 8006f58:	e004      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f72:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f84:	e003      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f8a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f002 0308 	and.w	r3, r2, #8
 8006f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4313      	orrs	r3, r2
 8006fac:	d056      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fb8:	d031      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006fba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fbe:	d82a      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fc4:	d02d      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fca:	d824      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006fd0:	d029      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006fd2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006fd6:	d81e      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fdc:	d011      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe2:	d818      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d023      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fec:	d113      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 ffb5 	bl	8009f64 <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8007000:	e017      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007006:	3330      	adds	r3, #48	@ 0x30
 8007008:	4618      	mov	r0, r3
 800700a:	f003 f843 	bl	800a094 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8007014:	e00d      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800701c:	e009      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800701e:	bf00      	nop
 8007020:	e007      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007022:	bf00      	nop
 8007024:	e005      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007026:	bf00      	nop
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800702a:	bf00      	nop
 800702c:	44020c00 	.word	0x44020c00
        break;
 8007030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007032:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10c      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800703a:	4bb9      	ldr	r3, [pc, #740]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800703c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007040:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800704a:	4ab5      	ldr	r2, [pc, #724]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800704c:	430b      	orrs	r3, r1
 800704e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007052:	e003      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007058:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800705c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f002 0310 	and.w	r3, r2, #16
 8007068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007072:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d053      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800707c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007082:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007086:	d031      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007088:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800708c:	d82a      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800708e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007092:	d02d      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007098:	d824      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800709a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800709e:	d029      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80070a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070a4:	d81e      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070aa:	d011      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b0:	d818      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ba:	d113      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070c0:	3308      	adds	r3, #8
 80070c2:	4618      	mov	r0, r3
 80070c4:	f002 ff4e 	bl	8009f64 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80070ce:	e014      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d4:	3330      	adds	r3, #48	@ 0x30
 80070d6:	4618      	mov	r0, r3
 80070d8:	f002 ffdc 	bl	800a094 <RCCEx_PLL3_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80070e2:	e00a      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80070ea:	e006      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070ec:	bf00      	nop
 80070ee:	e004      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80070f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007102:	4b87      	ldr	r3, [pc, #540]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007108:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800710c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007112:	4a83      	ldr	r2, [pc, #524]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007114:	430b      	orrs	r3, r1
 8007116:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007120:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f002 0320 	and.w	r3, r2, #32
 8007130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800713a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800713e:	460b      	mov	r3, r1
 8007140:	4313      	orrs	r3, r2
 8007142:	d053      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800714e:	d031      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007150:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007154:	d82a      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800715a:	d02d      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800715c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007160:	d824      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007162:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007166:	d029      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007168:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800716c:	d81e      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800716e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007172:	d011      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d818      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d020      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007182:	d113      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007188:	3308      	adds	r3, #8
 800718a:	4618      	mov	r0, r3
 800718c:	f002 feea 	bl	8009f64 <RCCEx_PLL2_Config>
 8007190:	4603      	mov	r3, r0
 8007192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8007196:	e014      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719c:	3330      	adds	r3, #48	@ 0x30
 800719e:	4618      	mov	r0, r3
 80071a0:	f002 ff78 	bl	800a094 <RCCEx_PLL3_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80071aa:	e00a      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071b2:	e006      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10c      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80071ca:	4b55      	ldr	r3, [pc, #340]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071d0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80071d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071da:	4a51      	ldr	r2, [pc, #324]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80071f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007202:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d053      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800720c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007216:	d031      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007218:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800721c:	d82a      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800721e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007222:	d02d      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007228:	d824      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800722a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800722e:	d029      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007230:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007234:	d81e      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800723a:	d011      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800723c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007240:	d818      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d020      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800724a:	d113      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800724c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007250:	3308      	adds	r3, #8
 8007252:	4618      	mov	r0, r3
 8007254:	f002 fe86 	bl	8009f64 <RCCEx_PLL2_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800725e:	e014      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007264:	3330      	adds	r3, #48	@ 0x30
 8007266:	4618      	mov	r0, r3
 8007268:	f002 ff14 	bl	800a094 <RCCEx_PLL3_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007272:	e00a      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800727a:	e006      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800727c:	bf00      	nop
 800727e:	e004      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007280:	bf00      	nop
 8007282:	e002      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007292:	4b23      	ldr	r3, [pc, #140]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007298:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800729c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072c4:	2300      	movs	r3, #0
 80072c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072ca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d03d      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80072d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072de:	d01b      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80072e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072e4:	d814      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80072e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ea:	d017      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x654>
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f0:	d80e      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d016      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fa:	d109      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007300:	3330      	adds	r3, #48	@ 0x30
 8007302:	4618      	mov	r0, r3
 8007304:	f002 fec6 	bl	800a094 <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800730e:	e00a      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007316:	e006      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8007318:	bf00      	nop
 800731a:	e004      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800731c:	bf00      	nop
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8007320:	44020c00 	.word	0x44020c00
        break;
 8007324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007326:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800732e:	4b99      	ldr	r3, [pc, #612]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007330:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007334:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800733c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800733e:	4a95      	ldr	r2, [pc, #596]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007340:	430b      	orrs	r3, r1
 8007342:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007346:	e003      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800734c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800735c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007366:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d03b      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007376:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800737a:	d01b      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800737c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007380:	d814      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8007382:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007386:	d017      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8007388:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800738c:	d80e      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007396:	d109      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800739c:	3330      	adds	r3, #48	@ 0x30
 800739e:	4618      	mov	r0, r3
 80073a0:	f002 fe78 	bl	800a094 <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80073b2:	e004      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80073bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80073c6:	4b73      	ldr	r3, [pc, #460]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073cc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80073d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073d6:	4a6f      	ldr	r2, [pc, #444]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073d8:	430b      	orrs	r3, r1
 80073da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073e4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d03d      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007410:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007414:	d01b      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x786>
 8007416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800741a:	d814      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800741c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007420:	d017      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007426:	d80e      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d014      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800742c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007430:	d109      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007436:	3330      	adds	r3, #48	@ 0x30
 8007438:	4618      	mov	r0, r3
 800743a:	f002 fe2b 	bl	800a094 <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007444:	e008      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800744c:	e004      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800744e:	bf00      	nop
 8007450:	e002      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007452:	bf00      	nop
 8007454:	e000      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007458:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007460:	4b4c      	ldr	r3, [pc, #304]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007466:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800746a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800746e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007472:	4a48      	ldr	r2, [pc, #288]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007474:	430b      	orrs	r3, r1
 8007476:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800747a:	e003      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007480:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800749a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d035      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80074a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b0:	d015      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x816>
 80074b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b6:	d80e      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80074bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c0:	d109      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074c6:	3330      	adds	r3, #48	@ 0x30
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 fde3 	bl	800a094 <RCCEx_PLL3_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80074d4:	e006      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80074dc:	e002      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80074e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10d      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80074ec:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074f2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80074f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fe:	4a25      	ldr	r2, [pc, #148]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007500:	430b      	orrs	r3, r1
 8007502:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800750c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8007510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	2100      	movs	r1, #0
 800751a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800751e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d037      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8007530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800753c:	d015      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800753e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007542:	d80e      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d012      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800754c:	d109      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800754e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007552:	3330      	adds	r3, #48	@ 0x30
 8007554:	4618      	mov	r0, r3
 8007556:	f002 fd9d 	bl	800a094 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007560:	e006      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800756e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007570:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10f      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007578:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800757a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800757e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758a:	4a02      	ldr	r2, [pc, #8]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758c:	430b      	orrs	r3, r1
 800758e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007592:	e005      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8007594:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800759c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	2100      	movs	r1, #0
 80075aa:	67b9      	str	r1, [r7, #120]	@ 0x78
 80075ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80075bc:	4bb8      	ldr	r3, [pc, #736]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4ab7      	ldr	r2, [pc, #732]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075c6:	61d3      	str	r3, [r2, #28]
 80075c8:	4bb5      	ldr	r3, [pc, #724]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075ca:	69d9      	ldr	r1, [r3, #28]
 80075cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80075d4:	4ab2      	ldr	r2, [pc, #712]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80075e8:	2300      	movs	r3, #0
 80075ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80075ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80075f0:	460b      	mov	r3, r1
 80075f2:	4313      	orrs	r3, r2
 80075f4:	d055      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80075f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075fe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007602:	d031      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8007604:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007608:	d82a      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760e:	d02d      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007614:	d824      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761a:	d029      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800761c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007620:	d81e      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007626:	d011      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800762c:	d818      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d020      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8007632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007636:	d113      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800763c:	3308      	adds	r3, #8
 800763e:	4618      	mov	r0, r3
 8007640:	f002 fc90 	bl	8009f64 <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800764a:	e014      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800764c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007650:	3330      	adds	r3, #48	@ 0x30
 8007652:	4618      	mov	r0, r3
 8007654:	f002 fd1e 	bl	800a094 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800765e:	e00a      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007666:	e006      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007668:	bf00      	nop
 800766a:	e004      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007676:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800767e:	4b88      	ldr	r3, [pc, #544]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007680:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007684:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800768c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007690:	4a83      	ldr	r2, [pc, #524]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007692:	430b      	orrs	r3, r1
 8007694:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007698:	e003      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800769e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076b0:	2300      	movs	r3, #0
 80076b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076b8:	460b      	mov	r3, r1
 80076ba:	4313      	orrs	r3, r2
 80076bc:	d055      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076ca:	d031      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80076cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076d0:	d82a      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d6:	d02d      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80076d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076dc:	d824      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076e2:	d029      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80076e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076e8:	d81e      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ee:	d011      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80076f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f4:	d818      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d020      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fe:	d113      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007704:	3308      	adds	r3, #8
 8007706:	4618      	mov	r0, r3
 8007708:	f002 fc2c 	bl	8009f64 <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007712:	e014      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007718:	3330      	adds	r3, #48	@ 0x30
 800771a:	4618      	mov	r0, r3
 800771c:	f002 fcba 	bl	800a094 <RCCEx_PLL3_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007726:	e00a      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800772e:	e006      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007730:	bf00      	nop
 8007732:	e004      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800773c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10d      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007746:	4b56      	ldr	r3, [pc, #344]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007748:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800774c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007758:	4a51      	ldr	r2, [pc, #324]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800775a:	430b      	orrs	r3, r1
 800775c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007760:	e003      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007766:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800776a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007776:	663b      	str	r3, [r7, #96]	@ 0x60
 8007778:	2300      	movs	r3, #0
 800777a:	667b      	str	r3, [r7, #100]	@ 0x64
 800777c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d032      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800778a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800778e:	2b05      	cmp	r3, #5
 8007790:	d80f      	bhi.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d211      	bcs.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d911      	bls.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800779a:	2b02      	cmp	r3, #2
 800779c:	d109      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800779e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a2:	3308      	adds	r3, #8
 80077a4:	4618      	mov	r0, r3
 80077a6:	f002 fbdd 	bl	8009f64 <RCCEx_PLL2_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077b0:	e006      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077b8:	e002      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80077be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10d      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80077c8:	4b35      	ldr	r3, [pc, #212]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80077ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077ce:	f023 0107 	bic.w	r1, r3, #7
 80077d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077da:	4a31      	ldr	r2, [pc, #196]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80077ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	2100      	movs	r1, #0
 80077f6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	d024      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007814:	2b08      	cmp	r3, #8
 8007816:	d005      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800781e:	e002      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007820:	bf00      	nop
 8007822:	e000      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007826:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10d      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800782e:	4b1c      	ldr	r3, [pc, #112]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007834:	f023 0108 	bic.w	r1, r3, #8
 8007838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800783c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007840:	4a17      	ldr	r2, [pc, #92]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007842:	430b      	orrs	r3, r1
 8007844:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007848:	e003      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800784e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800785e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007860:	2300      	movs	r3, #0
 8007862:	657b      	str	r3, [r7, #84]	@ 0x54
 8007864:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007868:	460b      	mov	r3, r1
 800786a:	4313      	orrs	r3, r2
 800786c:	f000 80b9 	beq.w	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007870:	4b0c      	ldr	r3, [pc, #48]	@ (80078a4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	4a0b      	ldr	r2, [pc, #44]	@ (80078a4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800787c:	f7fd fd22 	bl	80052c4 <HAL_GetTick>
 8007880:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007884:	e010      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007886:	f7fd fd1d 	bl	80052c4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d908      	bls.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800789c:	e00a      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800789e:	bf00      	nop
 80078a0:	44020c00 	.word	0x44020c00
 80078a4:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80078a8:	4bba      	ldr	r3, [pc, #744]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80078aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0e8      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80078b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 808e 	bne.w	80079da <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078be:	4bb6      	ldr	r3, [pc, #728]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d023      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80078d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078d8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d01b      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078e4:	4bac      	ldr	r3, [pc, #688]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078f2:	4ba9      	ldr	r3, [pc, #676]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078f8:	4aa7      	ldr	r2, [pc, #668]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007902:	4ba5      	ldr	r3, [pc, #660]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007908:	4aa3      	ldr	r2, [pc, #652]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800790a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800790e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007912:	4aa1      	ldr	r2, [pc, #644]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007918:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d019      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fd fccc 	bl	80052c4 <HAL_GetTick>
 800792c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007930:	e00d      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7fd fcc7 	bl	80052c4 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007942:	429a      	cmp	r2, r3
 8007944:	d903      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800794e:	4b92      	ldr	r3, [pc, #584]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0ea      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 800795c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d135      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007968:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800796c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007974:	d110      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8007976:	4b88      	ldr	r3, [pc, #544]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800797e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007986:	091b      	lsrs	r3, r3, #4
 8007988:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800798c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007990:	4a81      	ldr	r2, [pc, #516]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007992:	430b      	orrs	r3, r1
 8007994:	61d3      	str	r3, [r2, #28]
 8007996:	e005      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007998:	4b7f      	ldr	r3, [pc, #508]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	4a7e      	ldr	r2, [pc, #504]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800799e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079a2:	61d3      	str	r3, [r2, #28]
 80079a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079b4:	4b78      	ldr	r3, [pc, #480]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079b6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80079ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079c6:	4a74      	ldr	r2, [pc, #464]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079ce:	e008      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80079d8:	e003      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079de:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80079ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079f0:	2300      	movs	r3, #0
 80079f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079f8:	460b      	mov	r3, r1
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d035      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80079fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a06:	2b30      	cmp	r3, #48	@ 0x30
 8007a08:	d014      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8007a0a:	2b30      	cmp	r3, #48	@ 0x30
 8007a0c:	d80e      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d012      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d80a      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	d106      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	4a5d      	ldr	r2, [pc, #372]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a28:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a2a:	e008      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a32:	e004      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a34:	bf00      	nop
 8007a36:	e002      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a38:	bf00      	nop
 8007a3a:	e000      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007a46:	4b54      	ldr	r3, [pc, #336]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a58:	4a4f      	ldr	r2, [pc, #316]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a78:	2300      	movs	r3, #0
 8007a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d033      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007a92:	2b40      	cmp	r3, #64	@ 0x40
 8007a94:	d007      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a96:	e010      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4b3f      	ldr	r3, [pc, #252]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007aa4:	e00d      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aaa:	3308      	adds	r3, #8
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 fa59 	bl	8009f64 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10d      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007aca:	4b33      	ldr	r3, [pc, #204]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ad0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007adc:	4a2e      	ldr	r2, [pc, #184]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007ae4:	e003      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007aea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b00:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d04c      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d827      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b31 	.word	0x08007b31
 8007b20:	08007b3f 	.word	0x08007b3f
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b6f 	.word	0x08007b6f
 8007b2c:	08007b6f 	.word	0x08007b6f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b30:	4b19      	ldr	r3, [pc, #100]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b34:	4a18      	ldr	r2, [pc, #96]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b3a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b3c:	e018      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b42:	3308      	adds	r3, #8
 8007b44:	4618      	mov	r0, r3
 8007b46:	f002 fa0d 	bl	8009f64 <RCCEx_PLL2_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b50:	e00e      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b56:	3330      	adds	r3, #48	@ 0x30
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f002 fa9b 	bl	800a094 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d111      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007b78:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b7e:	f023 0107 	bic.w	r1, r3, #7
 8007b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b8a:	4a03      	ldr	r2, [pc, #12]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b92:	e007      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007b94:	44020800 	.word	0x44020800
 8007b98:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ba0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f000 8081 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d85f      	bhi.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007bce:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c8f 	.word	0x08007c8f
 8007bdc:	08007c8f 	.word	0x08007c8f
 8007be0:	08007c8f 	.word	0x08007c8f
 8007be4:	08007c8f 	.word	0x08007c8f
 8007be8:	08007c8f 	.word	0x08007c8f
 8007bec:	08007c8f 	.word	0x08007c8f
 8007bf0:	08007c8f 	.word	0x08007c8f
 8007bf4:	08007c67 	.word	0x08007c67
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c7b 	.word	0x08007c7b
 8007c18:	08007c8f 	.word	0x08007c8f
 8007c1c:	08007c8f 	.word	0x08007c8f
 8007c20:	08007c8f 	.word	0x08007c8f
 8007c24:	08007c8f 	.word	0x08007c8f
 8007c28:	08007c8f 	.word	0x08007c8f
 8007c2c:	08007c8f 	.word	0x08007c8f
 8007c30:	08007c8f 	.word	0x08007c8f
 8007c34:	08007c97 	.word	0x08007c97
 8007c38:	08007c8f 	.word	0x08007c8f
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007c8f 	.word	0x08007c8f
 8007c44:	08007c8f 	.word	0x08007c8f
 8007c48:	08007c8f 	.word	0x08007c8f
 8007c4c:	08007c8f 	.word	0x08007c8f
 8007c50:	08007c8f 	.word	0x08007c8f
 8007c54:	08007c97 	.word	0x08007c97
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4bb9      	ldr	r3, [pc, #740]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5c:	4ab8      	ldr	r2, [pc, #736]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c64:	e018      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f002 f979 	bl	8009f64 <RCCEx_PLL2_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c78:	e00e      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c7e:	3330      	adds	r3, #48	@ 0x30
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 fa07 	bl	800a094 <RCCEx_PLL3_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007c8c:	e004      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c94:	e000      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10d      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ca6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cb2:	4aa3      	ldr	r2, [pc, #652]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cba:	e003      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	d04e      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ce4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cec:	d02e      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf2:	d827      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007cf4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf6:	d02b      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007cf8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cfa:	d823      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007cfc:	2b80      	cmp	r3, #128	@ 0x80
 8007cfe:	d017      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8007d00:	2b80      	cmp	r3, #128	@ 0x80
 8007d02:	d81f      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8007d08:	2b40      	cmp	r3, #64	@ 0x40
 8007d0a:	d007      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8007d0c:	e01a      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0e:	4b8c      	ldr	r3, [pc, #560]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d12:	4a8b      	ldr	r2, [pc, #556]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d18:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e01a      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d20:	3308      	adds	r3, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 f91e 	bl	8009f64 <RCCEx_PLL2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d2e:	e010      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d34:	3330      	adds	r3, #48	@ 0x30
 8007d36:	4618      	mov	r0, r3
 8007d38:	f002 f9ac 	bl	800a094 <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007d42:	e006      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d4a:	e002      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007d4c:	bf00      	nop
 8007d4e:	e000      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10d      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007d5a:	4b79      	ldr	r3, [pc, #484]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d60:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d6c:	4974      	ldr	r1, [pc, #464]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007d74:	e003      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d8a:	623b      	str	r3, [r7, #32]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d055      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007da2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007da6:	d031      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007da8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007dac:	d82a      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db2:	d02d      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db8:	d824      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007dbe:	d029      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007dc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007dc4:	d81e      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dca:	d011      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd0:	d818      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dda:	d113      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007de0:	3308      	adds	r3, #8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f002 f8be 	bl	8009f64 <RCCEx_PLL2_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007dee:	e014      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df4:	3330      	adds	r3, #48	@ 0x30
 8007df6:	4618      	mov	r0, r3
 8007df8:	f002 f94c 	bl	800a094 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007e02:	e00a      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e0a:	e006      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e0c:	bf00      	nop
 8007e0e:	e004      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10d      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007e22:	4b47      	ldr	r3, [pc, #284]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e28:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e34:	4942      	ldr	r1, [pc, #264]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e3c:	e003      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e42:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	61b9      	str	r1, [r7, #24]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	d03c      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d81b      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007eaf 	.word	0x08007eaf
 8007e78:	08007e85 	.word	0x08007e85
 8007e7c:	08007e93 	.word	0x08007e93
 8007e80:	08007eaf 	.word	0x08007eaf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e84:	4b2e      	ldr	r3, [pc, #184]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e88:	4a2d      	ldr	r2, [pc, #180]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e8e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e90:	e00e      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e96:	3308      	adds	r3, #8
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 f863 	bl	8009f64 <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007ea4:	e004      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007eb8:	4b21      	ldr	r3, [pc, #132]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ebe:	f023 0203 	bic.w	r2, r3, #3
 8007ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007eca:	491d      	ldr	r1, [pc, #116]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ed8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6139      	str	r1, [r7, #16]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d03c      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f04:	d00e      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0a:	d815      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d019      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8007f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f14:	d110      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4b0a      	ldr	r3, [pc, #40]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	4a09      	ldr	r2, [pc, #36]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f22:	e010      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f28:	3308      	adds	r3, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f002 f81a 	bl	8009f64 <RCCEx_PLL2_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f36:	e006      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8007f40:	44020c00 	.word	0x44020c00
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10d      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f60:	4938      	ldr	r1, [pc, #224]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007f68:	e003      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f6e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d038      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007f96:	2b30      	cmp	r3, #48	@ 0x30
 8007f98:	d01b      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007f9a:	2b30      	cmp	r3, #48	@ 0x30
 8007f9c:	d815      	bhi.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d002      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d007      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007fa6:	e010      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa8:	4b26      	ldr	r3, [pc, #152]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fac:	4a25      	ldr	r2, [pc, #148]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fb2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007fb4:	e00e      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fba:	3330      	adds	r3, #48	@ 0x30
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f002 f869 	bl	800a094 <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10d      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007fdc:	4b19      	ldr	r3, [pc, #100]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007fde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fe2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007fee:	4915      	ldr	r1, [pc, #84]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ff6:	e003      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ffc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	2100      	movs	r1, #0
 800800a:	6039      	str	r1, [r7, #0]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008016:	460b      	mov	r3, r1
 8008018:	4313      	orrs	r3, r2
 800801a:	d00c      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800801e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800802a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800802e:	4905      	ldr	r1, [pc, #20]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008036:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800803a:	4618      	mov	r0, r3
 800803c:	37e8      	adds	r7, #232	@ 0xe8
 800803e:	46bd      	mov	sp, r7
 8008040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008044:	44020c00 	.word	0x44020c00

08008048 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008048:	b480      	push	{r7}
 800804a:	b08b      	sub	sp, #44	@ 0x2c
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008050:	4bad      	ldr	r3, [pc, #692]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008058:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800805a:	4bab      	ldr	r3, [pc, #684]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008064:	4ba8      	ldr	r3, [pc, #672]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800806e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8008070:	4ba5      	ldr	r3, [pc, #660]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800807a:	4ba3      	ldr	r3, [pc, #652]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	08db      	lsrs	r3, r3, #3
 8008080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8126 	beq.w	80082ea <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d053      	beq.n	800814c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d86f      	bhi.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d003      	beq.n	80080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d02b      	beq.n	800810e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80080b6:	e068      	b.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080b8:	4b93      	ldr	r3, [pc, #588]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	4a92      	ldr	r2, [pc, #584]	@ (800830c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080c4:	fa22 f303 	lsr.w	r3, r2, r3
 80080c8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80080f0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80080f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008108:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800810c:	e068      	b.n	80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008118:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008314 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800811c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a04 	vldr	s12, [r7, #16]
 800812e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800814a:	e049      	b.n	80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008318 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008168:	ed97 6a04 	vldr	s12, [r7, #16]
 800816c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800817c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008184:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008188:	e02a      	b.n	80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800818a:	4b5f      	ldr	r3, [pc, #380]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	08db      	lsrs	r3, r3, #3
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	4a5d      	ldr	r2, [pc, #372]	@ (800830c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008196:	fa22 f303 	lsr.w	r3, r2, r3
 800819a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a04 	vldr	s12, [r7, #16]
 80081c2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80081de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081e0:	4b49      	ldr	r3, [pc, #292]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ec:	d121      	bne.n	8008232 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80081ee:	4b46      	ldr	r3, [pc, #280]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d017      	beq.n	800822a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80081fa:	4b43      	ldr	r3, [pc, #268]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fe:	0a5b      	lsrs	r3, r3, #9
 8008200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800820c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008210:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008214:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800821c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008220:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e006      	b.n	8008238 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e002      	b.n	8008238 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008238:	4b33      	ldr	r3, [pc, #204]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008244:	d121      	bne.n	800828a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008246:	4b30      	ldr	r3, [pc, #192]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d017      	beq.n	8008282 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008252:	4b2d      	ldr	r3, [pc, #180]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008264:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008268:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800826c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008278:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	605a      	str	r2, [r3, #4]
 8008280:	e006      	b.n	8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	605a      	str	r2, [r3, #4]
 8008288:	e002      	b.n	8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008290:	4b1d      	ldr	r3, [pc, #116]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800829c:	d121      	bne.n	80082e2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800829e:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d017      	beq.n	80082da <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082aa:	4b17      	ldr	r3, [pc, #92]	@ (8008308 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	0e1b      	lsrs	r3, r3, #24
 80082b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80082bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80082c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082d8:	e010      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	609a      	str	r2, [r3, #8]
}
 80082e0:	e00c      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	609a      	str	r2, [r3, #8]
}
 80082e8:	e008      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	609a      	str	r2, [r3, #8]
}
 80082fc:	bf00      	nop
 80082fe:	372c      	adds	r7, #44	@ 0x2c
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	44020c00 	.word	0x44020c00
 800830c:	03d09000 	.word	0x03d09000
 8008310:	46000000 	.word	0x46000000
 8008314:	4a742400 	.word	0x4a742400
 8008318:	4bb71b00 	.word	0x4bb71b00

0800831c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800831c:	b480      	push	{r7}
 800831e:	b08b      	sub	sp, #44	@ 0x2c
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008324:	4bad      	ldr	r3, [pc, #692]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800832e:	4bab      	ldr	r3, [pc, #684]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008338:	4ba8      	ldr	r3, [pc, #672]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	0a1b      	lsrs	r3, r3, #8
 800833e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008342:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8008344:	4ba5      	ldr	r3, [pc, #660]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800834e:	4ba3      	ldr	r3, [pc, #652]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8126 	beq.w	80085be <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	2b03      	cmp	r3, #3
 8008376:	d053      	beq.n	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d86f      	bhi.n	800845e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d02b      	beq.n	80083e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800838a:	e068      	b.n	800845e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800838c:	4b93      	ldr	r3, [pc, #588]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	08db      	lsrs	r3, r3, #3
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	4a92      	ldr	r2, [pc, #584]	@ (80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
 800839c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80083c4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80083c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80083e0:	e068      	b.n	80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ec:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80083f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8008402:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800841e:	e049      	b.n	80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008440:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008458:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800845c:	e02a      	b.n	80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800845e:	4b5f      	ldr	r3, [pc, #380]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	4a5d      	ldr	r2, [pc, #372]	@ (80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008492:	ed97 6a04 	vldr	s12, [r7, #16]
 8008496:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800849a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80084b2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b4:	4b49      	ldr	r3, [pc, #292]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c0:	d121      	bne.n	8008506 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80084c2:	4b46      	ldr	r3, [pc, #280]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d017      	beq.n	80084fe <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80084ce:	4b43      	ldr	r3, [pc, #268]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d2:	0a5b      	lsrs	r3, r3, #9
 80084d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80084e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084e4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80084e8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80084ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e006      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e002      	b.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800850c:	4b33      	ldr	r3, [pc, #204]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008518:	d121      	bne.n	800855e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800851a:	4b30      	ldr	r3, [pc, #192]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008526:	4b2d      	ldr	r3, [pc, #180]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800853c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008540:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	e002      	b.n	8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008564:	4b1d      	ldr	r3, [pc, #116]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800856c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008570:	d121      	bne.n	80085b6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008572:	4b1a      	ldr	r3, [pc, #104]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d017      	beq.n	80085ae <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800857e:	4b17      	ldr	r3, [pc, #92]	@ (80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	0e1b      	lsrs	r3, r3, #24
 8008584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008594:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008598:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800859c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085ac:	e010      	b.n	80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	e00c      	b.n	80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	609a      	str	r2, [r3, #8]
}
 80085bc:	e008      	b.n	80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
}
 80085d0:	bf00      	nop
 80085d2:	372c      	adds	r7, #44	@ 0x2c
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	44020c00 	.word	0x44020c00
 80085e0:	03d09000 	.word	0x03d09000
 80085e4:	46000000 	.word	0x46000000
 80085e8:	4a742400 	.word	0x4a742400
 80085ec:	4bb71b00 	.word	0x4bb71b00

080085f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b08b      	sub	sp, #44	@ 0x2c
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80085f8:	4bad      	ldr	r3, [pc, #692]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80085fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008600:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008602:	4bab      	ldr	r3, [pc, #684]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800860c:	4ba8      	ldr	r3, [pc, #672]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008616:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008618:	4ba5      	ldr	r3, [pc, #660]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008622:	4ba3      	ldr	r3, [pc, #652]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8126 	beq.w	8008892 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d053      	beq.n	80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b03      	cmp	r3, #3
 8008650:	d86f      	bhi.n	8008732 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d003      	beq.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d02b      	beq.n	80086b6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800865e:	e068      	b.n	8008732 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008660:	4b93      	ldr	r3, [pc, #588]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	08db      	lsrs	r3, r3, #3
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	4a92      	ldr	r2, [pc, #584]	@ (80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008694:	ed97 6a04 	vldr	s12, [r7, #16]
 8008698:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800869c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80086b4:	e068      	b.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80088bc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80086c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80086d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80086da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80086f2:	e049      	b.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fe:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80088c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008710:	ed97 6a04 	vldr	s12, [r7, #16]
 8008714:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008730:	e02a      	b.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008732:	4b5f      	ldr	r3, [pc, #380]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	08db      	lsrs	r3, r3, #3
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	4a5d      	ldr	r2, [pc, #372]	@ (80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800873e:	fa22 f303 	lsr.w	r3, r2, r3
 8008742:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	ee07 3a90 	vmov	s15, r3
 8008754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a04 	vldr	s12, [r7, #16]
 800876a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008786:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008788:	4b49      	ldr	r3, [pc, #292]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008794:	d121      	bne.n	80087da <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008796:	4b46      	ldr	r3, [pc, #280]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80087a2:	4b43      	ldr	r3, [pc, #268]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	0a5b      	lsrs	r3, r3, #9
 80087a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80087b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80087bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80087c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e006      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e002      	b.n	80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e0:	4b33      	ldr	r3, [pc, #204]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ec:	d121      	bne.n	8008832 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80087ee:	4b30      	ldr	r3, [pc, #192]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80087fa:	4b2d      	ldr	r3, [pc, #180]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80087fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800880c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008810:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008814:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008820:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]
 8008828:	e006      	b.n	8008838 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	e002      	b.n	8008838 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008838:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008844:	d121      	bne.n	800888a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008846:	4b1a      	ldr	r3, [pc, #104]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d017      	beq.n	8008882 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008852:	4b17      	ldr	r3, [pc, #92]	@ (80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008856:	0e1b      	lsrs	r3, r3, #24
 8008858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008868:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800886c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008878:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008880:	e010      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	609a      	str	r2, [r3, #8]
}
 8008888:	e00c      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	609a      	str	r2, [r3, #8]
}
 8008890:	e008      	b.n	80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	609a      	str	r2, [r3, #8]
}
 80088a4:	bf00      	nop
 80088a6:	372c      	adds	r7, #44	@ 0x2c
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	44020c00 	.word	0x44020c00
 80088b4:	03d09000 	.word	0x03d09000
 80088b8:	46000000 	.word	0x46000000
 80088bc:	4a742400 	.word	0x4a742400
 80088c0:	4bb71b00 	.word	0x4bb71b00

080088c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b08f      	sub	sp, #60	@ 0x3c
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80088ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80088d6:	4321      	orrs	r1, r4
 80088d8:	d150      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80088da:	4b26      	ldr	r3, [pc, #152]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80088e6:	4b23      	ldr	r3, [pc, #140]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80088e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d108      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088fa:	d104      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80088fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
 8008902:	f001 bb20 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008906:	4b1b      	ldr	r3, [pc, #108]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800890c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008914:	d108      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800891c:	d104      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800891e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
 8008924:	f001 bb0f 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008928:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008934:	d119      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800893c:	d115      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800893e:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800894a:	d30a      	bcc.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800894c:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008956:	4a08      	ldr	r2, [pc, #32]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800895e:	f001 baf2 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008966:	f001 baee 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
 800896e:	f001 baea 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008972:	bf00      	nop
 8008974:	44020c00 	.word	0x44020c00
 8008978:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800897c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008980:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8008984:	ea50 0104 	orrs.w	r1, r0, r4
 8008988:	f000 8615 	beq.w	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 800898c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008990:	2801      	cmp	r0, #1
 8008992:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8008996:	f081 82d3 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800899a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800899e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80089a2:	ea50 0104 	orrs.w	r1, r0, r4
 80089a6:	f000 84d8 	beq.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80089aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ae:	2801      	cmp	r0, #1
 80089b0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80089b4:	f081 82c4 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089bc:	f1a1 0410 	sub.w	r4, r1, #16
 80089c0:	ea50 0104 	orrs.w	r1, r0, r4
 80089c4:	f001 8288 	beq.w	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80089c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089cc:	2801      	cmp	r0, #1
 80089ce:	f171 0110 	sbcs.w	r1, r1, #16
 80089d2:	f081 82b5 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089da:	f1a1 0408 	sub.w	r4, r1, #8
 80089de:	ea50 0104 	orrs.w	r1, r0, r4
 80089e2:	f001 81fe 	beq.w	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80089e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ea:	2801      	cmp	r0, #1
 80089ec:	f171 0108 	sbcs.w	r1, r1, #8
 80089f0:	f081 82a6 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80089f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089f8:	1f0c      	subs	r4, r1, #4
 80089fa:	ea50 0104 	orrs.w	r1, r0, r4
 80089fe:	f000 8753 	beq.w	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8008a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a06:	2801      	cmp	r0, #1
 8008a08:	f171 0104 	sbcs.w	r1, r1, #4
 8008a0c:	f081 8298 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a14:	1e8c      	subs	r4, r1, #2
 8008a16:	ea50 0104 	orrs.w	r1, r0, r4
 8008a1a:	f001 8173 	beq.w	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8008a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a22:	2801      	cmp	r0, #1
 8008a24:	f171 0102 	sbcs.w	r1, r1, #2
 8008a28:	f081 828a 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a30:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008a34:	4321      	orrs	r1, r4
 8008a36:	f001 80fe 	beq.w	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a3e:	4ccb      	ldr	r4, [pc, #812]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	f171 0100 	sbcs.w	r1, r1, #0
 8008a46:	f081 827b 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4e:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008a52:	4321      	orrs	r1, r4
 8008a54:	f001 8076 	beq.w	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5c:	4cc4      	ldr	r4, [pc, #784]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008a5e:	42a0      	cmp	r0, r4
 8008a60:	f171 0100 	sbcs.w	r1, r1, #0
 8008a64:	f081 826c 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a6c:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008a70:	4321      	orrs	r1, r4
 8008a72:	f000 87b5 	beq.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a7a:	4cbe      	ldr	r4, [pc, #760]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	f171 0100 	sbcs.w	r1, r1, #0
 8008a82:	f081 825d 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a8a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008a8e:	4321      	orrs	r1, r4
 8008a90:	f000 8738 	beq.w	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a98:	4cb7      	ldr	r4, [pc, #732]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008a9a:	42a0      	cmp	r0, r4
 8008a9c:	f171 0100 	sbcs.w	r1, r1, #0
 8008aa0:	f081 824e 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa8:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008aac:	4321      	orrs	r1, r4
 8008aae:	f001 81cd 	beq.w	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8008ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab6:	4cb1      	ldr	r4, [pc, #708]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008ab8:	42a0      	cmp	r0, r4
 8008aba:	f171 0100 	sbcs.w	r1, r1, #0
 8008abe:	f081 823f 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ac6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008aca:	4321      	orrs	r1, r4
 8008acc:	f000 80d9 	beq.w	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad4:	4caa      	ldr	r4, [pc, #680]	@ (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8008ad6:	42a0      	cmp	r0, r4
 8008ad8:	f171 0100 	sbcs.w	r1, r1, #0
 8008adc:	f081 8230 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008ae8:	4321      	orrs	r1, r4
 8008aea:	f000 83da 	beq.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008af2:	4ca4      	ldr	r4, [pc, #656]	@ (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	f171 0100 	sbcs.w	r1, r1, #0
 8008afa:	f081 8221 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b02:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008b06:	4321      	orrs	r1, r4
 8008b08:	f000 8627 	beq.w	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8008b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b10:	4c9d      	ldr	r4, [pc, #628]	@ (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8008b12:	42a0      	cmp	r0, r4
 8008b14:	f171 0100 	sbcs.w	r1, r1, #0
 8008b18:	f081 8212 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b20:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008b24:	4321      	orrs	r1, r4
 8008b26:	f000 857a 	beq.w	800961e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b2e:	4c97      	ldr	r4, [pc, #604]	@ (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	f171 0100 	sbcs.w	r1, r1, #0
 8008b36:	f081 8203 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b3e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008b42:	4321      	orrs	r1, r4
 8008b44:	f000 84fb 	beq.w	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b4c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008b50:	f171 0100 	sbcs.w	r1, r1, #0
 8008b54:	f081 81f4 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b5c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008b60:	4321      	orrs	r1, r4
 8008b62:	f000 84a9 	beq.w	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b6a:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008b6e:	42a0      	cmp	r0, r4
 8008b70:	f171 0100 	sbcs.w	r1, r1, #0
 8008b74:	f081 81e4 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b7c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008b80:	4321      	orrs	r1, r4
 8008b82:	f000 8456 	beq.w	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8008b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b8a:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008b8e:	42a0      	cmp	r0, r4
 8008b90:	f171 0100 	sbcs.w	r1, r1, #0
 8008b94:	f081 81d4 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b9c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008ba0:	4321      	orrs	r1, r4
 8008ba2:	f000 8403 	beq.w	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008baa:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008bae:	42a0      	cmp	r0, r4
 8008bb0:	f171 0100 	sbcs.w	r1, r1, #0
 8008bb4:	f081 81c4 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bbc:	2821      	cmp	r0, #33	@ 0x21
 8008bbe:	f171 0100 	sbcs.w	r1, r1, #0
 8008bc2:	d255      	bcs.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc8:	4301      	orrs	r1, r0
 8008bca:	f001 81b9 	beq.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bd2:	1e42      	subs	r2, r0, #1
 8008bd4:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008bd8:	2a20      	cmp	r2, #32
 8008bda:	f173 0100 	sbcs.w	r1, r3, #0
 8008bde:	f081 81af 	bcs.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008be2:	2a1f      	cmp	r2, #31
 8008be4:	f201 81ac 	bhi.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008be8:	a101      	add	r1, pc, #4	@ (adr r1, 8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8008bea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008cc7 	.word	0x08008cc7
 8008bf4:	08008dc5 	.word	0x08008dc5
 8008bf8:	08009f41 	.word	0x08009f41
 8008bfc:	08008e85 	.word	0x08008e85
 8008c00:	08009f41 	.word	0x08009f41
 8008c04:	08009f41 	.word	0x08009f41
 8008c08:	08009f41 	.word	0x08009f41
 8008c0c:	08008f55 	.word	0x08008f55
 8008c10:	08009f41 	.word	0x08009f41
 8008c14:	08009f41 	.word	0x08009f41
 8008c18:	08009f41 	.word	0x08009f41
 8008c1c:	08009f41 	.word	0x08009f41
 8008c20:	08009f41 	.word	0x08009f41
 8008c24:	08009f41 	.word	0x08009f41
 8008c28:	08009f41 	.word	0x08009f41
 8008c2c:	08009039 	.word	0x08009039
 8008c30:	08009f41 	.word	0x08009f41
 8008c34:	08009f41 	.word	0x08009f41
 8008c38:	08009f41 	.word	0x08009f41
 8008c3c:	08009f41 	.word	0x08009f41
 8008c40:	08009f41 	.word	0x08009f41
 8008c44:	08009f41 	.word	0x08009f41
 8008c48:	08009f41 	.word	0x08009f41
 8008c4c:	08009f41 	.word	0x08009f41
 8008c50:	08009f41 	.word	0x08009f41
 8008c54:	08009f41 	.word	0x08009f41
 8008c58:	08009f41 	.word	0x08009f41
 8008c5c:	08009f41 	.word	0x08009f41
 8008c60:	08009f41 	.word	0x08009f41
 8008c64:	08009f41 	.word	0x08009f41
 8008c68:	08009f41 	.word	0x08009f41
 8008c6c:	0800910f 	.word	0x0800910f
 8008c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c74:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	f000 82b3 	beq.w	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008c7e:	f001 b95f 	b.w	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008c82:	4b43      	ldr	r3, [pc, #268]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c8c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d108      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c94:	f107 0320 	add.w	r3, r7, #32
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f9d5 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ca2:	f001 b950 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	2b40      	cmp	r3, #64	@ 0x40
 8008caa:	d108      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff fb33 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cba:	f001 b944 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc2:	f001 b940 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cc6:	4b32      	ldr	r3, [pc, #200]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d104      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008cd8:	f7fd ffca 	bl	8006c70 <HAL_RCC_GetPCLK2Freq>
 8008cdc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cde:	f001 b932 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cee:	d10a      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d107      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf6:	f107 0314 	add.w	r3, r7, #20
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fb0e 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d04:	e05c      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008d06:	4b22      	ldr	r3, [pc, #136]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d12:	d10a      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d107      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fc66 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d28:	e04a      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d2a:	4b19      	ldr	r3, [pc, #100]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d10c      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d3c:	4b14      	ldr	r3, [pc, #80]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	4a13      	ldr	r2, [pc, #76]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4e:	e037      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008d50:	4b0f      	ldr	r3, [pc, #60]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d5c:	d11e      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d11b      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008d64:	4b0c      	ldr	r3, [pc, #48]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	e02a      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008d6a:	bf00      	nop
 8008d6c:	40000001 	.word	0x40000001
 8008d70:	20000001 	.word	0x20000001
 8008d74:	10000001 	.word	0x10000001
 8008d78:	08000001 	.word	0x08000001
 8008d7c:	04000001 	.word	0x04000001
 8008d80:	00400001 	.word	0x00400001
 8008d84:	00200001 	.word	0x00200001
 8008d88:	00040001 	.word	0x00040001
 8008d8c:	00020001 	.word	0x00020001
 8008d90:	44020c00 	.word	0x44020c00
 8008d94:	03d09000 	.word	0x03d09000
 8008d98:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d9c:	4ba3      	ldr	r3, [pc, #652]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d106      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	d103      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db6:	e003      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dbc:	f001 b8c3 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008dc0:	f001 b8c1 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008dc4:	4b99      	ldr	r3, [pc, #612]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dd6:	f7fd ff35 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8008dda:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ddc:	f001 b8b3 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008de0:	4b92      	ldr	r3, [pc, #584]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dec:	d10a      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d107      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff fa8f 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e02:	e03d      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	2b10      	cmp	r3, #16
 8008e08:	d108      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff fbee 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e18:	f001 b895 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e1c:	4b83      	ldr	r3, [pc, #524]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d10c      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	2b18      	cmp	r3, #24
 8008e2c:	d109      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	08db      	lsrs	r3, r3, #3
 8008e34:	f003 0303 	and.w	r3, r3, #3
 8008e38:	4a7d      	ldr	r2, [pc, #500]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e40:	e01e      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008e42:	4b7a      	ldr	r3, [pc, #488]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4e:	d105      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d102      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8008e56:	4b77      	ldr	r3, [pc, #476]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5a:	e011      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e5c:	4b73      	ldr	r3, [pc, #460]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	2b28      	cmp	r3, #40	@ 0x28
 8008e6e:	d103      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e7c:	f001 b863 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e80:	f001 b861 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008e84:	4b69      	ldr	r3, [pc, #420]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fd fed5 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8008e9a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e9c:	f001 b853 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008ea0:	4b62      	ldr	r3, [pc, #392]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eac:	d10a      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	2b40      	cmp	r3, #64	@ 0x40
 8008eb2:	d107      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fa2f 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec2:	e045      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008ec4:	4b59      	ldr	r3, [pc, #356]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed0:	d10a      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	2b80      	cmp	r3, #128	@ 0x80
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fb87 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee6:	e033      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008ee8:	4b50      	ldr	r3, [pc, #320]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d10c      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ef8:	d109      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008efa:	4b4c      	ldr	r3, [pc, #304]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	08db      	lsrs	r3, r3, #3
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	4a4a      	ldr	r2, [pc, #296]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f0c:	e020      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008f0e:	4b47      	ldr	r3, [pc, #284]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f1a:	d106      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	d102      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8008f24:	4b43      	ldr	r3, [pc, #268]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f28:	e012      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008f2a:	4b40      	ldr	r3, [pc, #256]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d107      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008f3e:	d103      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f46:	e003      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f4c:	f000 bffb 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f50:	f000 bff9 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008f54:	4b35      	ldr	r3, [pc, #212]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f5a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008f5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f66:	f7fd fe6d 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8008f6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f6c:	f000 bfeb 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008f70:	4b2e      	ldr	r3, [pc, #184]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7c:	d10b      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d107      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f86:	f107 0314 	add.w	r3, r7, #20
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff f9c6 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f94:	e047      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008f96:	4b25      	ldr	r3, [pc, #148]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa2:	d10b      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008faa:	d107      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fb1d 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fba:	e034      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d10d      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008fce:	d109      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fd0:	4b16      	ldr	r3, [pc, #88]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	08db      	lsrs	r3, r3, #3
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	4a15      	ldr	r2, [pc, #84]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe2:	e020      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008fe4:	4b11      	ldr	r3, [pc, #68]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff0:	d106      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff8:	d102      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffe:	e012      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009000:	4b0a      	ldr	r3, [pc, #40]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b02      	cmp	r3, #2
 800900c:	d107      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009014:	d103      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901a:	637b      	str	r3, [r7, #52]	@ 0x34
 800901c:	e003      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009022:	f000 bf90 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009026:	f000 bf8e 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800902a:	bf00      	nop
 800902c:	44020c00 	.word	0x44020c00
 8009030:	03d09000 	.word	0x03d09000
 8009034:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009038:	4ba5      	ldr	r3, [pc, #660]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800903a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800903e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009042:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fd fdfb 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 800904e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009050:	f000 bf79 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009054:	4b9e      	ldr	r3, [pc, #632]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009060:	d10b      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009068:	d107      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0314 	add.w	r3, r7, #20
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff f954 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	637b      	str	r3, [r7, #52]	@ 0x34
 8009078:	e047      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800907a:	4b95      	ldr	r3, [pc, #596]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009086:	d10b      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800908e:	d107      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009090:	f107 0308 	add.w	r3, r7, #8
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff faab 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	e034      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80090a0:	4b8b      	ldr	r3, [pc, #556]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d10d      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090b2:	d109      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090b4:	4b86      	ldr	r3, [pc, #536]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a85      	ldr	r2, [pc, #532]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c6:	e020      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80090c8:	4b81      	ldr	r3, [pc, #516]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090dc:	d102      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80090de:	4b7e      	ldr	r3, [pc, #504]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e2:	e012      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80090e4:	4b7a      	ldr	r3, [pc, #488]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80090e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d107      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090f8:	d103      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80090fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009100:	e003      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009106:	f000 bf1e 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800910a:	f000 bf1c 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800910e:	4b70      	ldr	r3, [pc, #448]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009114:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009120:	f7fd fd90 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8009124:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009126:	f000 bf0e 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800912a:	4b69      	ldr	r3, [pc, #420]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009136:	d10b      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800913e:	d107      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009140:	f107 0314 	add.w	r3, r7, #20
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff f8e9 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
 800914e:	e047      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009150:	4b5f      	ldr	r3, [pc, #380]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800915c:	d10b      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009164:	d107      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fa40 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
 8009174:	e034      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009176:	4b56      	ldr	r3, [pc, #344]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b02      	cmp	r3, #2
 8009180:	d10d      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009188:	d109      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800918a:	4b51      	ldr	r3, [pc, #324]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	08db      	lsrs	r3, r3, #3
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	4a4f      	ldr	r2, [pc, #316]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	e020      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800919e:	4b4c      	ldr	r3, [pc, #304]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091aa:	d106      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b2:	d102      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80091b4:	4b48      	ldr	r3, [pc, #288]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b8:	e012      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80091ba:	4b45      	ldr	r3, [pc, #276]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ca:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80091ce:	d103      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80091d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	e003      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091dc:	f000 beb3 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80091e0:	f000 beb1 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80091e4:	4b3a      	ldr	r3, [pc, #232]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091ea:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80091ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091f6:	f7fd fd51 	bl	8006c9c <HAL_RCC_GetPCLK3Freq>
 80091fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80091fc:	f000 bea3 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009206:	d108      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff f885 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009216:	f000 be96 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009220:	d108      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff f9e2 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009230:	f000 be89 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009234:	4b26      	ldr	r3, [pc, #152]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b02      	cmp	r3, #2
 800923e:	d10d      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009246:	d109      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009248:	4b21      	ldr	r3, [pc, #132]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	08db      	lsrs	r3, r3, #3
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	4a20      	ldr	r2, [pc, #128]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009254:	fa22 f303 	lsr.w	r3, r2, r3
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
 800925a:	e020      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800925c:	4b1c      	ldr	r3, [pc, #112]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009268:	d106      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009270:	d102      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8009272:	4b19      	ldr	r3, [pc, #100]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009274:	637b      	str	r3, [r7, #52]	@ 0x34
 8009276:	e012      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009278:	4b15      	ldr	r3, [pc, #84]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800927a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b02      	cmp	r3, #2
 8009284:	d107      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800928c:	d103      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800928e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
 8009294:	e003      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800929a:	f000 be54 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800929e:	f000 be52 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80092a2:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80092a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80092b4:	f7fd fcaa 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 80092b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80092ba:	f000 be44 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d10b      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80092c4:	f7fd fb76 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 80092c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092ca:	f000 be3c 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80092ce:	bf00      	nop
 80092d0:	44020c00 	.word	0x44020c00
 80092d4:	03d09000 	.word	0x03d09000
 80092d8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d108      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e2:	f107 0314 	add.w	r3, r7, #20
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff f818 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092f0:	f000 be29 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80092f4:	4b9f      	ldr	r3, [pc, #636]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009300:	d105      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2b03      	cmp	r3, #3
 8009306:	d102      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8009308:	4b9b      	ldr	r3, [pc, #620]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
 800930c:	e023      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800930e:	4b99      	ldr	r3, [pc, #612]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b02      	cmp	r3, #2
 8009318:	d10c      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	2b04      	cmp	r3, #4
 800931e:	d109      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009320:	4b94      	ldr	r3, [pc, #592]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	08db      	lsrs	r3, r3, #3
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	4a94      	ldr	r2, [pc, #592]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
 8009332:	e010      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009334:	4b8f      	ldr	r3, [pc, #572]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800933c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009340:	d105      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	2b05      	cmp	r3, #5
 8009346:	d102      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8009348:	4b8d      	ldr	r3, [pc, #564]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	e003      	b.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009352:	f000 bdf8 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009356:	f000 bdf6 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800935a:	4b86      	ldr	r3, [pc, #536]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800935c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009366:	4b83      	ldr	r3, [pc, #524]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b02      	cmp	r3, #2
 8009372:	d106      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	2b00      	cmp	r3, #0
 8009378:	d103      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800937a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800937e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009380:	e012      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009382:	4b7c      	ldr	r3, [pc, #496]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800938c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009390:	d106      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2b08      	cmp	r3, #8
 8009396:	d103      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8009398:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
 800939e:	e003      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80093a4:	f000 bdcf 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80093a8:	f000 bdcd 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093ac:	4b71      	ldr	r3, [pc, #452]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093be:	f7fd fc41 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 80093c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80093c4:	f000 bdbf 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ce:	d108      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff f90b 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093de:	f000 bdb2 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093e2:	4b64      	ldr	r3, [pc, #400]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d10d      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f4:	d109      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093f6:	4b5f      	ldr	r3, [pc, #380]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	4a5e      	ldr	r2, [pc, #376]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009402:	fa22 f303 	lsr.w	r3, r2, r3
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
 8009408:	e011      	b.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800940a:	4b5a      	ldr	r3, [pc, #360]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009416:	d106      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800941e:	d102      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8009420:	4b57      	ldr	r3, [pc, #348]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
 8009424:	e003      	b.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800942a:	f000 bd8c 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800942e:	f000 bd8a 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009432:	4b50      	ldr	r3, [pc, #320]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009438:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800943c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009444:	f7fd fbfe 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8009448:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800944a:	f000 bd7c 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009454:	d108      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff f8c8 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009464:	f000 bd6f 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009468:	4b42      	ldr	r3, [pc, #264]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b02      	cmp	r3, #2
 8009472:	d10d      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800947a:	d109      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800947c:	4b3d      	ldr	r3, [pc, #244]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	08db      	lsrs	r3, r3, #3
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	4a3d      	ldr	r2, [pc, #244]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e011      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009490:	4b38      	ldr	r3, [pc, #224]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949c:	d106      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80094a4:	d102      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 80094a6:	4b36      	ldr	r3, [pc, #216]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094aa:	e003      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094b0:	f000 bd49 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094b4:	f000 bd47 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80094b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80094c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80094ca:	f7fd fbe7 	bl	8006c9c <HAL_RCC_GetPCLK3Freq>
 80094ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80094d0:	f000 bd39 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094da:	d108      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff f885 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ea:	f000 bd2c 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80094ee:	4b21      	ldr	r3, [pc, #132]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d10d      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009500:	d109      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009502:	4b1c      	ldr	r3, [pc, #112]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	4a1b      	ldr	r2, [pc, #108]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800950e:	fa22 f303 	lsr.w	r3, r2, r3
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
 8009514:	e011      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009516:	4b17      	ldr	r3, [pc, #92]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800951e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009522:	d106      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800952a:	d102      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 800952c:	4b14      	ldr	r3, [pc, #80]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009530:	e003      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009536:	f000 bd06 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800953a:	f000 bd04 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800953e:	4b0d      	ldr	r3, [pc, #52]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009544:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009548:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009550:	f7fd fb78 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8009554:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009556:	f000 bcf6 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009560:	d110      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff f842 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009570:	f000 bce9 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009574:	44020c00 	.word	0x44020c00
 8009578:	016e3600 	.word	0x016e3600
 800957c:	03d09000 	.word	0x03d09000
 8009580:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009584:	4ba4      	ldr	r3, [pc, #656]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b02      	cmp	r3, #2
 800958e:	d10e      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009596:	d10a      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009598:	4b9f      	ldr	r3, [pc, #636]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	08db      	lsrs	r3, r3, #3
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	4a9e      	ldr	r2, [pc, #632]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095aa:	f000 bccc 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b2:	f000 bcc8 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80095b6:	4b98      	ldr	r3, [pc, #608]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80095b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095bc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80095c0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80095c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095c8:	f7fd fb68 	bl	8006c9c <HAL_RCC_GetPCLK3Freq>
 80095cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80095ce:	f000 bcba 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095d8:	d108      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff f806 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095e8:	f000 bcad 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80095ec:	4b8a      	ldr	r3, [pc, #552]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d10e      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095fe:	d10a      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009600:	4b85      	ldr	r3, [pc, #532]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	08db      	lsrs	r3, r3, #3
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	4a84      	ldr	r2, [pc, #528]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800960c:	fa22 f303 	lsr.w	r3, r2, r3
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009612:	f000 bc98 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800961a:	f000 bc94 	b.w	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800961e:	4b7e      	ldr	r3, [pc, #504]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009620:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009628:	633b      	str	r3, [r7, #48]	@ 0x30
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009630:	d056      	beq.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009638:	f200 808b 	bhi.w	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009642:	d03e      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800964a:	f200 8082 	bhi.w	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009654:	d027      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800965c:	d879      	bhi.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	d017      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800966c:	d871      	bhi.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800967a:	d004      	beq.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 800967c:	e069      	b.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800967e:	f7fd fb0d 	bl	8006c9c <HAL_RCC_GetPCLK3Freq>
 8009682:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009684:	e068      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009686:	f107 0314 	add.w	r3, r7, #20
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fe46 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009694:	e060      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe ffa8 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a4:	e058      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80096a6:	4b5c      	ldr	r3, [pc, #368]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d103      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80096b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096ba:	e04d      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096c0:	e04a      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80096c2:	4b55      	ldr	r3, [pc, #340]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096d0:	d103      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80096d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096d8:	e03e      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096de:	e03b      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d10c      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096fe:	4b46      	ldr	r3, [pc, #280]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	08db      	lsrs	r3, r3, #3
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	4a44      	ldr	r2, [pc, #272]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800970a:	fa22 f303 	lsr.w	r3, r2, r3
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009710:	e01e      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009712:	4b41      	ldr	r3, [pc, #260]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800971a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800971e:	d106      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009728:	4b3d      	ldr	r3, [pc, #244]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
 800972c:	e010      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800972e:	4b3a      	ldr	r3, [pc, #232]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800973a:	d106      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009744:	4b37      	ldr	r3, [pc, #220]	@ (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800974e:	e003      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009756:	bf00      	nop
          }
        }
        break;
 8009758:	e3f5      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800975a:	4b2f      	ldr	r3, [pc, #188]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800975c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009760:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009764:	633b      	str	r3, [r7, #48]	@ 0x30
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800976c:	d05f      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009774:	f200 8094 	bhi.w	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800977e:	d03f      	beq.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009786:	f200 808b 	bhi.w	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009790:	d028      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009798:	f200 8082 	bhi.w	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a2:	d017      	beq.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097aa:	d879      	bhi.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b8:	d004      	beq.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80097ba:	e071      	b.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80097bc:	f7fd fa42 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 80097c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80097c2:	e070      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c4:	f107 0314 	add.w	r3, r7, #20
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fda7 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097d2:	e068      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097d4:	f107 0308 	add.w	r3, r7, #8
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe ff09 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097e2:	e060      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80097e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d103      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80097f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097f8:	e055      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fe:	e052      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009800:	4b05      	ldr	r3, [pc, #20]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009806:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800980a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800980e:	d10b      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8009810:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009814:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009816:	e046      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009818:	44020c00 	.word	0x44020c00
 800981c:	03d09000 	.word	0x03d09000
 8009820:	003d0900 	.word	0x003d0900
 8009824:	016e3600 	.word	0x016e3600
              frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800982c:	e03b      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800982e:	4bae      	ldr	r3, [pc, #696]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009834:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009838:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800983a:	4bab      	ldr	r3, [pc, #684]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b02      	cmp	r3, #2
 8009844:	d10c      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8009846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800984c:	4ba6      	ldr	r3, [pc, #664]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	08db      	lsrs	r3, r3, #3
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	4aa5      	ldr	r2, [pc, #660]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
 800985e:	e01e      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009860:	4ba1      	ldr	r3, [pc, #644]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800986c:	d106      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009874:	d102      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009876:	4b9e      	ldr	r3, [pc, #632]	@ (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009878:	637b      	str	r3, [r7, #52]	@ 0x34
 800987a:	e010      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800987c:	4b9a      	ldr	r3, [pc, #616]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009888:	d106      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009890:	d102      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009892:	4b98      	ldr	r3, [pc, #608]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
 8009896:	e002      	b.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800989e:	e002      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098a4:	bf00      	nop
          }
        }
        break;
 80098a6:	e34e      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098a8:	4b8f      	ldr	r3, [pc, #572]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80098aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80098b4:	4b8c      	ldr	r3, [pc, #560]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c0:	d105      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80098c8:	4b8a      	ldr	r3, [pc, #552]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80098cc:	e33b      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098d4:	d107      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d6:	f107 0320 	add.w	r3, r7, #32
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fbb4 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098e4:	e32f      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ee:	f107 0314 	add.w	r3, r7, #20
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fd12 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098fc:	e323      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009902:	e320      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009904:	4b78      	ldr	r3, [pc, #480]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	2b04      	cmp	r3, #4
 8009914:	d860      	bhi.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8009916:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009931 	.word	0x08009931
 8009920:	08009941 	.word	0x08009941
 8009924:	08009951 	.word	0x08009951
 8009928:	08009961 	.word	0x08009961
 800992c:	08009967 	.word	0x08009967
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009930:	f107 0320 	add.w	r3, r7, #32
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fb87 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800993e:	e04e      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fce9 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800994e:	e046      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009950:	f107 0308 	add.w	r3, r7, #8
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fe4b 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800995e:	e03e      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009960:	4b65      	ldr	r3, [pc, #404]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009964:	e03b      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009966:	4b60      	ldr	r3, [pc, #384]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800996c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009970:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009972:	4b5d      	ldr	r3, [pc, #372]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b02      	cmp	r3, #2
 800997c:	d10c      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800997e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009984:	4b58      	ldr	r3, [pc, #352]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	08db      	lsrs	r3, r3, #3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	4a57      	ldr	r2, [pc, #348]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
 8009994:	637b      	str	r3, [r7, #52]	@ 0x34
 8009996:	e01e      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009998:	4b53      	ldr	r3, [pc, #332]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a4:	d106      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ac:	d102      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099ae:	4b50      	ldr	r3, [pc, #320]	@ (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b2:	e010      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099b4:	4b4c      	ldr	r3, [pc, #304]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099c0:	d106      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80099c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c8:	d102      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099ca:	4b4a      	ldr	r3, [pc, #296]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ce:	e002      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099d4:	e003      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80099d6:	e002      	b.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099dc:	bf00      	nop
          }
        }
        break;
 80099de:	e2b2      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80099e0:	4b41      	ldr	r3, [pc, #260]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80099e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	f200 80a4 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a81 	.word	0x08009a81
 8009a00:	08009b3d 	.word	0x08009b3d
 8009a04:	08009b3d 	.word	0x08009b3d
 8009a08:	08009b3d 	.word	0x08009b3d
 8009a0c:	08009b3d 	.word	0x08009b3d
 8009a10:	08009b3d 	.word	0x08009b3d
 8009a14:	08009b3d 	.word	0x08009b3d
 8009a18:	08009b3d 	.word	0x08009b3d
 8009a1c:	08009a91 	.word	0x08009a91
 8009a20:	08009b3d 	.word	0x08009b3d
 8009a24:	08009b3d 	.word	0x08009b3d
 8009a28:	08009b3d 	.word	0x08009b3d
 8009a2c:	08009b3d 	.word	0x08009b3d
 8009a30:	08009b3d 	.word	0x08009b3d
 8009a34:	08009b3d 	.word	0x08009b3d
 8009a38:	08009b3d 	.word	0x08009b3d
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009b3d 	.word	0x08009b3d
 8009a44:	08009b3d 	.word	0x08009b3d
 8009a48:	08009b3d 	.word	0x08009b3d
 8009a4c:	08009b3d 	.word	0x08009b3d
 8009a50:	08009b3d 	.word	0x08009b3d
 8009a54:	08009b3d 	.word	0x08009b3d
 8009a58:	08009b3d 	.word	0x08009b3d
 8009a5c:	08009ab1 	.word	0x08009ab1
 8009a60:	08009b3d 	.word	0x08009b3d
 8009a64:	08009b3d 	.word	0x08009b3d
 8009a68:	08009b3d 	.word	0x08009b3d
 8009a6c:	08009b3d 	.word	0x08009b3d
 8009a70:	08009b3d 	.word	0x08009b3d
 8009a74:	08009b3d 	.word	0x08009b3d
 8009a78:	08009b3d 	.word	0x08009b3d
 8009a7c:	08009ab7 	.word	0x08009ab7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a80:	f107 0320 	add.w	r3, r7, #32
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fadf 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a8e:	e058      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a90:	f107 0314 	add.w	r3, r7, #20
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fc41 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a9e:	e050      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe fda3 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aae:	e048      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ab0:	4b11      	ldr	r3, [pc, #68]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ab4:	e045      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009abc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ac2:	4b09      	ldr	r3, [pc, #36]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d116      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8009ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d113      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	08db      	lsrs	r3, r3, #3
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	4a03      	ldr	r2, [pc, #12]	@ (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae6:	e028      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009ae8:	44020c00 	.word	0x44020c00
 8009aec:	03d09000 	.word	0x03d09000
 8009af0:	003d0900 	.word	0x003d0900
 8009af4:	016e3600 	.word	0x016e3600
 8009af8:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009afc:	4b95      	ldr	r3, [pc, #596]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b08:	d106      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8009b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b10:	d102      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b12:	4b91      	ldr	r3, [pc, #580]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b16:	e010      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b18:	4b8e      	ldr	r3, [pc, #568]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b24:	d106      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b2c:	d102      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b32:	e002      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b38:	e003      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009b3a:	e002      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b40:	bf00      	nop
          }
        }
        break;
 8009b42:	e200      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009b44:	4b83      	ldr	r3, [pc, #524]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b56:	d031      	beq.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b5e:	d866      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b64:	d027      	beq.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b6a:	d860      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6e:	2b80      	cmp	r3, #128	@ 0x80
 8009b70:	d019      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	2b80      	cmp	r3, #128	@ 0x80
 8009b76:	d85a      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b40      	cmp	r3, #64	@ 0x40
 8009b82:	d008      	beq.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009b84:	e053      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b86:	f107 0320 	add.w	r3, r7, #32
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fa5c 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b94:	e04e      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fbbe 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ba4:	e046      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fd20 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bb4:	e03e      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8009bb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bba:	e03b      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bbc:	4b65      	ldr	r3, [pc, #404]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bc2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bc8:	4b62      	ldr	r3, [pc, #392]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d10c      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bda:	4b5e      	ldr	r3, [pc, #376]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	4a5f      	ldr	r2, [pc, #380]	@ (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bec:	e01e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bee:	4b59      	ldr	r3, [pc, #356]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfa:	d106      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8009bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c02:	d102      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c04:	4b54      	ldr	r3, [pc, #336]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c08:	e010      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c0a:	4b52      	ldr	r3, [pc, #328]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c16:	d106      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c1e:	d102      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c20:	4b4e      	ldr	r3, [pc, #312]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c2a:	e003      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8009c2c:	e002      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c32:	bf00      	nop
          }
        }
        break;
 8009c34:	e187      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009c36:	4b47      	ldr	r3, [pc, #284]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c3c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009c40:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009c48:	f7fd f812 	bl	8006c70 <HAL_RCC_GetPCLK2Freq>
 8009c4c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009c4e:	e17a      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009c50:	4b40      	ldr	r3, [pc, #256]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c5c:	d10b      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c64:	d107      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fb56 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c74:	e045      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009c76:	4b37      	ldr	r3, [pc, #220]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c82:	d10b      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c8a:	d107      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fcad 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9a:	e032      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d10d      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009caa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009cae:	d109      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cb0:	4b28      	ldr	r3, [pc, #160]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	08db      	lsrs	r3, r3, #3
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	4a2a      	ldr	r2, [pc, #168]	@ (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc2:	e01e      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009cc4:	4b23      	ldr	r3, [pc, #140]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd0:	d106      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd8:	d102      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8009cda:	4b1f      	ldr	r3, [pc, #124]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cde:	e010      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cec:	d106      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009cf4:	d102      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8009cf6:	4b19      	ldr	r3, [pc, #100]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	e002      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d00:	e121      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009d02:	e120      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009d04:	4b13      	ldr	r3, [pc, #76]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d861      	bhi.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009d16:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d35 	.word	0x08009d35
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d69 	.word	0x08009d69

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009d2c:	f7fc ff6e 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8009d30:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009d32:	e055      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d34:	f107 0320 	add.w	r3, r7, #32
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe f985 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d42:	e04d      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d44:	f107 0314 	add.w	r3, r7, #20
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fae7 	bl	800831c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d52:	e045      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009d54:	44020c00 	.word	0x44020c00
 8009d58:	003d0900 	.word	0x003d0900
 8009d5c:	016e3600 	.word	0x016e3600
 8009d60:	00bb8000 	.word	0x00bb8000
 8009d64:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d68:	4b79      	ldr	r3, [pc, #484]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d74:	4b76      	ldr	r3, [pc, #472]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d10c      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d86:	4b72      	ldr	r3, [pc, #456]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	4a70      	ldr	r2, [pc, #448]	@ (8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d98:	e01e      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da6:	d106      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dae:	d102      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009db0:	4b69      	ldr	r3, [pc, #420]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8009db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db4:	e010      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009db6:	4b66      	ldr	r3, [pc, #408]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dca:	d102      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dcc:	4b63      	ldr	r3, [pc, #396]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dd6:	e003      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009dd8:	e002      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dde:	bf00      	nop
          }
        }
        break;
 8009de0:	e0b1      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009de2:	4b5b      	ldr	r3, [pc, #364]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009de8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dec:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009dee:	4b58      	ldr	r3, [pc, #352]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d106      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8009e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e08:	e01f      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009e0a:	4b51      	ldr	r3, [pc, #324]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e18:	d106      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	2b40      	cmp	r3, #64	@ 0x40
 8009e1e:	d103      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8009e20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e26:	e010      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009e28:	4b49      	ldr	r3, [pc, #292]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e34:	d106      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	2b80      	cmp	r3, #128	@ 0x80
 8009e3a:	d103      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009e3c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e42:	e002      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009e48:	e07d      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009e4a:	e07c      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009e4c:	4b40      	ldr	r3, [pc, #256]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e56:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009e58:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e64:	d105      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d102      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e031      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009e72:	4b37      	ldr	r3, [pc, #220]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e7e:	d10a      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d107      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e86:	f107 0320 	add.w	r3, r7, #32
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe f8dc 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e94:	e01f      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009e96:	4b2e      	ldr	r3, [pc, #184]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d106      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d103      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb0:	e011      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009eb2:	4b27      	ldr	r3, [pc, #156]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ec0:	d106      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	2b30      	cmp	r3, #48	@ 0x30
 8009ec6:	d103      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009ec8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ece:	e002      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009ed4:	e037      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009ed6:	e036      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ede:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ee2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	2b10      	cmp	r3, #16
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eea:	f107 0320 	add.w	r3, r7, #32
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe f8aa 	bl	8008048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009ef8:	e025      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009efa:	4b15      	ldr	r3, [pc, #84]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f06:	d10a      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fb6c 	bl	80085f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f1c:	e00f      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f2a:	d105      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	2b30      	cmp	r3, #48	@ 0x30
 8009f30:	d102      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8009f32:	4b0b      	ldr	r3, [pc, #44]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f36:	e002      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009f3e:	e002      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f44:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8009f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	373c      	adds	r7, #60	@ 0x3c
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd90      	pop	{r4, r7, pc}
 8009f50:	44020c00 	.word	0x44020c00
 8009f54:	03d09000 	.word	0x03d09000
 8009f58:	003d0900 	.word	0x003d0900
 8009f5c:	016e3600 	.word	0x016e3600
 8009f60:	02dc6c00 	.word	0x02dc6c00

08009f64 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009f6c:	4b48      	ldr	r3, [pc, #288]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a47      	ldr	r2, [pc, #284]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f78:	f7fb f9a4 	bl	80052c4 <HAL_GetTick>
 8009f7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f7e:	e008      	b.n	8009f92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f80:	f7fb f9a0 	bl	80052c4 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e07a      	b.n	800a088 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f92:	4b3f      	ldr	r3, [pc, #252]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1f0      	bne.n	8009f80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009f9e:	4b3c      	ldr	r3, [pc, #240]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fa6:	f023 0303 	bic.w	r3, r3, #3
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	6811      	ldr	r1, [r2, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6852      	ldr	r2, [r2, #4]
 8009fb2:	0212      	lsls	r2, r2, #8
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	4936      	ldr	r1, [pc, #216]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	025b      	lsls	r3, r3, #9
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	061b      	lsls	r3, r3, #24
 8009fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009fec:	4928      	ldr	r1, [pc, #160]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009ff2:	4b27      	ldr	r3, [pc, #156]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff6:	f023 020c 	bic.w	r2, r3, #12
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	4924      	ldr	r1, [pc, #144]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a000:	4313      	orrs	r3, r2
 800a002:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a004:	4b22      	ldr	r3, [pc, #136]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a008:	f023 0220 	bic.w	r2, r3, #32
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	491f      	ldr	r1, [pc, #124]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a012:	4313      	orrs	r3, r2
 800a014:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a016:	4b1e      	ldr	r3, [pc, #120]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01e:	491c      	ldr	r1, [pc, #112]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a020:	4313      	orrs	r3, r2
 800a022:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a024:	4b1a      	ldr	r3, [pc, #104]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	4a19      	ldr	r2, [pc, #100]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a02a:	f023 0310 	bic.w	r3, r3, #16
 800a02e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a030:	4b17      	ldr	r3, [pc, #92]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a038:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	6a12      	ldr	r2, [r2, #32]
 800a040:	00d2      	lsls	r2, r2, #3
 800a042:	4913      	ldr	r1, [pc, #76]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a044:	4313      	orrs	r3, r2
 800a046:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a048:	4b11      	ldr	r3, [pc, #68]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04c:	4a10      	ldr	r2, [pc, #64]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a04e:	f043 0310 	orr.w	r3, r3, #16
 800a052:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a054:	4b0e      	ldr	r3, [pc, #56]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a0d      	ldr	r2, [pc, #52]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a05a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a05e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a060:	f7fb f930 	bl	80052c4 <HAL_GetTick>
 800a064:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a066:	e008      	b.n	800a07a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a068:	f7fb f92c 	bl	80052c4 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d901      	bls.n	800a07a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e006      	b.n	800a088 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a07a:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <RCCEx_PLL2_Config+0x12c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0f0      	beq.n	800a068 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a086:	2300      	movs	r3, #0

}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	44020c00 	.word	0x44020c00

0800a094 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a09c:	4b48      	ldr	r3, [pc, #288]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a47      	ldr	r2, [pc, #284]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a0a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0a8:	f7fb f90c 	bl	80052c4 <HAL_GetTick>
 800a0ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0ae:	e008      	b.n	800a0c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0b0:	f7fb f908 	bl	80052c4 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e07a      	b.n	800a1b8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f0      	bne.n	800a0b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a0ce:	4b3c      	ldr	r3, [pc, #240]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6811      	ldr	r1, [r2, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6852      	ldr	r2, [r2, #4]
 800a0e2:	0212      	lsls	r2, r2, #8
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	4936      	ldr	r1, [pc, #216]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	630b      	str	r3, [r1, #48]	@ 0x30
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	025b      	lsls	r3, r3, #9
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	3b01      	subs	r3, #1
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	3b01      	subs	r3, #1
 800a116:	061b      	lsls	r3, r3, #24
 800a118:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a11c:	4928      	ldr	r1, [pc, #160]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a122:	4b27      	ldr	r3, [pc, #156]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a126:	f023 020c 	bic.w	r2, r3, #12
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	4924      	ldr	r1, [pc, #144]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a130:	4313      	orrs	r3, r2
 800a132:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a134:	4b22      	ldr	r3, [pc, #136]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a138:	f023 0220 	bic.w	r2, r3, #32
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	491f      	ldr	r1, [pc, #124]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a146:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14e:	491c      	ldr	r1, [pc, #112]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a150:	4313      	orrs	r3, r2
 800a152:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a154:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a158:	4a19      	ldr	r2, [pc, #100]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a15a:	f023 0310 	bic.w	r3, r3, #16
 800a15e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a160:	4b17      	ldr	r3, [pc, #92]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a164:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a168:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	6a12      	ldr	r2, [r2, #32]
 800a170:	00d2      	lsls	r2, r2, #3
 800a172:	4913      	ldr	r1, [pc, #76]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a174:	4313      	orrs	r3, r2
 800a176:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a178:	4b11      	ldr	r3, [pc, #68]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17c:	4a10      	ldr	r2, [pc, #64]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a17e:	f043 0310 	orr.w	r3, r3, #16
 800a182:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a184:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a0d      	ldr	r2, [pc, #52]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a18a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a190:	f7fb f898 	bl	80052c4 <HAL_GetTick>
 800a194:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a196:	e008      	b.n	800a1aa <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a198:	f7fb f894 	bl	80052c4 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d901      	bls.n	800a1aa <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e006      	b.n	800a1b8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1aa:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <RCCEx_PLL3_Config+0x12c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0f0      	beq.n	800a198 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	44020c00 	.word	0x44020c00

0800a1c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e10d      	b.n	800a3f2 <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a88      	ldr	r2, [pc, #544]	@ (800a3fc <HAL_SPI_Init+0x238>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d004      	beq.n	800a1ea <HAL_SPI_Init+0x26>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a86      	ldr	r2, [pc, #536]	@ (800a400 <HAL_SPI_Init+0x23c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	e000      	b.n	800a1ec <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a1ea:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a81      	ldr	r2, [pc, #516]	@ (800a3fc <HAL_SPI_Init+0x238>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <HAL_SPI_Init+0x42>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a7f      	ldr	r2, [pc, #508]	@ (800a400 <HAL_SPI_Init+0x23c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d105      	bne.n	800a212 <HAL_SPI_Init+0x4e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	2b0f      	cmp	r3, #15
 800a20c:	d901      	bls.n	800a212 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e0ef      	b.n	800a3f2 <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fc3a 	bl	800aa8c <SPI_GetPacketSize>
 800a218:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a77      	ldr	r2, [pc, #476]	@ (800a3fc <HAL_SPI_Init+0x238>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_SPI_Init+0x6a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a75      	ldr	r2, [pc, #468]	@ (800a400 <HAL_SPI_Init+0x23c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d102      	bne.n	800a234 <HAL_SPI_Init+0x70>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d820      	bhi.n	800a276 <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a238:	4a72      	ldr	r2, [pc, #456]	@ (800a404 <HAL_SPI_Init+0x240>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d018      	beq.n	800a270 <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a71      	ldr	r2, [pc, #452]	@ (800a408 <HAL_SPI_Init+0x244>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d013      	beq.n	800a270 <HAL_SPI_Init+0xac>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a6f      	ldr	r2, [pc, #444]	@ (800a40c <HAL_SPI_Init+0x248>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d00e      	beq.n	800a270 <HAL_SPI_Init+0xac>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a6e      	ldr	r2, [pc, #440]	@ (800a410 <HAL_SPI_Init+0x24c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d009      	beq.n	800a270 <HAL_SPI_Init+0xac>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a6c      	ldr	r2, [pc, #432]	@ (800a414 <HAL_SPI_Init+0x250>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d004      	beq.n	800a270 <HAL_SPI_Init+0xac>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a6b      	ldr	r2, [pc, #428]	@ (800a418 <HAL_SPI_Init+0x254>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d104      	bne.n	800a27a <HAL_SPI_Init+0xb6>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b10      	cmp	r3, #16
 800a274:	d901      	bls.n	800a27a <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e0bb      	b.n	800a3f2 <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fa fa5e 	bl	8004750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0201 	bic.w	r2, r2, #1
 800a2aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a2b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2c0:	d119      	bne.n	800a2f6 <HAL_SPI_Init+0x132>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2ca:	d103      	bne.n	800a2d4 <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d008      	beq.n	800a2e6 <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10c      	bne.n	800a2f6 <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	d107      	bne.n	800a2f6 <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00f      	beq.n	800a322 <HAL_SPI_Init+0x15e>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	2b06      	cmp	r3, #6
 800a308:	d90b      	bls.n	800a322 <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	430a      	orrs	r2, r1
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e007      	b.n	800a332 <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69da      	ldr	r2, [r3, #28]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33a:	431a      	orrs	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a344:	ea42 0103 	orr.w	r1, r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	431a      	orrs	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a39e:	ea42 0103 	orr.w	r1, r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	40014c00 	.word	0x40014c00
 800a400:	50014c00 	.word	0x50014c00
 800a404:	40013000 	.word	0x40013000
 800a408:	50013000 	.word	0x50013000
 800a40c:	40003800 	.word	0x40003800
 800a410:	50003800 	.word	0x50003800
 800a414:	40003c00 	.word	0x40003c00
 800a418:	50003c00 	.word	0x50003c00

0800a41c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08c      	sub	sp, #48	@ 0x30
 800a420:	af02      	add	r7, sp, #8
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3320      	adds	r3, #32
 800a430:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3330      	adds	r3, #48	@ 0x30
 800a438:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a43a:	f7fa ff43 	bl	80052c4 <HAL_GetTick>
 800a43e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800a440:	887b      	ldrh	r3, [r7, #2]
 800a442:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 800a444:	887b      	ldrh	r3, [r7, #2]
 800a446:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b01      	cmp	r3, #1
 800a452:	d001      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 800a454:	2302      	movs	r3, #2
 800a456:	e247      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x4e>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x4e>
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e23c      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_SPI_TransmitReceive+0x60>
 800a478:	2302      	movs	r3, #2
 800a47a:	e235      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2205      	movs	r2, #5
 800a488:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	887a      	ldrh	r2, [r7, #2]
 800a49e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	887a      	ldrh	r2, [r7, #2]
 800a4a6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	887a      	ldrh	r2, [r7, #2]
 800a4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	887a      	ldrh	r2, [r7, #2]
 800a4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a4da:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a72      	ldr	r2, [pc, #456]	@ (800a6ac <HAL_SPI_TransmitReceive+0x290>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d018      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xfc>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a71      	ldr	r2, [pc, #452]	@ (800a6b0 <HAL_SPI_TransmitReceive+0x294>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d013      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xfc>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a6f      	ldr	r2, [pc, #444]	@ (800a6b4 <HAL_SPI_TransmitReceive+0x298>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00e      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xfc>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a6e      	ldr	r2, [pc, #440]	@ (800a6b8 <HAL_SPI_TransmitReceive+0x29c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d009      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xfc>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a6c      	ldr	r2, [pc, #432]	@ (800a6bc <HAL_SPI_TransmitReceive+0x2a0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d004      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xfc>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a6b      	ldr	r2, [pc, #428]	@ (800a6c0 <HAL_SPI_TransmitReceive+0x2a4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d102      	bne.n	800a51e <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a518:	2310      	movs	r3, #16
 800a51a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a51c:	e001      	b.n	800a522 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a51e:	2308      	movs	r3, #8
 800a520:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	0c1b      	lsrs	r3, r3, #16
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	8879      	ldrh	r1, [r7, #2]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	430b      	orrs	r3, r1
 800a534:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0201 	orr.w	r2, r2, #1
 800a544:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a54e:	d107      	bne.n	800a560 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a55e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	2b0f      	cmp	r3, #15
 800a566:	f240 8098 	bls.w	800a69a <HAL_SPI_TransmitReceive+0x27e>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a4f      	ldr	r2, [pc, #316]	@ (800a6ac <HAL_SPI_TransmitReceive+0x290>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d018      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x18a>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a4d      	ldr	r2, [pc, #308]	@ (800a6b0 <HAL_SPI_TransmitReceive+0x294>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d013      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x18a>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a4c      	ldr	r2, [pc, #304]	@ (800a6b4 <HAL_SPI_TransmitReceive+0x298>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d00e      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x18a>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a4a      	ldr	r2, [pc, #296]	@ (800a6b8 <HAL_SPI_TransmitReceive+0x29c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d009      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x18a>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a49      	ldr	r2, [pc, #292]	@ (800a6bc <HAL_SPI_TransmitReceive+0x2a0>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d004      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x18a>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a47      	ldr	r2, [pc, #284]	@ (800a6c0 <HAL_SPI_TransmitReceive+0x2a4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d179      	bne.n	800a69a <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	089b      	lsrs	r3, r3, #2
 800a5aa:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5ac:	e06e      	b.n	800a68c <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d120      	bne.n	800a5fe <HAL_SPI_TransmitReceive+0x1e2>
 800a5bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01d      	beq.n	800a5fe <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a5c2:	8c3a      	ldrh	r2, [r7, #32]
 800a5c4:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d217      	bcs.n	800a5fe <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5de:	1d1a      	adds	r2, r3, #4
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5fc:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695a      	ldr	r2, [r3, #20]
 800a604:	f248 0308 	movw	r3, #32776	@ 0x8008
 800a608:	4013      	ands	r3, r2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d01a      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x228>
 800a60e:	8c3b      	ldrh	r3, [r7, #32]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d017      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a61e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a630:	b29b      	uxth	r3, r3
 800a632:	3b01      	subs	r3, #1
 800a634:	b29a      	uxth	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a642:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a644:	f7fa fe3e 	bl	80052c4 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a650:	429a      	cmp	r2, r3
 800a652:	d803      	bhi.n	800a65c <HAL_SPI_TransmitReceive+0x240>
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d102      	bne.n	800a662 <HAL_SPI_TransmitReceive+0x246>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d114      	bne.n	800a68c <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f944 	bl	800a8f0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a66e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e12d      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a68c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d18d      	bne.n	800a5ae <HAL_SPI_TransmitReceive+0x192>
 800a692:	8c3b      	ldrh	r3, [r7, #32]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d18a      	bne.n	800a5ae <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a698:	e100      	b.n	800a89c <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b07      	cmp	r3, #7
 800a6a0:	f240 80f6 	bls.w	800a890 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a6:	085b      	lsrs	r3, r3, #1
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a6aa:	e078      	b.n	800a79e <HAL_SPI_TransmitReceive+0x382>
 800a6ac:	40013000 	.word	0x40013000
 800a6b0:	50013000 	.word	0x50013000
 800a6b4:	40003800 	.word	0x40003800
 800a6b8:	50003800 	.word	0x50003800
 800a6bc:	40003c00 	.word	0x40003c00
 800a6c0:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d11f      	bne.n	800a712 <HAL_SPI_TransmitReceive+0x2f6>
 800a6d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d01c      	beq.n	800a712 <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a6d8:	8c3a      	ldrh	r2, [r7, #32]
 800a6da:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d216      	bcs.n	800a712 <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6e8:	881a      	ldrh	r2, [r3, #0]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f2:	1c9a      	adds	r2, r3, #2
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	3b01      	subs	r3, #1
 800a702:	b29a      	uxth	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a710:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d11a      	bne.n	800a756 <HAL_SPI_TransmitReceive+0x33a>
 800a720:	8c3b      	ldrh	r3, [r7, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d017      	beq.n	800a756 <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	8812      	ldrh	r2, [r2, #0]
 800a72e:	b292      	uxth	r2, r2
 800a730:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a736:	1c9a      	adds	r2, r3, #2
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a742:	b29b      	uxth	r3, r3
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a754:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a756:	f7fa fdb5 	bl	80052c4 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a762:	429a      	cmp	r2, r3
 800a764:	d803      	bhi.n	800a76e <HAL_SPI_TransmitReceive+0x352>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d102      	bne.n	800a774 <HAL_SPI_TransmitReceive+0x358>
 800a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a770:	2b00      	cmp	r3, #0
 800a772:	d114      	bne.n	800a79e <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f8bb 	bl	800a8f0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e0a4      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a79e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d18f      	bne.n	800a6c4 <HAL_SPI_TransmitReceive+0x2a8>
 800a7a4:	8c3b      	ldrh	r3, [r7, #32]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d18c      	bne.n	800a6c4 <HAL_SPI_TransmitReceive+0x2a8>
 800a7aa:	e077      	b.n	800a89c <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d121      	bne.n	800a7fe <HAL_SPI_TransmitReceive+0x3e2>
 800a7ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01e      	beq.n	800a7fe <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a7c0:	8c3a      	ldrh	r2, [r7, #32]
 800a7c2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d218      	bcs.n	800a7fe <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3320      	adds	r3, #32
 800a7d6:	7812      	ldrb	r2, [r2, #0]
 800a7d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7fc:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d11d      	bne.n	800a848 <HAL_SPI_TransmitReceive+0x42c>
 800a80c:	8c3b      	ldrh	r3, [r7, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01a      	beq.n	800a848 <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a81e:	7812      	ldrb	r2, [r2, #0]
 800a820:	b2d2      	uxtb	r2, r2
 800a822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a846:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a848:	f7fa fd3c 	bl	80052c4 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a854:	429a      	cmp	r2, r3
 800a856:	d803      	bhi.n	800a860 <HAL_SPI_TransmitReceive+0x444>
 800a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85e:	d102      	bne.n	800a866 <HAL_SPI_TransmitReceive+0x44a>
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	2b00      	cmp	r3, #0
 800a864:	d114      	bne.n	800a890 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 f842 	bl	800a8f0 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a872:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e02b      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a890:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a892:	2b00      	cmp	r3, #0
 800a894:	d18a      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x390>
 800a896:	8c3b      	ldrh	r3, [r7, #32]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d187      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2108      	movs	r1, #8
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f8c2 	bl	800aa30 <SPI_WaitOnFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d007      	beq.n	800a8c2 <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b8:	f043 0220 	orr.w	r2, r3, #32
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f814 	bl	800a8f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
  }
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3728      	adds	r7, #40	@ 0x28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0208 	orr.w	r2, r2, #8
 800a90e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0210 	orr.w	r2, r2, #16
 800a91e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a952:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d014      	beq.n	800a98a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00f      	beq.n	800a98a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a970:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f042 0220 	orr.w	r2, r2, #32
 800a988:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b03      	cmp	r3, #3
 800a994:	d014      	beq.n	800a9c0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00f      	beq.n	800a9c0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9a6:	f043 0204 	orr.w	r2, r3, #4
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00f      	beq.n	800a9ea <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d0:	f043 0201 	orr.w	r2, r3, #1
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	699a      	ldr	r2, [r3, #24]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00f      	beq.n	800aa14 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9fa:	f043 0208 	orr.w	r2, r3, #8
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	699a      	ldr	r2, [r3, #24]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa40:	e010      	b.n	800aa64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa42:	f7fa fc3f 	bl	80052c4 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d803      	bhi.n	800aa5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa58:	d102      	bne.n	800aa60 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e00f      	b.n	800aa84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695a      	ldr	r2, [r3, #20]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	bf0c      	ite	eq
 800aa74:	2301      	moveq	r3, #1
 800aa76:	2300      	movne	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d0df      	beq.n	800aa42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa98:	095b      	lsrs	r3, r3, #5
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	3307      	adds	r3, #7
 800aaaa:	08db      	lsrs	r3, r3, #3
 800aaac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	fb02 f303 	mul.w	r3, r2, r3
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e049      	b.n	800ab68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7f9 feaf 	bl	800484c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4619      	mov	r1, r3
 800ab00:	4610      	mov	r0, r2
 800ab02:	f000 ff09 	bl	800b918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d001      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e07c      	b.n	800ac82 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f042 0201 	orr.w	r2, r2, #1
 800ab9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a3a      	ldr	r2, [pc, #232]	@ (800ac90 <HAL_TIM_Base_Start_IT+0x120>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d04a      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a39      	ldr	r2, [pc, #228]	@ (800ac94 <HAL_TIM_Base_Start_IT+0x124>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d045      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abbc:	d040      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abc6:	d03b      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a32      	ldr	r2, [pc, #200]	@ (800ac98 <HAL_TIM_Base_Start_IT+0x128>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d036      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a31      	ldr	r2, [pc, #196]	@ (800ac9c <HAL_TIM_Base_Start_IT+0x12c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d031      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a2f      	ldr	r2, [pc, #188]	@ (800aca0 <HAL_TIM_Base_Start_IT+0x130>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d02c      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a2e      	ldr	r2, [pc, #184]	@ (800aca4 <HAL_TIM_Base_Start_IT+0x134>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d027      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a2c      	ldr	r2, [pc, #176]	@ (800aca8 <HAL_TIM_Base_Start_IT+0x138>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d022      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a2b      	ldr	r2, [pc, #172]	@ (800acac <HAL_TIM_Base_Start_IT+0x13c>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d01d      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a29      	ldr	r2, [pc, #164]	@ (800acb0 <HAL_TIM_Base_Start_IT+0x140>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d018      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a28      	ldr	r2, [pc, #160]	@ (800acb4 <HAL_TIM_Base_Start_IT+0x144>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d013      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a26      	ldr	r2, [pc, #152]	@ (800acb8 <HAL_TIM_Base_Start_IT+0x148>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d00e      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a25      	ldr	r2, [pc, #148]	@ (800acbc <HAL_TIM_Base_Start_IT+0x14c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d009      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a23      	ldr	r2, [pc, #140]	@ (800acc0 <HAL_TIM_Base_Start_IT+0x150>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d004      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xd0>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a22      	ldr	r2, [pc, #136]	@ (800acc4 <HAL_TIM_Base_Start_IT+0x154>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d115      	bne.n	800ac6c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	4b20      	ldr	r3, [pc, #128]	@ (800acc8 <HAL_TIM_Base_Start_IT+0x158>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b06      	cmp	r3, #6
 800ac50:	d015      	beq.n	800ac7e <HAL_TIM_Base_Start_IT+0x10e>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac58:	d011      	beq.n	800ac7e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f042 0201 	orr.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6a:	e008      	b.n	800ac7e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f042 0201 	orr.w	r2, r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	e000      	b.n	800ac80 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40012c00 	.word	0x40012c00
 800ac94:	50012c00 	.word	0x50012c00
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	50000400 	.word	0x50000400
 800aca0:	40000800 	.word	0x40000800
 800aca4:	50000800 	.word	0x50000800
 800aca8:	40000c00 	.word	0x40000c00
 800acac:	50000c00 	.word	0x50000c00
 800acb0:	40013400 	.word	0x40013400
 800acb4:	50013400 	.word	0x50013400
 800acb8:	40001800 	.word	0x40001800
 800acbc:	50001800 	.word	0x50001800
 800acc0:	40014000 	.word	0x40014000
 800acc4:	50014000 	.word	0x50014000
 800acc8:	00010007 	.word	0x00010007

0800accc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0201 	bic.w	r2, r2, #1
 800ace2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6a1a      	ldr	r2, [r3, #32]
 800acea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800acee:	4013      	ands	r3, r2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10f      	bne.n	800ad14 <HAL_TIM_Base_Stop_IT+0x48>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6a1a      	ldr	r2, [r3, #32]
 800acfa:	f244 4344 	movw	r3, #17476	@ 0x4444
 800acfe:	4013      	ands	r3, r2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <HAL_TIM_Base_Stop_IT+0x48>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0201 	bic.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e049      	b.n	800add0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f841 	bl	800add8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f000 fdd5 	bl	800b918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d109      	bne.n	800ae14 <HAL_TIM_OC_Start_IT+0x28>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	bf14      	ite	ne
 800ae0c:	2301      	movne	r3, #1
 800ae0e:	2300      	moveq	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	e03c      	b.n	800ae8e <HAL_TIM_OC_Start_IT+0xa2>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d109      	bne.n	800ae2e <HAL_TIM_OC_Start_IT+0x42>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	bf14      	ite	ne
 800ae26:	2301      	movne	r3, #1
 800ae28:	2300      	moveq	r3, #0
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	e02f      	b.n	800ae8e <HAL_TIM_OC_Start_IT+0xa2>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d109      	bne.n	800ae48 <HAL_TIM_OC_Start_IT+0x5c>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	bf14      	ite	ne
 800ae40:	2301      	movne	r3, #1
 800ae42:	2300      	moveq	r3, #0
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	e022      	b.n	800ae8e <HAL_TIM_OC_Start_IT+0xa2>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b0c      	cmp	r3, #12
 800ae4c:	d109      	bne.n	800ae62 <HAL_TIM_OC_Start_IT+0x76>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	bf14      	ite	ne
 800ae5a:	2301      	movne	r3, #1
 800ae5c:	2300      	moveq	r3, #0
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	e015      	b.n	800ae8e <HAL_TIM_OC_Start_IT+0xa2>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b10      	cmp	r3, #16
 800ae66:	d109      	bne.n	800ae7c <HAL_TIM_OC_Start_IT+0x90>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	bf14      	ite	ne
 800ae74:	2301      	movne	r3, #1
 800ae76:	2300      	moveq	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	e008      	b.n	800ae8e <HAL_TIM_OC_Start_IT+0xa2>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	bf14      	ite	ne
 800ae88:	2301      	movne	r3, #1
 800ae8a:	2300      	moveq	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e11a      	b.n	800b0cc <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <HAL_TIM_OC_Start_IT+0xba>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aea4:	e023      	b.n	800aeee <HAL_TIM_OC_Start_IT+0x102>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d104      	bne.n	800aeb6 <HAL_TIM_OC_Start_IT+0xca>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aeb4:	e01b      	b.n	800aeee <HAL_TIM_OC_Start_IT+0x102>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b08      	cmp	r3, #8
 800aeba:	d104      	bne.n	800aec6 <HAL_TIM_OC_Start_IT+0xda>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aec4:	e013      	b.n	800aeee <HAL_TIM_OC_Start_IT+0x102>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b0c      	cmp	r3, #12
 800aeca:	d104      	bne.n	800aed6 <HAL_TIM_OC_Start_IT+0xea>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aed4:	e00b      	b.n	800aeee <HAL_TIM_OC_Start_IT+0x102>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b10      	cmp	r3, #16
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_OC_Start_IT+0xfa>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aee4:	e003      	b.n	800aeee <HAL_TIM_OC_Start_IT+0x102>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b0c      	cmp	r3, #12
 800aef2:	d841      	bhi.n	800af78 <HAL_TIM_OC_Start_IT+0x18c>
 800aef4:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <HAL_TIM_OC_Start_IT+0x110>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af31 	.word	0x0800af31
 800af00:	0800af79 	.word	0x0800af79
 800af04:	0800af79 	.word	0x0800af79
 800af08:	0800af79 	.word	0x0800af79
 800af0c:	0800af43 	.word	0x0800af43
 800af10:	0800af79 	.word	0x0800af79
 800af14:	0800af79 	.word	0x0800af79
 800af18:	0800af79 	.word	0x0800af79
 800af1c:	0800af55 	.word	0x0800af55
 800af20:	0800af79 	.word	0x0800af79
 800af24:	0800af79 	.word	0x0800af79
 800af28:	0800af79 	.word	0x0800af79
 800af2c:	0800af67 	.word	0x0800af67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0202 	orr.w	r2, r2, #2
 800af3e:	60da      	str	r2, [r3, #12]
      break;
 800af40:	e01d      	b.n	800af7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f042 0204 	orr.w	r2, r2, #4
 800af50:	60da      	str	r2, [r3, #12]
      break;
 800af52:	e014      	b.n	800af7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f042 0208 	orr.w	r2, r2, #8
 800af62:	60da      	str	r2, [r3, #12]
      break;
 800af64:	e00b      	b.n	800af7e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0210 	orr.w	r2, r2, #16
 800af74:	60da      	str	r2, [r3, #12]
      break;
 800af76:	e002      	b.n	800af7e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
      break;
 800af7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f040 80a2 	bne.w	800b0ca <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2201      	movs	r2, #1
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 f97e 	bl	800c290 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a4e      	ldr	r2, [pc, #312]	@ (800b0d4 <HAL_TIM_OC_Start_IT+0x2e8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d018      	beq.n	800afd0 <HAL_TIM_OC_Start_IT+0x1e4>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a4d      	ldr	r2, [pc, #308]	@ (800b0d8 <HAL_TIM_OC_Start_IT+0x2ec>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d013      	beq.n	800afd0 <HAL_TIM_OC_Start_IT+0x1e4>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a4b      	ldr	r2, [pc, #300]	@ (800b0dc <HAL_TIM_OC_Start_IT+0x2f0>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00e      	beq.n	800afd0 <HAL_TIM_OC_Start_IT+0x1e4>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a4a      	ldr	r2, [pc, #296]	@ (800b0e0 <HAL_TIM_OC_Start_IT+0x2f4>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d009      	beq.n	800afd0 <HAL_TIM_OC_Start_IT+0x1e4>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a48      	ldr	r2, [pc, #288]	@ (800b0e4 <HAL_TIM_OC_Start_IT+0x2f8>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <HAL_TIM_OC_Start_IT+0x1e4>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a47      	ldr	r2, [pc, #284]	@ (800b0e8 <HAL_TIM_OC_Start_IT+0x2fc>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d101      	bne.n	800afd4 <HAL_TIM_OC_Start_IT+0x1e8>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <HAL_TIM_OC_Start_IT+0x1ea>
 800afd4:	2300      	movs	r3, #0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afe8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a39      	ldr	r2, [pc, #228]	@ (800b0d4 <HAL_TIM_OC_Start_IT+0x2e8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d04a      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a37      	ldr	r2, [pc, #220]	@ (800b0d8 <HAL_TIM_OC_Start_IT+0x2ec>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d045      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b006:	d040      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b010:	d03b      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a35      	ldr	r2, [pc, #212]	@ (800b0ec <HAL_TIM_OC_Start_IT+0x300>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d036      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a33      	ldr	r2, [pc, #204]	@ (800b0f0 <HAL_TIM_OC_Start_IT+0x304>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d031      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a32      	ldr	r2, [pc, #200]	@ (800b0f4 <HAL_TIM_OC_Start_IT+0x308>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d02c      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a30      	ldr	r2, [pc, #192]	@ (800b0f8 <HAL_TIM_OC_Start_IT+0x30c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d027      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a2f      	ldr	r2, [pc, #188]	@ (800b0fc <HAL_TIM_OC_Start_IT+0x310>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d022      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a2d      	ldr	r2, [pc, #180]	@ (800b100 <HAL_TIM_OC_Start_IT+0x314>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d01d      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a22      	ldr	r2, [pc, #136]	@ (800b0dc <HAL_TIM_OC_Start_IT+0x2f0>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d018      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a20      	ldr	r2, [pc, #128]	@ (800b0e0 <HAL_TIM_OC_Start_IT+0x2f4>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d013      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a27      	ldr	r2, [pc, #156]	@ (800b104 <HAL_TIM_OC_Start_IT+0x318>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d00e      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a25      	ldr	r2, [pc, #148]	@ (800b108 <HAL_TIM_OC_Start_IT+0x31c>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d009      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a1a      	ldr	r2, [pc, #104]	@ (800b0e4 <HAL_TIM_OC_Start_IT+0x2f8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d004      	beq.n	800b08a <HAL_TIM_OC_Start_IT+0x29e>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a18      	ldr	r2, [pc, #96]	@ (800b0e8 <HAL_TIM_OC_Start_IT+0x2fc>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d115      	bne.n	800b0b6 <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	4b1e      	ldr	r3, [pc, #120]	@ (800b10c <HAL_TIM_OC_Start_IT+0x320>)
 800b092:	4013      	ands	r3, r2
 800b094:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b06      	cmp	r3, #6
 800b09a:	d015      	beq.n	800b0c8 <HAL_TIM_OC_Start_IT+0x2dc>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0a2:	d011      	beq.n	800b0c8 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b4:	e008      	b.n	800b0c8 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f042 0201 	orr.w	r2, r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e000      	b.n	800b0ca <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	40012c00 	.word	0x40012c00
 800b0d8:	50012c00 	.word	0x50012c00
 800b0dc:	40013400 	.word	0x40013400
 800b0e0:	50013400 	.word	0x50013400
 800b0e4:	40014000 	.word	0x40014000
 800b0e8:	50014000 	.word	0x50014000
 800b0ec:	40000400 	.word	0x40000400
 800b0f0:	50000400 	.word	0x50000400
 800b0f4:	40000800 	.word	0x40000800
 800b0f8:	50000800 	.word	0x50000800
 800b0fc:	40000c00 	.word	0x40000c00
 800b100:	50000c00 	.word	0x50000c00
 800b104:	40001800 	.word	0x40001800
 800b108:	50001800 	.word	0x50001800
 800b10c:	00010007 	.word	0x00010007

0800b110 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b0c      	cmp	r3, #12
 800b122:	d841      	bhi.n	800b1a8 <HAL_TIM_OC_Stop_IT+0x98>
 800b124:	a201      	add	r2, pc, #4	@ (adr r2, 800b12c <HAL_TIM_OC_Stop_IT+0x1c>)
 800b126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12a:	bf00      	nop
 800b12c:	0800b161 	.word	0x0800b161
 800b130:	0800b1a9 	.word	0x0800b1a9
 800b134:	0800b1a9 	.word	0x0800b1a9
 800b138:	0800b1a9 	.word	0x0800b1a9
 800b13c:	0800b173 	.word	0x0800b173
 800b140:	0800b1a9 	.word	0x0800b1a9
 800b144:	0800b1a9 	.word	0x0800b1a9
 800b148:	0800b1a9 	.word	0x0800b1a9
 800b14c:	0800b185 	.word	0x0800b185
 800b150:	0800b1a9 	.word	0x0800b1a9
 800b154:	0800b1a9 	.word	0x0800b1a9
 800b158:	0800b1a9 	.word	0x0800b1a9
 800b15c:	0800b197 	.word	0x0800b197
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 0202 	bic.w	r2, r2, #2
 800b16e:	60da      	str	r2, [r3, #12]
      break;
 800b170:	e01d      	b.n	800b1ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0204 	bic.w	r2, r2, #4
 800b180:	60da      	str	r2, [r3, #12]
      break;
 800b182:	e014      	b.n	800b1ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0208 	bic.w	r2, r2, #8
 800b192:	60da      	str	r2, [r3, #12]
      break;
 800b194:	e00b      	b.n	800b1ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68da      	ldr	r2, [r3, #12]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0210 	bic.w	r2, r2, #16
 800b1a4:	60da      	str	r2, [r3, #12]
      break;
 800b1a6:	e002      	b.n	800b1ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 8086 	bne.w	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 f866 	bl	800c290 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a40      	ldr	r2, [pc, #256]	@ (800b2cc <HAL_TIM_OC_Stop_IT+0x1bc>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d018      	beq.n	800b200 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a3f      	ldr	r2, [pc, #252]	@ (800b2d0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d013      	beq.n	800b200 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a3d      	ldr	r2, [pc, #244]	@ (800b2d4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00e      	beq.n	800b200 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a3c      	ldr	r2, [pc, #240]	@ (800b2d8 <HAL_TIM_OC_Stop_IT+0x1c8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d009      	beq.n	800b200 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a3a      	ldr	r2, [pc, #232]	@ (800b2dc <HAL_TIM_OC_Stop_IT+0x1cc>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d004      	beq.n	800b200 <HAL_TIM_OC_Stop_IT+0xf0>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a39      	ldr	r2, [pc, #228]	@ (800b2e0 <HAL_TIM_OC_Stop_IT+0x1d0>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d101      	bne.n	800b204 <HAL_TIM_OC_Stop_IT+0xf4>
 800b200:	2301      	movs	r3, #1
 800b202:	e000      	b.n	800b206 <HAL_TIM_OC_Stop_IT+0xf6>
 800b204:	2300      	movs	r3, #0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d017      	beq.n	800b23a <HAL_TIM_OC_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6a1a      	ldr	r2, [r3, #32]
 800b210:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b214:	4013      	ands	r3, r2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10f      	bne.n	800b23a <HAL_TIM_OC_Stop_IT+0x12a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6a1a      	ldr	r2, [r3, #32]
 800b220:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b224:	4013      	ands	r3, r2
 800b226:	2b00      	cmp	r3, #0
 800b228:	d107      	bne.n	800b23a <HAL_TIM_OC_Stop_IT+0x12a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	6a1a      	ldr	r2, [r3, #32]
 800b240:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b244:	4013      	ands	r3, r2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10f      	bne.n	800b26a <HAL_TIM_OC_Stop_IT+0x15a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	6a1a      	ldr	r2, [r3, #32]
 800b250:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b254:	4013      	ands	r3, r2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d107      	bne.n	800b26a <HAL_TIM_OC_Stop_IT+0x15a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0201 	bic.w	r2, r2, #1
 800b268:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d104      	bne.n	800b27a <HAL_TIM_OC_Stop_IT+0x16a>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b278:	e023      	b.n	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d104      	bne.n	800b28a <HAL_TIM_OC_Stop_IT+0x17a>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b288:	e01b      	b.n	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d104      	bne.n	800b29a <HAL_TIM_OC_Stop_IT+0x18a>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b298:	e013      	b.n	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b0c      	cmp	r3, #12
 800b29e:	d104      	bne.n	800b2aa <HAL_TIM_OC_Stop_IT+0x19a>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2a8:	e00b      	b.n	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b10      	cmp	r3, #16
 800b2ae:	d104      	bne.n	800b2ba <HAL_TIM_OC_Stop_IT+0x1aa>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2b8:	e003      	b.n	800b2c2 <HAL_TIM_OC_Stop_IT+0x1b2>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	40012c00 	.word	0x40012c00
 800b2d0:	50012c00 	.word	0x50012c00
 800b2d4:	40013400 	.word	0x40013400
 800b2d8:	50013400 	.word	0x50013400
 800b2dc:	40014000 	.word	0x40014000
 800b2e0:	50014000 	.word	0x50014000

0800b2e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d020      	beq.n	800b348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01b      	beq.n	800b348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0202 	mvn.w	r2, #2
 800b318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fad4 	bl	800b8dc <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fac6 	bl	800b8c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fad7 	bl	800b8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d020      	beq.n	800b394 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d01b      	beq.n	800b394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f06f 0204 	mvn.w	r2, #4
 800b364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 faae 	bl	800b8dc <HAL_TIM_IC_CaptureCallback>
 800b380:	e005      	b.n	800b38e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 faa0 	bl	800b8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fab1 	bl	800b8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f003 0308 	and.w	r3, r3, #8
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d020      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01b      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f06f 0208 	mvn.w	r2, #8
 800b3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa88 	bl	800b8dc <HAL_TIM_IC_CaptureCallback>
 800b3cc:	e005      	b.n	800b3da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa7a 	bl	800b8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fa8b 	bl	800b8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 0310 	and.w	r3, r3, #16
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d020      	beq.n	800b42c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d01b      	beq.n	800b42c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f06f 0210 	mvn.w	r2, #16
 800b3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2208      	movs	r2, #8
 800b402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa62 	bl	800b8dc <HAL_TIM_IC_CaptureCallback>
 800b418:	e005      	b.n	800b426 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa54 	bl	800b8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa65 	bl	800b8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d007      	beq.n	800b450 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0201 	mvn.w	r2, #1
 800b448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fa32 	bl	800b8b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b456:	2b00      	cmp	r3, #0
 800b458:	d104      	bne.n	800b464 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00c      	beq.n	800b47e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d007      	beq.n	800b47e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 f809 	bl	800c490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00c      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 f801 	bl	800c4a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00c      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fa1f 	bl	800b904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f003 0320 	and.w	r3, r3, #32
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00c      	beq.n	800b4ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f003 0320 	and.w	r3, r3, #32
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f06f 0220 	mvn.w	r2, #32
 800b4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 ffc9 	bl	800c47c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00c      	beq.n	800b50e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 ffd5 	bl	800c4b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00c      	beq.n	800b532 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b52a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 ffcd 	bl	800c4cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00c      	beq.n	800b556 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 ffc5 	bl	800c4e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00c      	beq.n	800b57a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d007      	beq.n	800b57a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 ffbd 	bl	800c4f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b57a:	bf00      	nop
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e066      	b.n	800b670 <HAL_TIM_OC_ConfigChannel+0xec>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b14      	cmp	r3, #20
 800b5ae:	d857      	bhi.n	800b660 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b6:	bf00      	nop
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b661 	.word	0x0800b661
 800b5c0:	0800b661 	.word	0x0800b661
 800b5c4:	0800b661 	.word	0x0800b661
 800b5c8:	0800b61b 	.word	0x0800b61b
 800b5cc:	0800b661 	.word	0x0800b661
 800b5d0:	0800b661 	.word	0x0800b661
 800b5d4:	0800b661 	.word	0x0800b661
 800b5d8:	0800b629 	.word	0x0800b629
 800b5dc:	0800b661 	.word	0x0800b661
 800b5e0:	0800b661 	.word	0x0800b661
 800b5e4:	0800b661 	.word	0x0800b661
 800b5e8:	0800b637 	.word	0x0800b637
 800b5ec:	0800b661 	.word	0x0800b661
 800b5f0:	0800b661 	.word	0x0800b661
 800b5f4:	0800b661 	.word	0x0800b661
 800b5f8:	0800b645 	.word	0x0800b645
 800b5fc:	0800b661 	.word	0x0800b661
 800b600:	0800b661 	.word	0x0800b661
 800b604:	0800b661 	.word	0x0800b661
 800b608:	0800b653 	.word	0x0800b653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fa6a 	bl	800baec <TIM_OC1_SetConfig>
      break;
 800b618:	e025      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	4618      	mov	r0, r3
 800b622:	f000 fafd 	bl	800bc20 <TIM_OC2_SetConfig>
      break;
 800b626:	e01e      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68b9      	ldr	r1, [r7, #8]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fb8e 	bl	800bd50 <TIM_OC3_SetConfig>
      break;
 800b634:	e017      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fc1d 	bl	800be7c <TIM_OC4_SetConfig>
      break;
 800b642:	e010      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fcae 	bl	800bfac <TIM_OC5_SetConfig>
      break;
 800b650:	e009      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 fd11 	bl	800c080 <TIM_OC6_SetConfig>
      break;
 800b65e:	e002      	b.n	800b666 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	75fb      	strb	r3, [r7, #23]
      break;
 800b664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIM_ConfigClockSource+0x1c>
 800b690:	2302      	movs	r3, #2
 800b692:	e0fe      	b.n	800b892 <HAL_TIM_ConfigClockSource+0x21a>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b6b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b6b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d0:	f000 80c9 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b6d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d8:	f200 80ce 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b6dc:	4a6f      	ldr	r2, [pc, #444]	@ (800b89c <HAL_TIM_ConfigClockSource+0x224>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	f000 80c1 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b6e4:	4a6d      	ldr	r2, [pc, #436]	@ (800b89c <HAL_TIM_ConfigClockSource+0x224>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	f200 80c6 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b6ec:	4a6c      	ldr	r2, [pc, #432]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x228>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	f000 80b9 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b6f4:	4a6a      	ldr	r2, [pc, #424]	@ (800b8a0 <HAL_TIM_ConfigClockSource+0x228>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f200 80be 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b6fc:	4a69      	ldr	r2, [pc, #420]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x22c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	f000 80b1 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b704:	4a67      	ldr	r2, [pc, #412]	@ (800b8a4 <HAL_TIM_ConfigClockSource+0x22c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	f200 80b6 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b70c:	4a66      	ldr	r2, [pc, #408]	@ (800b8a8 <HAL_TIM_ConfigClockSource+0x230>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f000 80a9 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b714:	4a64      	ldr	r2, [pc, #400]	@ (800b8a8 <HAL_TIM_ConfigClockSource+0x230>)
 800b716:	4293      	cmp	r3, r2
 800b718:	f200 80ae 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b71c:	4a63      	ldr	r2, [pc, #396]	@ (800b8ac <HAL_TIM_ConfigClockSource+0x234>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	f000 80a1 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b724:	4a61      	ldr	r2, [pc, #388]	@ (800b8ac <HAL_TIM_ConfigClockSource+0x234>)
 800b726:	4293      	cmp	r3, r2
 800b728:	f200 80a6 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b72c:	4a60      	ldr	r2, [pc, #384]	@ (800b8b0 <HAL_TIM_ConfigClockSource+0x238>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	f000 8099 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b734:	4a5e      	ldr	r2, [pc, #376]	@ (800b8b0 <HAL_TIM_ConfigClockSource+0x238>)
 800b736:	4293      	cmp	r3, r2
 800b738:	f200 809e 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b73c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b740:	f000 8091 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b748:	f200 8096 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b74c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b750:	f000 8089 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b758:	f200 808e 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b75c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b760:	d03e      	beq.n	800b7e0 <HAL_TIM_ConfigClockSource+0x168>
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b766:	f200 8087 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b76e:	f000 8086 	beq.w	800b87e <HAL_TIM_ConfigClockSource+0x206>
 800b772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b776:	d87f      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b778:	2b70      	cmp	r3, #112	@ 0x70
 800b77a:	d01a      	beq.n	800b7b2 <HAL_TIM_ConfigClockSource+0x13a>
 800b77c:	2b70      	cmp	r3, #112	@ 0x70
 800b77e:	d87b      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b780:	2b60      	cmp	r3, #96	@ 0x60
 800b782:	d050      	beq.n	800b826 <HAL_TIM_ConfigClockSource+0x1ae>
 800b784:	2b60      	cmp	r3, #96	@ 0x60
 800b786:	d877      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b788:	2b50      	cmp	r3, #80	@ 0x50
 800b78a:	d03c      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x18e>
 800b78c:	2b50      	cmp	r3, #80	@ 0x50
 800b78e:	d873      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b790:	2b40      	cmp	r3, #64	@ 0x40
 800b792:	d058      	beq.n	800b846 <HAL_TIM_ConfigClockSource+0x1ce>
 800b794:	2b40      	cmp	r3, #64	@ 0x40
 800b796:	d86f      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b798:	2b30      	cmp	r3, #48	@ 0x30
 800b79a:	d064      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b79c:	2b30      	cmp	r3, #48	@ 0x30
 800b79e:	d86b      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d060      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	d867      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d05c      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d05a      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1ee>
 800b7b0:	e062      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7c2:	f000 fd45 	bl	800c250 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	609a      	str	r2, [r3, #8]
      break;
 800b7de:	e04f      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7f0:	f000 fd2e 	bl	800c250 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b802:	609a      	str	r2, [r3, #8]
      break;
 800b804:	e03c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b812:	461a      	mov	r2, r3
 800b814:	f000 fca0 	bl	800c158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2150      	movs	r1, #80	@ 0x50
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 fcf9 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800b824:	e02c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b832:	461a      	mov	r2, r3
 800b834:	f000 fcbf 	bl	800c1b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2160      	movs	r1, #96	@ 0x60
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 fce9 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800b844:	e01c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b852:	461a      	mov	r2, r3
 800b854:	f000 fc80 	bl	800c158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2140      	movs	r1, #64	@ 0x40
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fcd9 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800b864:	e00c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f000 fcd0 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800b876:	e003      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	73fb      	strb	r3, [r7, #15]
      break;
 800b87c:	e000      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800b87e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	00100070 	.word	0x00100070
 800b8a0:	00100060 	.word	0x00100060
 800b8a4:	00100050 	.word	0x00100050
 800b8a8:	00100040 	.word	0x00100040
 800b8ac:	00100030 	.word	0x00100030
 800b8b0:	00100020 	.word	0x00100020

0800b8b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8e4:	bf00      	nop
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a62      	ldr	r2, [pc, #392]	@ (800bab4 <TIM_Base_SetConfig+0x19c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d02b      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a61      	ldr	r2, [pc, #388]	@ (800bab8 <TIM_Base_SetConfig+0x1a0>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d027      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b93e:	d023      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b946:	d01f      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a5c      	ldr	r2, [pc, #368]	@ (800babc <TIM_Base_SetConfig+0x1a4>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d01b      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a5b      	ldr	r2, [pc, #364]	@ (800bac0 <TIM_Base_SetConfig+0x1a8>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d017      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a5a      	ldr	r2, [pc, #360]	@ (800bac4 <TIM_Base_SetConfig+0x1ac>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d013      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a59      	ldr	r2, [pc, #356]	@ (800bac8 <TIM_Base_SetConfig+0x1b0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00f      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a58      	ldr	r2, [pc, #352]	@ (800bacc <TIM_Base_SetConfig+0x1b4>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d00b      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a57      	ldr	r2, [pc, #348]	@ (800bad0 <TIM_Base_SetConfig+0x1b8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d007      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a56      	ldr	r2, [pc, #344]	@ (800bad4 <TIM_Base_SetConfig+0x1bc>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d003      	beq.n	800b988 <TIM_Base_SetConfig+0x70>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a55      	ldr	r2, [pc, #340]	@ (800bad8 <TIM_Base_SetConfig+0x1c0>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d108      	bne.n	800b99a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b98e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a45      	ldr	r2, [pc, #276]	@ (800bab4 <TIM_Base_SetConfig+0x19c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d03b      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a44      	ldr	r2, [pc, #272]	@ (800bab8 <TIM_Base_SetConfig+0x1a0>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d037      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b0:	d033      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9b8:	d02f      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a3f      	ldr	r2, [pc, #252]	@ (800babc <TIM_Base_SetConfig+0x1a4>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d02b      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a3e      	ldr	r2, [pc, #248]	@ (800bac0 <TIM_Base_SetConfig+0x1a8>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d027      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a3d      	ldr	r2, [pc, #244]	@ (800bac4 <TIM_Base_SetConfig+0x1ac>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d023      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a3c      	ldr	r2, [pc, #240]	@ (800bac8 <TIM_Base_SetConfig+0x1b0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d01f      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a3b      	ldr	r2, [pc, #236]	@ (800bacc <TIM_Base_SetConfig+0x1b4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d01b      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a3a      	ldr	r2, [pc, #232]	@ (800bad0 <TIM_Base_SetConfig+0x1b8>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d017      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a39      	ldr	r2, [pc, #228]	@ (800bad4 <TIM_Base_SetConfig+0x1bc>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d013      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a38      	ldr	r2, [pc, #224]	@ (800bad8 <TIM_Base_SetConfig+0x1c0>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00f      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a37      	ldr	r2, [pc, #220]	@ (800badc <TIM_Base_SetConfig+0x1c4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d00b      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a36      	ldr	r2, [pc, #216]	@ (800bae0 <TIM_Base_SetConfig+0x1c8>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d007      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a35      	ldr	r2, [pc, #212]	@ (800bae4 <TIM_Base_SetConfig+0x1cc>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d003      	beq.n	800ba1a <TIM_Base_SetConfig+0x102>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a34      	ldr	r2, [pc, #208]	@ (800bae8 <TIM_Base_SetConfig+0x1d0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d108      	bne.n	800ba2c <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	689a      	ldr	r2, [r3, #8]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a18      	ldr	r2, [pc, #96]	@ (800bab4 <TIM_Base_SetConfig+0x19c>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d013      	beq.n	800ba80 <TIM_Base_SetConfig+0x168>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a17      	ldr	r2, [pc, #92]	@ (800bab8 <TIM_Base_SetConfig+0x1a0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00f      	beq.n	800ba80 <TIM_Base_SetConfig+0x168>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a1c      	ldr	r2, [pc, #112]	@ (800bad4 <TIM_Base_SetConfig+0x1bc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00b      	beq.n	800ba80 <TIM_Base_SetConfig+0x168>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a1b      	ldr	r2, [pc, #108]	@ (800bad8 <TIM_Base_SetConfig+0x1c0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d007      	beq.n	800ba80 <TIM_Base_SetConfig+0x168>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a1c      	ldr	r2, [pc, #112]	@ (800bae4 <TIM_Base_SetConfig+0x1cc>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d003      	beq.n	800ba80 <TIM_Base_SetConfig+0x168>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bae8 <TIM_Base_SetConfig+0x1d0>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d103      	bne.n	800ba88 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	691a      	ldr	r2, [r3, #16]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d105      	bne.n	800baa6 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f023 0201 	bic.w	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	611a      	str	r2, [r3, #16]
  }
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	40012c00 	.word	0x40012c00
 800bab8:	50012c00 	.word	0x50012c00
 800babc:	40000400 	.word	0x40000400
 800bac0:	50000400 	.word	0x50000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	50000800 	.word	0x50000800
 800bacc:	40000c00 	.word	0x40000c00
 800bad0:	50000c00 	.word	0x50000c00
 800bad4:	40013400 	.word	0x40013400
 800bad8:	50013400 	.word	0x50013400
 800badc:	40001800 	.word	0x40001800
 800bae0:	50001800 	.word	0x50001800
 800bae4:	40014000 	.word	0x40014000
 800bae8:	50014000 	.word	0x50014000

0800baec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	f023 0201 	bic.w	r2, r3, #1
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f023 0303 	bic.w	r3, r3, #3
 800bb26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f023 0302 	bic.w	r3, r3, #2
 800bb38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a30      	ldr	r2, [pc, #192]	@ (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d013      	beq.n	800bb74 <TIM_OC1_SetConfig+0x88>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc0c <TIM_OC1_SetConfig+0x120>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d00f      	beq.n	800bb74 <TIM_OC1_SetConfig+0x88>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a2e      	ldr	r2, [pc, #184]	@ (800bc10 <TIM_OC1_SetConfig+0x124>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00b      	beq.n	800bb74 <TIM_OC1_SetConfig+0x88>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a2d      	ldr	r2, [pc, #180]	@ (800bc14 <TIM_OC1_SetConfig+0x128>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d007      	beq.n	800bb74 <TIM_OC1_SetConfig+0x88>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2c      	ldr	r2, [pc, #176]	@ (800bc18 <TIM_OC1_SetConfig+0x12c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d003      	beq.n	800bb74 <TIM_OC1_SetConfig+0x88>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a2b      	ldr	r2, [pc, #172]	@ (800bc1c <TIM_OC1_SetConfig+0x130>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d10c      	bne.n	800bb8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f023 0308 	bic.w	r3, r3, #8
 800bb7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f023 0304 	bic.w	r3, r3, #4
 800bb8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a1d      	ldr	r2, [pc, #116]	@ (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d013      	beq.n	800bbbe <TIM_OC1_SetConfig+0xd2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a1c      	ldr	r2, [pc, #112]	@ (800bc0c <TIM_OC1_SetConfig+0x120>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00f      	beq.n	800bbbe <TIM_OC1_SetConfig+0xd2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1b      	ldr	r2, [pc, #108]	@ (800bc10 <TIM_OC1_SetConfig+0x124>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <TIM_OC1_SetConfig+0xd2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a1a      	ldr	r2, [pc, #104]	@ (800bc14 <TIM_OC1_SetConfig+0x128>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <TIM_OC1_SetConfig+0xd2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a19      	ldr	r2, [pc, #100]	@ (800bc18 <TIM_OC1_SetConfig+0x12c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <TIM_OC1_SetConfig+0xd2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a18      	ldr	r2, [pc, #96]	@ (800bc1c <TIM_OC1_SetConfig+0x130>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d111      	bne.n	800bbe2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	621a      	str	r2, [r3, #32]
}
 800bbfc:	bf00      	nop
 800bbfe:	371c      	adds	r7, #28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	40012c00 	.word	0x40012c00
 800bc0c:	50012c00 	.word	0x50012c00
 800bc10:	40013400 	.word	0x40013400
 800bc14:	50013400 	.word	0x50013400
 800bc18:	40014000 	.word	0x40014000
 800bc1c:	50014000 	.word	0x50014000

0800bc20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	f023 0210 	bic.w	r2, r3, #16
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	021b      	lsls	r3, r3, #8
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f023 0320 	bic.w	r3, r3, #32
 800bc6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	011b      	lsls	r3, r3, #4
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a2e      	ldr	r2, [pc, #184]	@ (800bd38 <TIM_OC2_SetConfig+0x118>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00b      	beq.n	800bc9c <TIM_OC2_SetConfig+0x7c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a2d      	ldr	r2, [pc, #180]	@ (800bd3c <TIM_OC2_SetConfig+0x11c>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d007      	beq.n	800bc9c <TIM_OC2_SetConfig+0x7c>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a2c      	ldr	r2, [pc, #176]	@ (800bd40 <TIM_OC2_SetConfig+0x120>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d003      	beq.n	800bc9c <TIM_OC2_SetConfig+0x7c>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a2b      	ldr	r2, [pc, #172]	@ (800bd44 <TIM_OC2_SetConfig+0x124>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d10d      	bne.n	800bcb8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a1f      	ldr	r2, [pc, #124]	@ (800bd38 <TIM_OC2_SetConfig+0x118>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <TIM_OC2_SetConfig+0xc8>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd3c <TIM_OC2_SetConfig+0x11c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00f      	beq.n	800bce8 <TIM_OC2_SetConfig+0xc8>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1d      	ldr	r2, [pc, #116]	@ (800bd40 <TIM_OC2_SetConfig+0x120>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00b      	beq.n	800bce8 <TIM_OC2_SetConfig+0xc8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a1c      	ldr	r2, [pc, #112]	@ (800bd44 <TIM_OC2_SetConfig+0x124>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d007      	beq.n	800bce8 <TIM_OC2_SetConfig+0xc8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a1b      	ldr	r2, [pc, #108]	@ (800bd48 <TIM_OC2_SetConfig+0x128>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d003      	beq.n	800bce8 <TIM_OC2_SetConfig+0xc8>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd4c <TIM_OC2_SetConfig+0x12c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d113      	bne.n	800bd10 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	621a      	str	r2, [r3, #32]
}
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	40012c00 	.word	0x40012c00
 800bd3c:	50012c00 	.word	0x50012c00
 800bd40:	40013400 	.word	0x40013400
 800bd44:	50013400 	.word	0x50013400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	50014000 	.word	0x50014000

0800bd50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0303 	bic.w	r3, r3, #3
 800bd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a2d      	ldr	r2, [pc, #180]	@ (800be64 <TIM_OC3_SetConfig+0x114>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00b      	beq.n	800bdca <TIM_OC3_SetConfig+0x7a>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a2c      	ldr	r2, [pc, #176]	@ (800be68 <TIM_OC3_SetConfig+0x118>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d007      	beq.n	800bdca <TIM_OC3_SetConfig+0x7a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a2b      	ldr	r2, [pc, #172]	@ (800be6c <TIM_OC3_SetConfig+0x11c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d003      	beq.n	800bdca <TIM_OC3_SetConfig+0x7a>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a2a      	ldr	r2, [pc, #168]	@ (800be70 <TIM_OC3_SetConfig+0x120>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d10d      	bne.n	800bde6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bde4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a1e      	ldr	r2, [pc, #120]	@ (800be64 <TIM_OC3_SetConfig+0x114>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d013      	beq.n	800be16 <TIM_OC3_SetConfig+0xc6>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	@ (800be68 <TIM_OC3_SetConfig+0x118>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00f      	beq.n	800be16 <TIM_OC3_SetConfig+0xc6>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a1c      	ldr	r2, [pc, #112]	@ (800be6c <TIM_OC3_SetConfig+0x11c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00b      	beq.n	800be16 <TIM_OC3_SetConfig+0xc6>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a1b      	ldr	r2, [pc, #108]	@ (800be70 <TIM_OC3_SetConfig+0x120>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d007      	beq.n	800be16 <TIM_OC3_SetConfig+0xc6>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a1a      	ldr	r2, [pc, #104]	@ (800be74 <TIM_OC3_SetConfig+0x124>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_OC3_SetConfig+0xc6>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a19      	ldr	r2, [pc, #100]	@ (800be78 <TIM_OC3_SetConfig+0x128>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d113      	bne.n	800be3e <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	693a      	ldr	r2, [r7, #16]
 800be42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	621a      	str	r2, [r3, #32]
}
 800be58:	bf00      	nop
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	40012c00 	.word	0x40012c00
 800be68:	50012c00 	.word	0x50012c00
 800be6c:	40013400 	.word	0x40013400
 800be70:	50013400 	.word	0x50013400
 800be74:	40014000 	.word	0x40014000
 800be78:	50014000 	.word	0x50014000

0800be7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800beaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800beca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	031b      	lsls	r3, r3, #12
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a2e      	ldr	r2, [pc, #184]	@ (800bf94 <TIM_OC4_SetConfig+0x118>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00b      	beq.n	800bef8 <TIM_OC4_SetConfig+0x7c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a2d      	ldr	r2, [pc, #180]	@ (800bf98 <TIM_OC4_SetConfig+0x11c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <TIM_OC4_SetConfig+0x7c>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a2c      	ldr	r2, [pc, #176]	@ (800bf9c <TIM_OC4_SetConfig+0x120>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_OC4_SetConfig+0x7c>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a2b      	ldr	r2, [pc, #172]	@ (800bfa0 <TIM_OC4_SetConfig+0x124>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d10d      	bne.n	800bf14 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800befe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	031b      	lsls	r3, r3, #12
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a1f      	ldr	r2, [pc, #124]	@ (800bf94 <TIM_OC4_SetConfig+0x118>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d013      	beq.n	800bf44 <TIM_OC4_SetConfig+0xc8>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf98 <TIM_OC4_SetConfig+0x11c>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d00f      	beq.n	800bf44 <TIM_OC4_SetConfig+0xc8>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a1d      	ldr	r2, [pc, #116]	@ (800bf9c <TIM_OC4_SetConfig+0x120>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d00b      	beq.n	800bf44 <TIM_OC4_SetConfig+0xc8>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa0 <TIM_OC4_SetConfig+0x124>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d007      	beq.n	800bf44 <TIM_OC4_SetConfig+0xc8>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a1b      	ldr	r2, [pc, #108]	@ (800bfa4 <TIM_OC4_SetConfig+0x128>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d003      	beq.n	800bf44 <TIM_OC4_SetConfig+0xc8>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a1a      	ldr	r2, [pc, #104]	@ (800bfa8 <TIM_OC4_SetConfig+0x12c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d113      	bne.n	800bf6c <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	019b      	lsls	r3, r3, #6
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	019b      	lsls	r3, r3, #6
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	621a      	str	r2, [r3, #32]
}
 800bf86:	bf00      	nop
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	40012c00 	.word	0x40012c00
 800bf98:	50012c00 	.word	0x50012c00
 800bf9c:	40013400 	.word	0x40013400
 800bfa0:	50013400 	.word	0x50013400
 800bfa4:	40014000 	.word	0x40014000
 800bfa8:	50014000 	.word	0x50014000

0800bfac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	041b      	lsls	r3, r3, #16
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a19      	ldr	r2, [pc, #100]	@ (800c068 <TIM_OC5_SetConfig+0xbc>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d013      	beq.n	800c02e <TIM_OC5_SetConfig+0x82>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a18      	ldr	r2, [pc, #96]	@ (800c06c <TIM_OC5_SetConfig+0xc0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00f      	beq.n	800c02e <TIM_OC5_SetConfig+0x82>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a17      	ldr	r2, [pc, #92]	@ (800c070 <TIM_OC5_SetConfig+0xc4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d00b      	beq.n	800c02e <TIM_OC5_SetConfig+0x82>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a16      	ldr	r2, [pc, #88]	@ (800c074 <TIM_OC5_SetConfig+0xc8>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d007      	beq.n	800c02e <TIM_OC5_SetConfig+0x82>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a15      	ldr	r2, [pc, #84]	@ (800c078 <TIM_OC5_SetConfig+0xcc>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d003      	beq.n	800c02e <TIM_OC5_SetConfig+0x82>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a14      	ldr	r2, [pc, #80]	@ (800c07c <TIM_OC5_SetConfig+0xd0>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d109      	bne.n	800c042 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	4313      	orrs	r3, r2
 800c040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	621a      	str	r2, [r3, #32]
}
 800c05c:	bf00      	nop
 800c05e:	371c      	adds	r7, #28
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	40012c00 	.word	0x40012c00
 800c06c:	50012c00 	.word	0x50012c00
 800c070:	40013400 	.word	0x40013400
 800c074:	50013400 	.word	0x50013400
 800c078:	40014000 	.word	0x40014000
 800c07c:	50014000 	.word	0x50014000

0800c080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	021b      	lsls	r3, r3, #8
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	051b      	lsls	r3, r3, #20
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c140 <TIM_OC6_SetConfig+0xc0>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d013      	beq.n	800c104 <TIM_OC6_SetConfig+0x84>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a19      	ldr	r2, [pc, #100]	@ (800c144 <TIM_OC6_SetConfig+0xc4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00f      	beq.n	800c104 <TIM_OC6_SetConfig+0x84>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a18      	ldr	r2, [pc, #96]	@ (800c148 <TIM_OC6_SetConfig+0xc8>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00b      	beq.n	800c104 <TIM_OC6_SetConfig+0x84>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a17      	ldr	r2, [pc, #92]	@ (800c14c <TIM_OC6_SetConfig+0xcc>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d007      	beq.n	800c104 <TIM_OC6_SetConfig+0x84>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a16      	ldr	r2, [pc, #88]	@ (800c150 <TIM_OC6_SetConfig+0xd0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d003      	beq.n	800c104 <TIM_OC6_SetConfig+0x84>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a15      	ldr	r2, [pc, #84]	@ (800c154 <TIM_OC6_SetConfig+0xd4>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d109      	bne.n	800c118 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c10a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	029b      	lsls	r3, r3, #10
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	4313      	orrs	r3, r2
 800c116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	621a      	str	r2, [r3, #32]
}
 800c132:	bf00      	nop
 800c134:	371c      	adds	r7, #28
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	40012c00 	.word	0x40012c00
 800c144:	50012c00 	.word	0x50012c00
 800c148:	40013400 	.word	0x40013400
 800c14c:	50013400 	.word	0x50013400
 800c150:	40014000 	.word	0x40014000
 800c154:	50014000 	.word	0x50014000

0800c158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c158:	b480      	push	{r7}
 800c15a:	b087      	sub	sp, #28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	f023 0201 	bic.w	r2, r3, #1
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f023 030a 	bic.w	r3, r3, #10
 800c194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	621a      	str	r2, [r3, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b087      	sub	sp, #28
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	f023 0210 	bic.w	r2, r3, #16
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	031b      	lsls	r3, r3, #12
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	697a      	ldr	r2, [r7, #20]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	621a      	str	r2, [r3, #32]
}
 800c20a:	bf00      	nop
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c22c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	f043 0307 	orr.w	r3, r3, #7
 800c23c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	609a      	str	r2, [r3, #8]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c250:	b480      	push	{r7}
 800c252:	b087      	sub	sp, #28
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c26a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	021a      	lsls	r2, r3, #8
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	431a      	orrs	r2, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4313      	orrs	r3, r2
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	609a      	str	r2, [r3, #8]
}
 800c284:	bf00      	nop
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f003 031f 	and.w	r3, r3, #31
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6a1a      	ldr	r2, [r3, #32]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	43db      	mvns	r3, r3
 800c2b2:	401a      	ands	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a1a      	ldr	r2, [r3, #32]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	f003 031f 	and.w	r3, r3, #31
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	621a      	str	r2, [r3, #32]
}
 800c2ce:	bf00      	nop
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
	...

0800c2dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d101      	bne.n	800c2f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	e0a1      	b.n	800c438 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a4a      	ldr	r2, [pc, #296]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00e      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a49      	ldr	r2, [pc, #292]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d009      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a47      	ldr	r2, [pc, #284]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d004      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a46      	ldr	r2, [pc, #280]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d108      	bne.n	800c34e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c342:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a34      	ldr	r2, [pc, #208]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d04a      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a33      	ldr	r2, [pc, #204]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d045      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c388:	d040      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c392:	d03b      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a2e      	ldr	r2, [pc, #184]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d036      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a2d      	ldr	r2, [pc, #180]	@ (800c458 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d031      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a2b      	ldr	r2, [pc, #172]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d02c      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a2a      	ldr	r2, [pc, #168]	@ (800c460 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d027      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a28      	ldr	r2, [pc, #160]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d022      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a27      	ldr	r2, [pc, #156]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d01d      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d018      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a1c      	ldr	r2, [pc, #112]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d013      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a20      	ldr	r2, [pc, #128]	@ (800c46c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d00e      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a1f      	ldr	r2, [pc, #124]	@ (800c470 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d009      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c474 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d004      	beq.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a1c      	ldr	r2, [pc, #112]	@ (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d10c      	bne.n	800c426 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	40012c00 	.word	0x40012c00
 800c448:	50012c00 	.word	0x50012c00
 800c44c:	40013400 	.word	0x40013400
 800c450:	50013400 	.word	0x50013400
 800c454:	40000400 	.word	0x40000400
 800c458:	50000400 	.word	0x50000400
 800c45c:	40000800 	.word	0x40000800
 800c460:	50000800 	.word	0x50000800
 800c464:	40000c00 	.word	0x40000c00
 800c468:	50000c00 	.word	0x50000c00
 800c46c:	40001800 	.word	0x40001800
 800c470:	50001800 	.word	0x50001800
 800c474:	40014000 	.word	0x40014000
 800c478:	50014000 	.word	0x50014000

0800c47c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d101      	bne.n	800c51a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e042      	b.n	800c5a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7f8 fa99 	bl	8004a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2224      	movs	r2, #36	@ 0x24
 800c536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fb4c 	bl	800cbf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f99b 	bl	800c894 <UART_SetConfig>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b01      	cmp	r3, #1
 800c562:	d101      	bne.n	800c568 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e01b      	b.n	800c5a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689a      	ldr	r2, [r3, #8]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0201 	orr.w	r2, r2, #1
 800c596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fbcb 	bl	800cd34 <UART_CheckIdleState>
 800c59e:	4603      	mov	r3, r0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	@ 0x28
 800c5ac:	af02      	add	r7, sp, #8
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5be:	2b20      	cmp	r3, #32
 800c5c0:	f040 808b 	bne.w	800c6da <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <HAL_UART_Transmit+0x28>
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e083      	b.n	800c6dc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5de:	2b80      	cmp	r3, #128	@ 0x80
 800c5e0:	d107      	bne.n	800c5f2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c5f0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2221      	movs	r2, #33	@ 0x21
 800c5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c602:	f7f8 fe5f 	bl	80052c4 <HAL_GetTick>
 800c606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	88fa      	ldrh	r2, [r7, #6]
 800c60c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	88fa      	ldrh	r2, [r7, #6]
 800c614:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c620:	d108      	bne.n	800c634 <HAL_UART_Transmit+0x8c>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d104      	bne.n	800c634 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	61bb      	str	r3, [r7, #24]
 800c632:	e003      	b.n	800c63c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c638:	2300      	movs	r3, #0
 800c63a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c63c:	e030      	b.n	800c6a0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2200      	movs	r2, #0
 800c646:	2180      	movs	r1, #128	@ 0x80
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f000 fc1d 	bl	800ce88 <UART_WaitOnFlagUntilTimeout>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2220      	movs	r2, #32
 800c658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e03d      	b.n	800c6dc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10b      	bne.n	800c67e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c674:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	3302      	adds	r3, #2
 800c67a:	61bb      	str	r3, [r7, #24]
 800c67c:	e007      	b.n	800c68e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	3301      	adds	r3, #1
 800c68c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c694:	b29b      	uxth	r3, r3
 800c696:	3b01      	subs	r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1c8      	bne.n	800c63e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2140      	movs	r1, #64	@ 0x40
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 fbe6 	bl	800ce88 <UART_WaitOnFlagUntilTimeout>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e006      	b.n	800c6dc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2220      	movs	r2, #32
 800c6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e000      	b.n	800c6dc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800c6da:	2302      	movs	r3, #2
  }
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3720      	adds	r7, #32
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	@ 0x28
 800c6e8:	af02      	add	r7, sp, #8
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6fa:	2b20      	cmp	r3, #32
 800c6fc:	f040 80c4 	bne.w	800c888 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <HAL_UART_Receive+0x28>
 800c706:	88fb      	ldrh	r3, [r7, #6]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e0bc      	b.n	800c88a <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c71a:	2b40      	cmp	r3, #64	@ 0x40
 800c71c:	d107      	bne.n	800c72e <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689a      	ldr	r2, [r3, #8]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c72c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2222      	movs	r2, #34	@ 0x22
 800c73a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c744:	f7f8 fdbe 	bl	80052c4 <HAL_GetTick>
 800c748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	88fa      	ldrh	r2, [r7, #6]
 800c74e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	88fa      	ldrh	r2, [r7, #6]
 800c756:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c762:	d10e      	bne.n	800c782 <HAL_UART_Receive+0x9e>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d105      	bne.n	800c778 <HAL_UART_Receive+0x94>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c772:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c776:	e02d      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	22ff      	movs	r2, #255	@ 0xff
 800c77c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c780:	e028      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10d      	bne.n	800c7a6 <HAL_UART_Receive+0xc2>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d104      	bne.n	800c79c <HAL_UART_Receive+0xb8>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	22ff      	movs	r2, #255	@ 0xff
 800c796:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c79a:	e01b      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	227f      	movs	r2, #127	@ 0x7f
 800c7a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7a4:	e016      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7ae:	d10d      	bne.n	800c7cc <HAL_UART_Receive+0xe8>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d104      	bne.n	800c7c2 <HAL_UART_Receive+0xde>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	227f      	movs	r2, #127	@ 0x7f
 800c7bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7c0:	e008      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	223f      	movs	r2, #63	@ 0x3f
 800c7c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7ca:	e003      	b.n	800c7d4 <HAL_UART_Receive+0xf0>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7e4:	d108      	bne.n	800c7f8 <HAL_UART_Receive+0x114>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d104      	bne.n	800c7f8 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	61bb      	str	r3, [r7, #24]
 800c7f6:	e003      	b.n	800c800 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c800:	e036      	b.n	800c870 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2200      	movs	r2, #0
 800c80a:	2120      	movs	r1, #32
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 fb3b 	bl	800ce88 <UART_WaitOnFlagUntilTimeout>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d005      	beq.n	800c824 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e032      	b.n	800c88a <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10c      	bne.n	800c844 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c830:	b29a      	uxth	r2, r3
 800c832:	8a7b      	ldrh	r3, [r7, #18]
 800c834:	4013      	ands	r3, r2
 800c836:	b29a      	uxth	r2, r3
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	3302      	adds	r3, #2
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	e00c      	b.n	800c85e <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	8a7b      	ldrh	r3, [r7, #18]
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4013      	ands	r3, r2
 800c852:	b2da      	uxtb	r2, r3
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	3301      	adds	r3, #1
 800c85c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c864:	b29b      	uxth	r3, r3
 800c866:	3b01      	subs	r3, #1
 800c868:	b29a      	uxth	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c876:	b29b      	uxth	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1c2      	bne.n	800c802 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2220      	movs	r2, #32
 800c880:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	e000      	b.n	800c88a <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800c888:	2302      	movs	r3, #2
  }
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3720      	adds	r7, #32
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
	...

0800c894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c898:	b094      	sub	sp, #80	@ 0x50
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	4b83      	ldr	r3, [pc, #524]	@ (800cab8 <UART_SetConfig+0x224>)
 800c8aa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ae:	689a      	ldr	r2, [r3, #8]
 800c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	69db      	ldr	r3, [r3, #28]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	497c      	ldr	r1, [pc, #496]	@ (800cabc <UART_SetConfig+0x228>)
 800c8cc:	4019      	ands	r1, r3
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d4:	430b      	orrs	r3, r1
 800c8d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e4:	68d9      	ldr	r1, [r3, #12]
 800c8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	ea40 0301 	orr.w	r3, r0, r1
 800c8ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	4b6f      	ldr	r3, [pc, #444]	@ (800cab8 <UART_SetConfig+0x224>)
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d009      	beq.n	800c914 <UART_SetConfig+0x80>
 800c900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	4b6e      	ldr	r3, [pc, #440]	@ (800cac0 <UART_SetConfig+0x22c>)
 800c906:	429a      	cmp	r2, r3
 800c908:	d004      	beq.n	800c914 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90c:	6a1a      	ldr	r2, [r3, #32]
 800c90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c910:	4313      	orrs	r3, r2
 800c912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c91e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c928:	430b      	orrs	r3, r1
 800c92a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c932:	f023 000f 	bic.w	r0, r3, #15
 800c936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c938:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	ea40 0301 	orr.w	r3, r0, r1
 800c942:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	4b5e      	ldr	r3, [pc, #376]	@ (800cac4 <UART_SetConfig+0x230>)
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d102      	bne.n	800c954 <UART_SetConfig+0xc0>
 800c94e:	2301      	movs	r3, #1
 800c950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c952:	e032      	b.n	800c9ba <UART_SetConfig+0x126>
 800c954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4b5b      	ldr	r3, [pc, #364]	@ (800cac8 <UART_SetConfig+0x234>)
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d102      	bne.n	800c964 <UART_SetConfig+0xd0>
 800c95e:	2302      	movs	r3, #2
 800c960:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c962:	e02a      	b.n	800c9ba <UART_SetConfig+0x126>
 800c964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	4b58      	ldr	r3, [pc, #352]	@ (800cacc <UART_SetConfig+0x238>)
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d102      	bne.n	800c974 <UART_SetConfig+0xe0>
 800c96e:	2304      	movs	r3, #4
 800c970:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c972:	e022      	b.n	800c9ba <UART_SetConfig+0x126>
 800c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	4b55      	ldr	r3, [pc, #340]	@ (800cad0 <UART_SetConfig+0x23c>)
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d102      	bne.n	800c984 <UART_SetConfig+0xf0>
 800c97e:	2308      	movs	r3, #8
 800c980:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c982:	e01a      	b.n	800c9ba <UART_SetConfig+0x126>
 800c984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	4b52      	ldr	r3, [pc, #328]	@ (800cad4 <UART_SetConfig+0x240>)
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d102      	bne.n	800c994 <UART_SetConfig+0x100>
 800c98e:	2310      	movs	r3, #16
 800c990:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c992:	e012      	b.n	800c9ba <UART_SetConfig+0x126>
 800c994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	4b4f      	ldr	r3, [pc, #316]	@ (800cad8 <UART_SetConfig+0x244>)
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d102      	bne.n	800c9a4 <UART_SetConfig+0x110>
 800c99e:	2320      	movs	r3, #32
 800c9a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9a2:	e00a      	b.n	800c9ba <UART_SetConfig+0x126>
 800c9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	4b43      	ldr	r3, [pc, #268]	@ (800cab8 <UART_SetConfig+0x224>)
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d103      	bne.n	800c9b6 <UART_SetConfig+0x122>
 800c9ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9b4:	e001      	b.n	800c9ba <UART_SetConfig+0x126>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4b3e      	ldr	r3, [pc, #248]	@ (800cab8 <UART_SetConfig+0x224>)
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d005      	beq.n	800c9d0 <UART_SetConfig+0x13c>
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	4b3d      	ldr	r3, [pc, #244]	@ (800cac0 <UART_SetConfig+0x22c>)
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	f040 8088 	bne.w	800cae0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	623b      	str	r3, [r7, #32]
 800c9d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c9dc:	f7fb ff72 	bl	80088c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c9e0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 80eb 	beq.w	800cbc0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ee:	4a3b      	ldr	r2, [pc, #236]	@ (800cadc <UART_SetConfig+0x248>)
 800c9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9fc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d305      	bcc.n	800ca1a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d903      	bls.n	800ca22 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ca20:	e048      	b.n	800cab4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca24:	2200      	movs	r2, #0
 800ca26:	61bb      	str	r3, [r7, #24]
 800ca28:	61fa      	str	r2, [r7, #28]
 800ca2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2e:	4a2b      	ldr	r2, [pc, #172]	@ (800cadc <UART_SetConfig+0x248>)
 800ca30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	2200      	movs	r2, #0
 800ca38:	613b      	str	r3, [r7, #16]
 800ca3a:	617a      	str	r2, [r7, #20]
 800ca3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca44:	f7f4 f934 	bl	8000cb0 <__aeabi_uldivmod>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	4619      	mov	r1, r3
 800ca50:	f04f 0200 	mov.w	r2, #0
 800ca54:	f04f 0300 	mov.w	r3, #0
 800ca58:	020b      	lsls	r3, r1, #8
 800ca5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca5e:	0202      	lsls	r2, r0, #8
 800ca60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca62:	6849      	ldr	r1, [r1, #4]
 800ca64:	0849      	lsrs	r1, r1, #1
 800ca66:	2000      	movs	r0, #0
 800ca68:	460c      	mov	r4, r1
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	eb12 0804 	adds.w	r8, r2, r4
 800ca70:	eb43 0905 	adc.w	r9, r3, r5
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	60bb      	str	r3, [r7, #8]
 800ca7c:	60fa      	str	r2, [r7, #12]
 800ca7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f7f4 f913 	bl	8000cb0 <__aeabi_uldivmod>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4613      	mov	r3, r2
 800ca90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca98:	d308      	bcc.n	800caac <UART_SetConfig+0x218>
 800ca9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caa0:	d204      	bcs.n	800caac <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800caa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caa8:	60da      	str	r2, [r3, #12]
 800caaa:	e003      	b.n	800cab4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800cab2:	e085      	b.n	800cbc0 <UART_SetConfig+0x32c>
 800cab4:	e084      	b.n	800cbc0 <UART_SetConfig+0x32c>
 800cab6:	bf00      	nop
 800cab8:	44002400 	.word	0x44002400
 800cabc:	cfff69f3 	.word	0xcfff69f3
 800cac0:	54002400 	.word	0x54002400
 800cac4:	40013800 	.word	0x40013800
 800cac8:	40004400 	.word	0x40004400
 800cacc:	40004800 	.word	0x40004800
 800cad0:	40004c00 	.word	0x40004c00
 800cad4:	40005000 	.word	0x40005000
 800cad8:	40006400 	.word	0x40006400
 800cadc:	080144e0 	.word	0x080144e0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cae8:	d13c      	bne.n	800cb64 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800caea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caec:	2200      	movs	r2, #0
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caf6:	f7fb fee5 	bl	80088c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cafa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cafc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d05e      	beq.n	800cbc0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb06:	4a39      	ldr	r2, [pc, #228]	@ (800cbec <UART_SetConfig+0x358>)
 800cb08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb10:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb14:	005a      	lsls	r2, r3, #1
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	085b      	lsrs	r3, r3, #1
 800cb1c:	441a      	add	r2, r3
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb2a:	2b0f      	cmp	r3, #15
 800cb2c:	d916      	bls.n	800cb5c <UART_SetConfig+0x2c8>
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb34:	d212      	bcs.n	800cb5c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f023 030f 	bic.w	r3, r3, #15
 800cb3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb42:	085b      	lsrs	r3, r3, #1
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	f003 0307 	and.w	r3, r3, #7
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cb58:	60da      	str	r2, [r3, #12]
 800cb5a:	e031      	b.n	800cbc0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cb62:	e02d      	b.n	800cbc0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cb64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb66:	2200      	movs	r2, #0
 800cb68:	469a      	mov	sl, r3
 800cb6a:	4693      	mov	fp, r2
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	4659      	mov	r1, fp
 800cb70:	f7fb fea8 	bl	80088c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb74:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800cb76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d021      	beq.n	800cbc0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb80:	4a1a      	ldr	r2, [pc, #104]	@ (800cbec <UART_SetConfig+0x358>)
 800cb82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb86:	461a      	mov	r2, r3
 800cb88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	441a      	add	r2, r3
 800cb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba2:	2b0f      	cmp	r3, #15
 800cba4:	d909      	bls.n	800cbba <UART_SetConfig+0x326>
 800cba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbac:	d205      	bcs.n	800cbba <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	60da      	str	r2, [r3, #12]
 800cbb8:	e002      	b.n	800cbc0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	2200      	movs	r2, #0
 800cbda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cbdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3750      	adds	r7, #80	@ 0x50
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbea:	bf00      	nop
 800cbec:	080144e0 	.word	0x080144e0

0800cbf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbfc:	f003 0308 	and.w	r3, r3, #8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00a      	beq.n	800cc1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1e:	f003 0301 	and.w	r3, r3, #1
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	430a      	orrs	r2, r1
 800cc3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00a      	beq.n	800cc5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	430a      	orrs	r2, r1
 800cc5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc62:	f003 0304 	and.w	r3, r3, #4
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00a      	beq.n	800cc80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	430a      	orrs	r2, r1
 800cc7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc84:	f003 0310 	and.w	r3, r3, #16
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00a      	beq.n	800cca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cca6:	f003 0320 	and.w	r3, r3, #32
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00a      	beq.n	800ccc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	430a      	orrs	r2, r1
 800ccc2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01a      	beq.n	800cd06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	430a      	orrs	r2, r1
 800cce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccee:	d10a      	bne.n	800cd06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	430a      	orrs	r2, r1
 800cd04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	430a      	orrs	r2, r1
 800cd26:	605a      	str	r2, [r3, #4]
  }
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b098      	sub	sp, #96	@ 0x60
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd44:	f7f8 fabe 	bl	80052c4 <HAL_GetTick>
 800cd48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 0308 	and.w	r3, r3, #8
 800cd54:	2b08      	cmp	r3, #8
 800cd56:	d12f      	bne.n	800cdb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd60:	2200      	movs	r2, #0
 800cd62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f88e 	bl	800ce88 <UART_WaitOnFlagUntilTimeout>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d022      	beq.n	800cdb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7a:	e853 3f00 	ldrex	r3, [r3]
 800cd7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd86:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd90:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd98:	e841 2300 	strex	r3, r2, [r1]
 800cd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e6      	bne.n	800cd72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2220      	movs	r2, #32
 800cda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e063      	b.n	800ce80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0304 	and.w	r3, r3, #4
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d149      	bne.n	800ce5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f857 	bl	800ce88 <UART_WaitOnFlagUntilTimeout>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d03c      	beq.n	800ce5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	623b      	str	r3, [r7, #32]
   return(result);
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce06:	e841 2300 	strex	r3, r2, [r1]
 800ce0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e6      	bne.n	800cde0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3308      	adds	r3, #8
 800ce18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	e853 3f00 	ldrex	r3, [r3]
 800ce20:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f023 0301 	bic.w	r3, r3, #1
 800ce28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3308      	adds	r3, #8
 800ce30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce32:	61fa      	str	r2, [r7, #28]
 800ce34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce36:	69b9      	ldr	r1, [r7, #24]
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	e841 2300 	strex	r3, r2, [r1]
 800ce3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e5      	bne.n	800ce12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e012      	b.n	800ce80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3758      	adds	r7, #88	@ 0x58
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	4613      	mov	r3, r2
 800ce96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce98:	e04f      	b.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea0:	d04b      	beq.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cea2:	f7f8 fa0f 	bl	80052c4 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	69ba      	ldr	r2, [r7, #24]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d302      	bcc.n	800ceb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e04e      	b.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 0304 	and.w	r3, r3, #4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d037      	beq.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b80      	cmp	r3, #128	@ 0x80
 800cece:	d034      	beq.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2b40      	cmp	r3, #64	@ 0x40
 800ced4:	d031      	beq.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	f003 0308 	and.w	r3, r3, #8
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	d110      	bne.n	800cf06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2208      	movs	r2, #8
 800ceea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f000 f838 	bl	800cf62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2208      	movs	r2, #8
 800cef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e029      	b.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	69db      	ldr	r3, [r3, #28]
 800cf0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf14:	d111      	bne.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f81e 	bl	800cf62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e00f      	b.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69da      	ldr	r2, [r3, #28]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	4013      	ands	r3, r2
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	bf0c      	ite	eq
 800cf4a:	2301      	moveq	r3, #1
 800cf4c:	2300      	movne	r3, #0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	461a      	mov	r2, r3
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d0a0      	beq.n	800ce9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b095      	sub	sp, #84	@ 0x54
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf72:	e853 3f00 	ldrex	r3, [r3]
 800cf76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf88:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf90:	e841 2300 	strex	r3, r2, [r1]
 800cf94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e6      	bne.n	800cf6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfb2:	f023 0301 	bic.w	r3, r3, #1
 800cfb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfc8:	e841 2300 	strex	r3, r2, [r1]
 800cfcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1e3      	bne.n	800cf9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d118      	bne.n	800d00e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	f023 0310 	bic.w	r3, r3, #16
 800cff0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cffa:	61bb      	str	r3, [r7, #24]
 800cffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffe:	6979      	ldr	r1, [r7, #20]
 800d000:	69ba      	ldr	r2, [r7, #24]
 800d002:	e841 2300 	strex	r3, r2, [r1]
 800d006:	613b      	str	r3, [r7, #16]
   return(result);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1e6      	bne.n	800cfdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2220      	movs	r2, #32
 800d012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d022:	bf00      	nop
 800d024:	3754      	adds	r7, #84	@ 0x54
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d101      	bne.n	800d044 <HAL_UARTEx_DisableFifoMode+0x16>
 800d040:	2302      	movs	r3, #2
 800d042:	e027      	b.n	800d094 <HAL_UARTEx_DisableFifoMode+0x66>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2224      	movs	r2, #36	@ 0x24
 800d050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f022 0201 	bic.w	r2, r2, #1
 800d06a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d072:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d101      	bne.n	800d0b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	e02d      	b.n	800d114 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2224      	movs	r2, #36	@ 0x24
 800d0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f022 0201 	bic.w	r2, r2, #1
 800d0de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	430a      	orrs	r2, r1
 800d0f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f84f 	bl	800d198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2220      	movs	r2, #32
 800d106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d130:	2302      	movs	r3, #2
 800d132:	e02d      	b.n	800d190 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2224      	movs	r2, #36	@ 0x24
 800d140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f022 0201 	bic.w	r2, r2, #1
 800d15a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f811 	bl	800d198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2220      	movs	r2, #32
 800d182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d108      	bne.n	800d1ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1b8:	e031      	b.n	800d21e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1ba:	2308      	movs	r3, #8
 800d1bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1be:	2308      	movs	r3, #8
 800d1c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	0e5b      	lsrs	r3, r3, #25
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	f003 0307 	and.w	r3, r3, #7
 800d1d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	0f5b      	lsrs	r3, r3, #29
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	f003 0307 	and.w	r3, r3, #7
 800d1e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	7b3a      	ldrb	r2, [r7, #12]
 800d1e6:	4911      	ldr	r1, [pc, #68]	@ (800d22c <UARTEx_SetNbDataToProcess+0x94>)
 800d1e8:	5c8a      	ldrb	r2, [r1, r2]
 800d1ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1ee:	7b3a      	ldrb	r2, [r7, #12]
 800d1f0:	490f      	ldr	r1, [pc, #60]	@ (800d230 <UARTEx_SetNbDataToProcess+0x98>)
 800d1f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	7b7a      	ldrb	r2, [r7, #13]
 800d204:	4909      	ldr	r1, [pc, #36]	@ (800d22c <UARTEx_SetNbDataToProcess+0x94>)
 800d206:	5c8a      	ldrb	r2, [r1, r2]
 800d208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d20c:	7b7a      	ldrb	r2, [r7, #13]
 800d20e:	4908      	ldr	r1, [pc, #32]	@ (800d230 <UARTEx_SetNbDataToProcess+0x98>)
 800d210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d212:	fb93 f3f2 	sdiv	r3, r3, r2
 800d216:	b29a      	uxth	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d21e:	bf00      	nop
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	080144f8 	.word	0x080144f8
 800d230:	08014500 	.word	0x08014500

0800d234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d23c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	43db      	mvns	r3, r3
 800d24a:	401a      	ands	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	460b      	mov	r3, r1
 800d268:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800d26a:	78fb      	ldrb	r3, [r7, #3]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d106      	bne.n	800d27e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d274:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	641a      	str	r2, [r3, #64]	@ 0x40
 800d27c:	e00b      	b.n	800d296 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800d27e:	78fb      	ldrb	r3, [r7, #3]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d106      	bne.n	800d292 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d288:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	641a      	str	r2, [r3, #64]	@ 0x40
 800d290:	e001      	b.n	800d296 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	f107 001c 	add.w	r0, r7, #28
 800d2b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2c0:	f023 0201 	bic.w	r2, r3, #1
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7ff ffc7 	bl	800d25e <USB_SetCurrentMode>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2e6:	b004      	add	sp, #16
 800d2e8:	4770      	bx	lr

0800d2ea <atoi>:
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	f000 b87d 	b.w	800d3ec <strtol>
	...

0800d2f4 <_strtol_l.constprop.0>:
 800d2f4:	2b24      	cmp	r3, #36	@ 0x24
 800d2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2fa:	4686      	mov	lr, r0
 800d2fc:	4690      	mov	r8, r2
 800d2fe:	d801      	bhi.n	800d304 <_strtol_l.constprop.0+0x10>
 800d300:	2b01      	cmp	r3, #1
 800d302:	d106      	bne.n	800d312 <_strtol_l.constprop.0+0x1e>
 800d304:	f001 f860 	bl	800e3c8 <__errno>
 800d308:	2316      	movs	r3, #22
 800d30a:	6003      	str	r3, [r0, #0]
 800d30c:	2000      	movs	r0, #0
 800d30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d312:	460d      	mov	r5, r1
 800d314:	4833      	ldr	r0, [pc, #204]	@ (800d3e4 <_strtol_l.constprop.0+0xf0>)
 800d316:	462a      	mov	r2, r5
 800d318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d31c:	5d06      	ldrb	r6, [r0, r4]
 800d31e:	f016 0608 	ands.w	r6, r6, #8
 800d322:	d1f8      	bne.n	800d316 <_strtol_l.constprop.0+0x22>
 800d324:	2c2d      	cmp	r4, #45	@ 0x2d
 800d326:	d12d      	bne.n	800d384 <_strtol_l.constprop.0+0x90>
 800d328:	782c      	ldrb	r4, [r5, #0]
 800d32a:	2601      	movs	r6, #1
 800d32c:	1c95      	adds	r5, r2, #2
 800d32e:	f033 0210 	bics.w	r2, r3, #16
 800d332:	d109      	bne.n	800d348 <_strtol_l.constprop.0+0x54>
 800d334:	2c30      	cmp	r4, #48	@ 0x30
 800d336:	d12a      	bne.n	800d38e <_strtol_l.constprop.0+0x9a>
 800d338:	782a      	ldrb	r2, [r5, #0]
 800d33a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d33e:	2a58      	cmp	r2, #88	@ 0x58
 800d340:	d125      	bne.n	800d38e <_strtol_l.constprop.0+0x9a>
 800d342:	786c      	ldrb	r4, [r5, #1]
 800d344:	2310      	movs	r3, #16
 800d346:	3502      	adds	r5, #2
 800d348:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d34c:	2200      	movs	r2, #0
 800d34e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d352:	4610      	mov	r0, r2
 800d354:	fbbc f9f3 	udiv	r9, ip, r3
 800d358:	fb03 ca19 	mls	sl, r3, r9, ip
 800d35c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d360:	2f09      	cmp	r7, #9
 800d362:	d81b      	bhi.n	800d39c <_strtol_l.constprop.0+0xa8>
 800d364:	463c      	mov	r4, r7
 800d366:	42a3      	cmp	r3, r4
 800d368:	dd27      	ble.n	800d3ba <_strtol_l.constprop.0+0xc6>
 800d36a:	1c57      	adds	r7, r2, #1
 800d36c:	d007      	beq.n	800d37e <_strtol_l.constprop.0+0x8a>
 800d36e:	4581      	cmp	r9, r0
 800d370:	d320      	bcc.n	800d3b4 <_strtol_l.constprop.0+0xc0>
 800d372:	d101      	bne.n	800d378 <_strtol_l.constprop.0+0x84>
 800d374:	45a2      	cmp	sl, r4
 800d376:	db1d      	blt.n	800d3b4 <_strtol_l.constprop.0+0xc0>
 800d378:	fb00 4003 	mla	r0, r0, r3, r4
 800d37c:	2201      	movs	r2, #1
 800d37e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d382:	e7eb      	b.n	800d35c <_strtol_l.constprop.0+0x68>
 800d384:	2c2b      	cmp	r4, #43	@ 0x2b
 800d386:	bf04      	itt	eq
 800d388:	782c      	ldrbeq	r4, [r5, #0]
 800d38a:	1c95      	addeq	r5, r2, #2
 800d38c:	e7cf      	b.n	800d32e <_strtol_l.constprop.0+0x3a>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1da      	bne.n	800d348 <_strtol_l.constprop.0+0x54>
 800d392:	2c30      	cmp	r4, #48	@ 0x30
 800d394:	bf0c      	ite	eq
 800d396:	2308      	moveq	r3, #8
 800d398:	230a      	movne	r3, #10
 800d39a:	e7d5      	b.n	800d348 <_strtol_l.constprop.0+0x54>
 800d39c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d3a0:	2f19      	cmp	r7, #25
 800d3a2:	d801      	bhi.n	800d3a8 <_strtol_l.constprop.0+0xb4>
 800d3a4:	3c37      	subs	r4, #55	@ 0x37
 800d3a6:	e7de      	b.n	800d366 <_strtol_l.constprop.0+0x72>
 800d3a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d3ac:	2f19      	cmp	r7, #25
 800d3ae:	d804      	bhi.n	800d3ba <_strtol_l.constprop.0+0xc6>
 800d3b0:	3c57      	subs	r4, #87	@ 0x57
 800d3b2:	e7d8      	b.n	800d366 <_strtol_l.constprop.0+0x72>
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	e7e1      	b.n	800d37e <_strtol_l.constprop.0+0x8a>
 800d3ba:	1c53      	adds	r3, r2, #1
 800d3bc:	d108      	bne.n	800d3d0 <_strtol_l.constprop.0+0xdc>
 800d3be:	2322      	movs	r3, #34	@ 0x22
 800d3c0:	4660      	mov	r0, ip
 800d3c2:	f8ce 3000 	str.w	r3, [lr]
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	d0a0      	beq.n	800d30e <_strtol_l.constprop.0+0x1a>
 800d3cc:	1e69      	subs	r1, r5, #1
 800d3ce:	e006      	b.n	800d3de <_strtol_l.constprop.0+0xea>
 800d3d0:	b106      	cbz	r6, 800d3d4 <_strtol_l.constprop.0+0xe0>
 800d3d2:	4240      	negs	r0, r0
 800d3d4:	f1b8 0f00 	cmp.w	r8, #0
 800d3d8:	d099      	beq.n	800d30e <_strtol_l.constprop.0+0x1a>
 800d3da:	2a00      	cmp	r2, #0
 800d3dc:	d1f6      	bne.n	800d3cc <_strtol_l.constprop.0+0xd8>
 800d3de:	f8c8 1000 	str.w	r1, [r8]
 800d3e2:	e794      	b.n	800d30e <_strtol_l.constprop.0+0x1a>
 800d3e4:	08014509 	.word	0x08014509

0800d3e8 <_strtol_r>:
 800d3e8:	f7ff bf84 	b.w	800d2f4 <_strtol_l.constprop.0>

0800d3ec <strtol>:
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	460a      	mov	r2, r1
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4802      	ldr	r0, [pc, #8]	@ (800d3fc <strtol+0x10>)
 800d3f4:	6800      	ldr	r0, [r0, #0]
 800d3f6:	f7ff bf7d 	b.w	800d2f4 <_strtol_l.constprop.0>
 800d3fa:	bf00      	nop
 800d3fc:	20000034 	.word	0x20000034

0800d400 <__cvt>:
 800d400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	ec57 6b10 	vmov	r6, r7, d0
 800d408:	2f00      	cmp	r7, #0
 800d40a:	460c      	mov	r4, r1
 800d40c:	4619      	mov	r1, r3
 800d40e:	463b      	mov	r3, r7
 800d410:	bfb4      	ite	lt
 800d412:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d416:	2300      	movge	r3, #0
 800d418:	4691      	mov	r9, r2
 800d41a:	bfbf      	itttt	lt
 800d41c:	4632      	movlt	r2, r6
 800d41e:	461f      	movlt	r7, r3
 800d420:	232d      	movlt	r3, #45	@ 0x2d
 800d422:	4616      	movlt	r6, r2
 800d424:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d428:	700b      	strb	r3, [r1, #0]
 800d42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d42c:	f023 0820 	bic.w	r8, r3, #32
 800d430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d434:	d005      	beq.n	800d442 <__cvt+0x42>
 800d436:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d43a:	d100      	bne.n	800d43e <__cvt+0x3e>
 800d43c:	3401      	adds	r4, #1
 800d43e:	2102      	movs	r1, #2
 800d440:	e000      	b.n	800d444 <__cvt+0x44>
 800d442:	2103      	movs	r1, #3
 800d444:	ab03      	add	r3, sp, #12
 800d446:	4622      	mov	r2, r4
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	ab02      	add	r3, sp, #8
 800d44c:	ec47 6b10 	vmov	d0, r6, r7
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4653      	mov	r3, sl
 800d454:	f001 f894 	bl	800e580 <_dtoa_r>
 800d458:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d45c:	4605      	mov	r5, r0
 800d45e:	d119      	bne.n	800d494 <__cvt+0x94>
 800d460:	f019 0f01 	tst.w	r9, #1
 800d464:	d00e      	beq.n	800d484 <__cvt+0x84>
 800d466:	eb00 0904 	add.w	r9, r0, r4
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	4630      	mov	r0, r6
 800d470:	4639      	mov	r1, r7
 800d472:	f7f3 fb3d 	bl	8000af0 <__aeabi_dcmpeq>
 800d476:	b108      	cbz	r0, 800d47c <__cvt+0x7c>
 800d478:	f8cd 900c 	str.w	r9, [sp, #12]
 800d47c:	2230      	movs	r2, #48	@ 0x30
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	454b      	cmp	r3, r9
 800d482:	d31e      	bcc.n	800d4c2 <__cvt+0xc2>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4628      	mov	r0, r5
 800d488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d48a:	1b5b      	subs	r3, r3, r5
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	b004      	add	sp, #16
 800d490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d498:	eb00 0904 	add.w	r9, r0, r4
 800d49c:	d1e5      	bne.n	800d46a <__cvt+0x6a>
 800d49e:	7803      	ldrb	r3, [r0, #0]
 800d4a0:	2b30      	cmp	r3, #48	@ 0x30
 800d4a2:	d10a      	bne.n	800d4ba <__cvt+0xba>
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	4639      	mov	r1, r7
 800d4ac:	f7f3 fb20 	bl	8000af0 <__aeabi_dcmpeq>
 800d4b0:	b918      	cbnz	r0, 800d4ba <__cvt+0xba>
 800d4b2:	f1c4 0401 	rsb	r4, r4, #1
 800d4b6:	f8ca 4000 	str.w	r4, [sl]
 800d4ba:	f8da 3000 	ldr.w	r3, [sl]
 800d4be:	4499      	add	r9, r3
 800d4c0:	e7d3      	b.n	800d46a <__cvt+0x6a>
 800d4c2:	1c59      	adds	r1, r3, #1
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	e7d9      	b.n	800d47e <__cvt+0x7e>

0800d4ca <__exponent>:
 800d4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	7002      	strb	r2, [r0, #0]
 800d4d0:	bfba      	itte	lt
 800d4d2:	4249      	neglt	r1, r1
 800d4d4:	232d      	movlt	r3, #45	@ 0x2d
 800d4d6:	232b      	movge	r3, #43	@ 0x2b
 800d4d8:	2909      	cmp	r1, #9
 800d4da:	7043      	strb	r3, [r0, #1]
 800d4dc:	dd28      	ble.n	800d530 <__exponent+0x66>
 800d4de:	f10d 0307 	add.w	r3, sp, #7
 800d4e2:	270a      	movs	r7, #10
 800d4e4:	461d      	mov	r5, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4ee:	fb07 1416 	mls	r4, r7, r6, r1
 800d4f2:	3430      	adds	r4, #48	@ 0x30
 800d4f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	2c63      	cmp	r4, #99	@ 0x63
 800d4fe:	dcf2      	bgt.n	800d4e6 <__exponent+0x1c>
 800d500:	3130      	adds	r1, #48	@ 0x30
 800d502:	1e94      	subs	r4, r2, #2
 800d504:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d508:	1c41      	adds	r1, r0, #1
 800d50a:	4623      	mov	r3, r4
 800d50c:	42ab      	cmp	r3, r5
 800d50e:	d30a      	bcc.n	800d526 <__exponent+0x5c>
 800d510:	f10d 0309 	add.w	r3, sp, #9
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	42ac      	cmp	r4, r5
 800d518:	bf88      	it	hi
 800d51a:	2300      	movhi	r3, #0
 800d51c:	3302      	adds	r3, #2
 800d51e:	4403      	add	r3, r0
 800d520:	1a18      	subs	r0, r3, r0
 800d522:	b003      	add	sp, #12
 800d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d526:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d52a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d52e:	e7ed      	b.n	800d50c <__exponent+0x42>
 800d530:	2330      	movs	r3, #48	@ 0x30
 800d532:	3130      	adds	r1, #48	@ 0x30
 800d534:	7083      	strb	r3, [r0, #2]
 800d536:	1d03      	adds	r3, r0, #4
 800d538:	70c1      	strb	r1, [r0, #3]
 800d53a:	e7f1      	b.n	800d520 <__exponent+0x56>

0800d53c <_printf_float>:
 800d53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d540:	b08d      	sub	sp, #52	@ 0x34
 800d542:	460c      	mov	r4, r1
 800d544:	4616      	mov	r6, r2
 800d546:	461f      	mov	r7, r3
 800d548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d54c:	4605      	mov	r5, r0
 800d54e:	f000 fef1 	bl	800e334 <_localeconv_r>
 800d552:	6803      	ldr	r3, [r0, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	f7f2 fe9e 	bl	8000298 <strlen>
 800d55c:	2300      	movs	r3, #0
 800d55e:	9005      	str	r0, [sp, #20]
 800d560:	930a      	str	r3, [sp, #40]	@ 0x28
 800d562:	f8d8 3000 	ldr.w	r3, [r8]
 800d566:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d56a:	3307      	adds	r3, #7
 800d56c:	f8d4 b000 	ldr.w	fp, [r4]
 800d570:	f023 0307 	bic.w	r3, r3, #7
 800d574:	f103 0208 	add.w	r2, r3, #8
 800d578:	f8c8 2000 	str.w	r2, [r8]
 800d57c:	f04f 32ff 	mov.w	r2, #4294967295
 800d580:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d588:	f8cd 8018 	str.w	r8, [sp, #24]
 800d58c:	9307      	str	r3, [sp, #28]
 800d58e:	4b9d      	ldr	r3, [pc, #628]	@ (800d804 <_printf_float+0x2c8>)
 800d590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d594:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d598:	f7f3 fadc 	bl	8000b54 <__aeabi_dcmpun>
 800d59c:	bb70      	cbnz	r0, 800d5fc <_printf_float+0xc0>
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	4b98      	ldr	r3, [pc, #608]	@ (800d804 <_printf_float+0x2c8>)
 800d5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5a8:	f7f3 fab6 	bl	8000b18 <__aeabi_dcmple>
 800d5ac:	bb30      	cbnz	r0, 800d5fc <_printf_float+0xc0>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 faa5 	bl	8000b04 <__aeabi_dcmplt>
 800d5ba:	b110      	cbz	r0, 800d5c2 <_printf_float+0x86>
 800d5bc:	232d      	movs	r3, #45	@ 0x2d
 800d5be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5c2:	4a91      	ldr	r2, [pc, #580]	@ (800d808 <_printf_float+0x2cc>)
 800d5c4:	4b91      	ldr	r3, [pc, #580]	@ (800d80c <_printf_float+0x2d0>)
 800d5c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5ca:	bf94      	ite	ls
 800d5cc:	4690      	movls	r8, r2
 800d5ce:	4698      	movhi	r8, r3
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	f04f 0900 	mov.w	r9, #0
 800d5d6:	6123      	str	r3, [r4, #16]
 800d5d8:	f02b 0304 	bic.w	r3, fp, #4
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	4633      	mov	r3, r6
 800d5e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	9700      	str	r7, [sp, #0]
 800d5e8:	f000 f9d2 	bl	800d990 <_printf_common>
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	f040 808d 	bne.w	800d70c <_printf_float+0x1d0>
 800d5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f6:	b00d      	add	sp, #52	@ 0x34
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	4640      	mov	r0, r8
 800d602:	4649      	mov	r1, r9
 800d604:	f7f3 faa6 	bl	8000b54 <__aeabi_dcmpun>
 800d608:	b140      	cbz	r0, 800d61c <_printf_float+0xe0>
 800d60a:	464b      	mov	r3, r9
 800d60c:	4a80      	ldr	r2, [pc, #512]	@ (800d810 <_printf_float+0x2d4>)
 800d60e:	2b00      	cmp	r3, #0
 800d610:	bfbc      	itt	lt
 800d612:	232d      	movlt	r3, #45	@ 0x2d
 800d614:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d618:	4b7e      	ldr	r3, [pc, #504]	@ (800d814 <_printf_float+0x2d8>)
 800d61a:	e7d4      	b.n	800d5c6 <_printf_float+0x8a>
 800d61c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	9206      	str	r2, [sp, #24]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	d13b      	bne.n	800d6a0 <_printf_float+0x164>
 800d628:	2306      	movs	r3, #6
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d630:	2300      	movs	r3, #0
 800d632:	4628      	mov	r0, r5
 800d634:	6022      	str	r2, [r4, #0]
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	ab0a      	add	r3, sp, #40	@ 0x28
 800d63a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d63e:	ab09      	add	r3, sp, #36	@ 0x24
 800d640:	ec49 8b10 	vmov	d0, r8, r9
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d64a:	6861      	ldr	r1, [r4, #4]
 800d64c:	f7ff fed8 	bl	800d400 <__cvt>
 800d650:	9b06      	ldr	r3, [sp, #24]
 800d652:	4680      	mov	r8, r0
 800d654:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d656:	2b47      	cmp	r3, #71	@ 0x47
 800d658:	d129      	bne.n	800d6ae <_printf_float+0x172>
 800d65a:	1cc8      	adds	r0, r1, #3
 800d65c:	db02      	blt.n	800d664 <_printf_float+0x128>
 800d65e:	6863      	ldr	r3, [r4, #4]
 800d660:	4299      	cmp	r1, r3
 800d662:	dd41      	ble.n	800d6e8 <_printf_float+0x1ac>
 800d664:	f1aa 0a02 	sub.w	sl, sl, #2
 800d668:	fa5f fa8a 	uxtb.w	sl, sl
 800d66c:	3901      	subs	r1, #1
 800d66e:	4652      	mov	r2, sl
 800d670:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d674:	9109      	str	r1, [sp, #36]	@ 0x24
 800d676:	f7ff ff28 	bl	800d4ca <__exponent>
 800d67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d67c:	4681      	mov	r9, r0
 800d67e:	1813      	adds	r3, r2, r0
 800d680:	2a01      	cmp	r2, #1
 800d682:	6123      	str	r3, [r4, #16]
 800d684:	dc02      	bgt.n	800d68c <_printf_float+0x150>
 800d686:	6822      	ldr	r2, [r4, #0]
 800d688:	07d2      	lsls	r2, r2, #31
 800d68a:	d501      	bpl.n	800d690 <_printf_float+0x154>
 800d68c:	3301      	adds	r3, #1
 800d68e:	6123      	str	r3, [r4, #16]
 800d690:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0a2      	beq.n	800d5de <_printf_float+0xa2>
 800d698:	232d      	movs	r3, #45	@ 0x2d
 800d69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d69e:	e79e      	b.n	800d5de <_printf_float+0xa2>
 800d6a0:	9a06      	ldr	r2, [sp, #24]
 800d6a2:	2a47      	cmp	r2, #71	@ 0x47
 800d6a4:	d1c2      	bne.n	800d62c <_printf_float+0xf0>
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1c0      	bne.n	800d62c <_printf_float+0xf0>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e7bd      	b.n	800d62a <_printf_float+0xee>
 800d6ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6b2:	d9db      	bls.n	800d66c <_printf_float+0x130>
 800d6b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6b8:	d118      	bne.n	800d6ec <_printf_float+0x1b0>
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	dd0b      	ble.n	800d6d8 <_printf_float+0x19c>
 800d6c0:	6121      	str	r1, [r4, #16]
 800d6c2:	b913      	cbnz	r3, 800d6ca <_printf_float+0x18e>
 800d6c4:	6822      	ldr	r2, [r4, #0]
 800d6c6:	07d0      	lsls	r0, r2, #31
 800d6c8:	d502      	bpl.n	800d6d0 <_printf_float+0x194>
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	440b      	add	r3, r1
 800d6ce:	6123      	str	r3, [r4, #16]
 800d6d0:	f04f 0900 	mov.w	r9, #0
 800d6d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6d6:	e7db      	b.n	800d690 <_printf_float+0x154>
 800d6d8:	b913      	cbnz	r3, 800d6e0 <_printf_float+0x1a4>
 800d6da:	6822      	ldr	r2, [r4, #0]
 800d6dc:	07d2      	lsls	r2, r2, #31
 800d6de:	d501      	bpl.n	800d6e4 <_printf_float+0x1a8>
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	e7f4      	b.n	800d6ce <_printf_float+0x192>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e7f2      	b.n	800d6ce <_printf_float+0x192>
 800d6e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	db05      	blt.n	800d6fe <_printf_float+0x1c2>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	6121      	str	r1, [r4, #16]
 800d6f6:	07d8      	lsls	r0, r3, #31
 800d6f8:	d5ea      	bpl.n	800d6d0 <_printf_float+0x194>
 800d6fa:	1c4b      	adds	r3, r1, #1
 800d6fc:	e7e7      	b.n	800d6ce <_printf_float+0x192>
 800d6fe:	2900      	cmp	r1, #0
 800d700:	bfd4      	ite	le
 800d702:	f1c1 0202 	rsble	r2, r1, #2
 800d706:	2201      	movgt	r2, #1
 800d708:	4413      	add	r3, r2
 800d70a:	e7e0      	b.n	800d6ce <_printf_float+0x192>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	055a      	lsls	r2, r3, #21
 800d710:	d407      	bmi.n	800d722 <_printf_float+0x1e6>
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	4642      	mov	r2, r8
 800d716:	4631      	mov	r1, r6
 800d718:	4628      	mov	r0, r5
 800d71a:	47b8      	blx	r7
 800d71c:	3001      	adds	r0, #1
 800d71e:	d12b      	bne.n	800d778 <_printf_float+0x23c>
 800d720:	e767      	b.n	800d5f2 <_printf_float+0xb6>
 800d722:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d726:	f240 80dd 	bls.w	800d8e4 <_printf_float+0x3a8>
 800d72a:	2200      	movs	r2, #0
 800d72c:	2300      	movs	r3, #0
 800d72e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d732:	f7f3 f9dd 	bl	8000af0 <__aeabi_dcmpeq>
 800d736:	2800      	cmp	r0, #0
 800d738:	d033      	beq.n	800d7a2 <_printf_float+0x266>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4a36      	ldr	r2, [pc, #216]	@ (800d818 <_printf_float+0x2dc>)
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	f43f af54 	beq.w	800d5f2 <_printf_float+0xb6>
 800d74a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d74e:	4543      	cmp	r3, r8
 800d750:	db02      	blt.n	800d758 <_printf_float+0x21c>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	07d8      	lsls	r0, r3, #31
 800d756:	d50f      	bpl.n	800d778 <_printf_float+0x23c>
 800d758:	4631      	mov	r1, r6
 800d75a:	4628      	mov	r0, r5
 800d75c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d760:	47b8      	blx	r7
 800d762:	3001      	adds	r0, #1
 800d764:	f43f af45 	beq.w	800d5f2 <_printf_float+0xb6>
 800d768:	f04f 0900 	mov.w	r9, #0
 800d76c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d770:	f104 0a1a 	add.w	sl, r4, #26
 800d774:	45c8      	cmp	r8, r9
 800d776:	dc09      	bgt.n	800d78c <_printf_float+0x250>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	079b      	lsls	r3, r3, #30
 800d77c:	f100 8103 	bmi.w	800d986 <_printf_float+0x44a>
 800d780:	68e0      	ldr	r0, [r4, #12]
 800d782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d784:	4298      	cmp	r0, r3
 800d786:	bfb8      	it	lt
 800d788:	4618      	movlt	r0, r3
 800d78a:	e734      	b.n	800d5f6 <_printf_float+0xba>
 800d78c:	2301      	movs	r3, #1
 800d78e:	4652      	mov	r2, sl
 800d790:	4631      	mov	r1, r6
 800d792:	4628      	mov	r0, r5
 800d794:	47b8      	blx	r7
 800d796:	3001      	adds	r0, #1
 800d798:	f43f af2b 	beq.w	800d5f2 <_printf_float+0xb6>
 800d79c:	f109 0901 	add.w	r9, r9, #1
 800d7a0:	e7e8      	b.n	800d774 <_printf_float+0x238>
 800d7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dc39      	bgt.n	800d81c <_printf_float+0x2e0>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800d818 <_printf_float+0x2dc>)
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b8      	blx	r7
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	f43f af1d 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7bc:	ea59 0303 	orrs.w	r3, r9, r3
 800d7c0:	d102      	bne.n	800d7c8 <_printf_float+0x28c>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	07d9      	lsls	r1, r3, #31
 800d7c6:	d5d7      	bpl.n	800d778 <_printf_float+0x23c>
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d0:	47b8      	blx	r7
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	f43f af0d 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7d8:	f04f 0a00 	mov.w	sl, #0
 800d7dc:	f104 0b1a 	add.w	fp, r4, #26
 800d7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e2:	425b      	negs	r3, r3
 800d7e4:	4553      	cmp	r3, sl
 800d7e6:	dc01      	bgt.n	800d7ec <_printf_float+0x2b0>
 800d7e8:	464b      	mov	r3, r9
 800d7ea:	e793      	b.n	800d714 <_printf_float+0x1d8>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	465a      	mov	r2, fp
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f aefb 	beq.w	800d5f2 <_printf_float+0xb6>
 800d7fc:	f10a 0a01 	add.w	sl, sl, #1
 800d800:	e7ee      	b.n	800d7e0 <_printf_float+0x2a4>
 800d802:	bf00      	nop
 800d804:	7fefffff 	.word	0x7fefffff
 800d808:	08014609 	.word	0x08014609
 800d80c:	0801460d 	.word	0x0801460d
 800d810:	08014611 	.word	0x08014611
 800d814:	08014615 	.word	0x08014615
 800d818:	08014619 	.word	0x08014619
 800d81c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d81e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d822:	4553      	cmp	r3, sl
 800d824:	bfa8      	it	ge
 800d826:	4653      	movge	r3, sl
 800d828:	2b00      	cmp	r3, #0
 800d82a:	4699      	mov	r9, r3
 800d82c:	dc36      	bgt.n	800d89c <_printf_float+0x360>
 800d82e:	f04f 0b00 	mov.w	fp, #0
 800d832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d836:	f104 021a 	add.w	r2, r4, #26
 800d83a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d83c:	9306      	str	r3, [sp, #24]
 800d83e:	eba3 0309 	sub.w	r3, r3, r9
 800d842:	455b      	cmp	r3, fp
 800d844:	dc31      	bgt.n	800d8aa <_printf_float+0x36e>
 800d846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d848:	459a      	cmp	sl, r3
 800d84a:	dc3a      	bgt.n	800d8c2 <_printf_float+0x386>
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	07da      	lsls	r2, r3, #31
 800d850:	d437      	bmi.n	800d8c2 <_printf_float+0x386>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	ebaa 0903 	sub.w	r9, sl, r3
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	ebaa 0303 	sub.w	r3, sl, r3
 800d85e:	4599      	cmp	r9, r3
 800d860:	bfa8      	it	ge
 800d862:	4699      	movge	r9, r3
 800d864:	f1b9 0f00 	cmp.w	r9, #0
 800d868:	dc33      	bgt.n	800d8d2 <_printf_float+0x396>
 800d86a:	f04f 0800 	mov.w	r8, #0
 800d86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d872:	f104 0b1a 	add.w	fp, r4, #26
 800d876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d878:	ebaa 0303 	sub.w	r3, sl, r3
 800d87c:	eba3 0309 	sub.w	r3, r3, r9
 800d880:	4543      	cmp	r3, r8
 800d882:	f77f af79 	ble.w	800d778 <_printf_float+0x23c>
 800d886:	2301      	movs	r3, #1
 800d888:	465a      	mov	r2, fp
 800d88a:	4631      	mov	r1, r6
 800d88c:	4628      	mov	r0, r5
 800d88e:	47b8      	blx	r7
 800d890:	3001      	adds	r0, #1
 800d892:	f43f aeae 	beq.w	800d5f2 <_printf_float+0xb6>
 800d896:	f108 0801 	add.w	r8, r8, #1
 800d89a:	e7ec      	b.n	800d876 <_printf_float+0x33a>
 800d89c:	4642      	mov	r2, r8
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b8      	blx	r7
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d1c2      	bne.n	800d82e <_printf_float+0x2f2>
 800d8a8:	e6a3      	b.n	800d5f2 <_printf_float+0xb6>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	9206      	str	r2, [sp, #24]
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f ae9c 	beq.w	800d5f2 <_printf_float+0xb6>
 800d8ba:	f10b 0b01 	add.w	fp, fp, #1
 800d8be:	9a06      	ldr	r2, [sp, #24]
 800d8c0:	e7bb      	b.n	800d83a <_printf_float+0x2fe>
 800d8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	47b8      	blx	r7
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d1c0      	bne.n	800d852 <_printf_float+0x316>
 800d8d0:	e68f      	b.n	800d5f2 <_printf_float+0xb6>
 800d8d2:	9a06      	ldr	r2, [sp, #24]
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4628      	mov	r0, r5
 800d8da:	4442      	add	r2, r8
 800d8dc:	47b8      	blx	r7
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d1c3      	bne.n	800d86a <_printf_float+0x32e>
 800d8e2:	e686      	b.n	800d5f2 <_printf_float+0xb6>
 800d8e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8e8:	f1ba 0f01 	cmp.w	sl, #1
 800d8ec:	dc01      	bgt.n	800d8f2 <_printf_float+0x3b6>
 800d8ee:	07db      	lsls	r3, r3, #31
 800d8f0:	d536      	bpl.n	800d960 <_printf_float+0x424>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b8      	blx	r7
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	f43f ae78 	beq.w	800d5f2 <_printf_float+0xb6>
 800d902:	4631      	mov	r1, r6
 800d904:	4628      	mov	r0, r5
 800d906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d90a:	47b8      	blx	r7
 800d90c:	3001      	adds	r0, #1
 800d90e:	f43f ae70 	beq.w	800d5f2 <_printf_float+0xb6>
 800d912:	2200      	movs	r2, #0
 800d914:	2300      	movs	r3, #0
 800d916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d91a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d91e:	f7f3 f8e7 	bl	8000af0 <__aeabi_dcmpeq>
 800d922:	b9c0      	cbnz	r0, 800d956 <_printf_float+0x41a>
 800d924:	4653      	mov	r3, sl
 800d926:	f108 0201 	add.w	r2, r8, #1
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	d10c      	bne.n	800d94e <_printf_float+0x412>
 800d934:	e65d      	b.n	800d5f2 <_printf_float+0xb6>
 800d936:	2301      	movs	r3, #1
 800d938:	465a      	mov	r2, fp
 800d93a:	4631      	mov	r1, r6
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b8      	blx	r7
 800d940:	3001      	adds	r0, #1
 800d942:	f43f ae56 	beq.w	800d5f2 <_printf_float+0xb6>
 800d946:	f108 0801 	add.w	r8, r8, #1
 800d94a:	45d0      	cmp	r8, sl
 800d94c:	dbf3      	blt.n	800d936 <_printf_float+0x3fa>
 800d94e:	464b      	mov	r3, r9
 800d950:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d954:	e6df      	b.n	800d716 <_printf_float+0x1da>
 800d956:	f04f 0800 	mov.w	r8, #0
 800d95a:	f104 0b1a 	add.w	fp, r4, #26
 800d95e:	e7f4      	b.n	800d94a <_printf_float+0x40e>
 800d960:	2301      	movs	r3, #1
 800d962:	4642      	mov	r2, r8
 800d964:	e7e1      	b.n	800d92a <_printf_float+0x3ee>
 800d966:	2301      	movs	r3, #1
 800d968:	464a      	mov	r2, r9
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae3e 	beq.w	800d5f2 <_printf_float+0xb6>
 800d976:	f108 0801 	add.w	r8, r8, #1
 800d97a:	68e3      	ldr	r3, [r4, #12]
 800d97c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d97e:	1a5b      	subs	r3, r3, r1
 800d980:	4543      	cmp	r3, r8
 800d982:	dcf0      	bgt.n	800d966 <_printf_float+0x42a>
 800d984:	e6fc      	b.n	800d780 <_printf_float+0x244>
 800d986:	f04f 0800 	mov.w	r8, #0
 800d98a:	f104 0919 	add.w	r9, r4, #25
 800d98e:	e7f4      	b.n	800d97a <_printf_float+0x43e>

0800d990 <_printf_common>:
 800d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	4616      	mov	r6, r2
 800d996:	4698      	mov	r8, r3
 800d998:	688a      	ldr	r2, [r1, #8]
 800d99a:	4607      	mov	r7, r0
 800d99c:	690b      	ldr	r3, [r1, #16]
 800d99e:	460c      	mov	r4, r1
 800d9a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	bfb8      	it	lt
 800d9a8:	4613      	movlt	r3, r2
 800d9aa:	6033      	str	r3, [r6, #0]
 800d9ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9b0:	b10a      	cbz	r2, 800d9b6 <_printf_common+0x26>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	0699      	lsls	r1, r3, #26
 800d9ba:	bf42      	ittt	mi
 800d9bc:	6833      	ldrmi	r3, [r6, #0]
 800d9be:	3302      	addmi	r3, #2
 800d9c0:	6033      	strmi	r3, [r6, #0]
 800d9c2:	6825      	ldr	r5, [r4, #0]
 800d9c4:	f015 0506 	ands.w	r5, r5, #6
 800d9c8:	d106      	bne.n	800d9d8 <_printf_common+0x48>
 800d9ca:	f104 0a19 	add.w	sl, r4, #25
 800d9ce:	68e3      	ldr	r3, [r4, #12]
 800d9d0:	6832      	ldr	r2, [r6, #0]
 800d9d2:	1a9b      	subs	r3, r3, r2
 800d9d4:	42ab      	cmp	r3, r5
 800d9d6:	dc2b      	bgt.n	800da30 <_printf_common+0xa0>
 800d9d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9dc:	6822      	ldr	r2, [r4, #0]
 800d9de:	3b00      	subs	r3, #0
 800d9e0:	bf18      	it	ne
 800d9e2:	2301      	movne	r3, #1
 800d9e4:	0692      	lsls	r2, r2, #26
 800d9e6:	d430      	bmi.n	800da4a <_printf_common+0xba>
 800d9e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9ec:	4641      	mov	r1, r8
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	47c8      	blx	r9
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	d023      	beq.n	800da3e <_printf_common+0xae>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	341a      	adds	r4, #26
 800d9fa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d9fe:	f003 0306 	and.w	r3, r3, #6
 800da02:	2b04      	cmp	r3, #4
 800da04:	bf0a      	itet	eq
 800da06:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800da0a:	2500      	movne	r5, #0
 800da0c:	6833      	ldreq	r3, [r6, #0]
 800da0e:	f04f 0600 	mov.w	r6, #0
 800da12:	bf08      	it	eq
 800da14:	1aed      	subeq	r5, r5, r3
 800da16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800da1a:	bf08      	it	eq
 800da1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da20:	4293      	cmp	r3, r2
 800da22:	bfc4      	itt	gt
 800da24:	1a9b      	subgt	r3, r3, r2
 800da26:	18ed      	addgt	r5, r5, r3
 800da28:	42b5      	cmp	r5, r6
 800da2a:	d11a      	bne.n	800da62 <_printf_common+0xd2>
 800da2c:	2000      	movs	r0, #0
 800da2e:	e008      	b.n	800da42 <_printf_common+0xb2>
 800da30:	2301      	movs	r3, #1
 800da32:	4652      	mov	r2, sl
 800da34:	4641      	mov	r1, r8
 800da36:	4638      	mov	r0, r7
 800da38:	47c8      	blx	r9
 800da3a:	3001      	adds	r0, #1
 800da3c:	d103      	bne.n	800da46 <_printf_common+0xb6>
 800da3e:	f04f 30ff 	mov.w	r0, #4294967295
 800da42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da46:	3501      	adds	r5, #1
 800da48:	e7c1      	b.n	800d9ce <_printf_common+0x3e>
 800da4a:	18e1      	adds	r1, r4, r3
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	2030      	movs	r0, #48	@ 0x30
 800da50:	3302      	adds	r3, #2
 800da52:	4422      	add	r2, r4
 800da54:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da60:	e7c2      	b.n	800d9e8 <_printf_common+0x58>
 800da62:	2301      	movs	r3, #1
 800da64:	4622      	mov	r2, r4
 800da66:	4641      	mov	r1, r8
 800da68:	4638      	mov	r0, r7
 800da6a:	47c8      	blx	r9
 800da6c:	3001      	adds	r0, #1
 800da6e:	d0e6      	beq.n	800da3e <_printf_common+0xae>
 800da70:	3601      	adds	r6, #1
 800da72:	e7d9      	b.n	800da28 <_printf_common+0x98>

0800da74 <_printf_i>:
 800da74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	7e0f      	ldrb	r7, [r1, #24]
 800da7a:	4691      	mov	r9, r2
 800da7c:	4680      	mov	r8, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	2f78      	cmp	r7, #120	@ 0x78
 800da82:	469a      	mov	sl, r3
 800da84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da8a:	d807      	bhi.n	800da9c <_printf_i+0x28>
 800da8c:	2f62      	cmp	r7, #98	@ 0x62
 800da8e:	d80a      	bhi.n	800daa6 <_printf_i+0x32>
 800da90:	2f00      	cmp	r7, #0
 800da92:	f000 80d2 	beq.w	800dc3a <_printf_i+0x1c6>
 800da96:	2f58      	cmp	r7, #88	@ 0x58
 800da98:	f000 80b9 	beq.w	800dc0e <_printf_i+0x19a>
 800da9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daa4:	e03a      	b.n	800db1c <_printf_i+0xa8>
 800daa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daaa:	2b15      	cmp	r3, #21
 800daac:	d8f6      	bhi.n	800da9c <_printf_i+0x28>
 800daae:	a101      	add	r1, pc, #4	@ (adr r1, 800dab4 <_printf_i+0x40>)
 800dab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab4:	0800db0d 	.word	0x0800db0d
 800dab8:	0800db21 	.word	0x0800db21
 800dabc:	0800da9d 	.word	0x0800da9d
 800dac0:	0800da9d 	.word	0x0800da9d
 800dac4:	0800da9d 	.word	0x0800da9d
 800dac8:	0800da9d 	.word	0x0800da9d
 800dacc:	0800db21 	.word	0x0800db21
 800dad0:	0800da9d 	.word	0x0800da9d
 800dad4:	0800da9d 	.word	0x0800da9d
 800dad8:	0800da9d 	.word	0x0800da9d
 800dadc:	0800da9d 	.word	0x0800da9d
 800dae0:	0800dc21 	.word	0x0800dc21
 800dae4:	0800db4b 	.word	0x0800db4b
 800dae8:	0800dbdb 	.word	0x0800dbdb
 800daec:	0800da9d 	.word	0x0800da9d
 800daf0:	0800da9d 	.word	0x0800da9d
 800daf4:	0800dc43 	.word	0x0800dc43
 800daf8:	0800da9d 	.word	0x0800da9d
 800dafc:	0800db4b 	.word	0x0800db4b
 800db00:	0800da9d 	.word	0x0800da9d
 800db04:	0800da9d 	.word	0x0800da9d
 800db08:	0800dbe3 	.word	0x0800dbe3
 800db0c:	6833      	ldr	r3, [r6, #0]
 800db0e:	1d1a      	adds	r2, r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6032      	str	r2, [r6, #0]
 800db14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db1c:	2301      	movs	r3, #1
 800db1e:	e09d      	b.n	800dc5c <_printf_i+0x1e8>
 800db20:	6833      	ldr	r3, [r6, #0]
 800db22:	6820      	ldr	r0, [r4, #0]
 800db24:	1d19      	adds	r1, r3, #4
 800db26:	6031      	str	r1, [r6, #0]
 800db28:	0606      	lsls	r6, r0, #24
 800db2a:	d501      	bpl.n	800db30 <_printf_i+0xbc>
 800db2c:	681d      	ldr	r5, [r3, #0]
 800db2e:	e003      	b.n	800db38 <_printf_i+0xc4>
 800db30:	0645      	lsls	r5, r0, #25
 800db32:	d5fb      	bpl.n	800db2c <_printf_i+0xb8>
 800db34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db38:	2d00      	cmp	r5, #0
 800db3a:	da03      	bge.n	800db44 <_printf_i+0xd0>
 800db3c:	232d      	movs	r3, #45	@ 0x2d
 800db3e:	426d      	negs	r5, r5
 800db40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db44:	4859      	ldr	r0, [pc, #356]	@ (800dcac <_printf_i+0x238>)
 800db46:	230a      	movs	r3, #10
 800db48:	e011      	b.n	800db6e <_printf_i+0xfa>
 800db4a:	6821      	ldr	r1, [r4, #0]
 800db4c:	6833      	ldr	r3, [r6, #0]
 800db4e:	0608      	lsls	r0, r1, #24
 800db50:	f853 5b04 	ldr.w	r5, [r3], #4
 800db54:	d402      	bmi.n	800db5c <_printf_i+0xe8>
 800db56:	0649      	lsls	r1, r1, #25
 800db58:	bf48      	it	mi
 800db5a:	b2ad      	uxthmi	r5, r5
 800db5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db5e:	6033      	str	r3, [r6, #0]
 800db60:	4852      	ldr	r0, [pc, #328]	@ (800dcac <_printf_i+0x238>)
 800db62:	bf14      	ite	ne
 800db64:	230a      	movne	r3, #10
 800db66:	2308      	moveq	r3, #8
 800db68:	2100      	movs	r1, #0
 800db6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db6e:	6866      	ldr	r6, [r4, #4]
 800db70:	2e00      	cmp	r6, #0
 800db72:	60a6      	str	r6, [r4, #8]
 800db74:	bfa2      	ittt	ge
 800db76:	6821      	ldrge	r1, [r4, #0]
 800db78:	f021 0104 	bicge.w	r1, r1, #4
 800db7c:	6021      	strge	r1, [r4, #0]
 800db7e:	b90d      	cbnz	r5, 800db84 <_printf_i+0x110>
 800db80:	2e00      	cmp	r6, #0
 800db82:	d04b      	beq.n	800dc1c <_printf_i+0x1a8>
 800db84:	4616      	mov	r6, r2
 800db86:	fbb5 f1f3 	udiv	r1, r5, r3
 800db8a:	fb03 5711 	mls	r7, r3, r1, r5
 800db8e:	5dc7      	ldrb	r7, [r0, r7]
 800db90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db94:	462f      	mov	r7, r5
 800db96:	460d      	mov	r5, r1
 800db98:	42bb      	cmp	r3, r7
 800db9a:	d9f4      	bls.n	800db86 <_printf_i+0x112>
 800db9c:	2b08      	cmp	r3, #8
 800db9e:	d10b      	bne.n	800dbb8 <_printf_i+0x144>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	07df      	lsls	r7, r3, #31
 800dba4:	d508      	bpl.n	800dbb8 <_printf_i+0x144>
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	6861      	ldr	r1, [r4, #4]
 800dbaa:	4299      	cmp	r1, r3
 800dbac:	bfde      	ittt	le
 800dbae:	2330      	movle	r3, #48	@ 0x30
 800dbb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbb8:	1b92      	subs	r2, r2, r6
 800dbba:	6122      	str	r2, [r4, #16]
 800dbbc:	464b      	mov	r3, r9
 800dbbe:	aa03      	add	r2, sp, #12
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	f8cd a000 	str.w	sl, [sp]
 800dbc8:	f7ff fee2 	bl	800d990 <_printf_common>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d14a      	bne.n	800dc66 <_printf_i+0x1f2>
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd4:	b004      	add	sp, #16
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	2778      	movs	r7, #120	@ 0x78
 800dbe4:	4832      	ldr	r0, [pc, #200]	@ (800dcb0 <_printf_i+0x23c>)
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbec:	061f      	lsls	r7, r3, #24
 800dbee:	6831      	ldr	r1, [r6, #0]
 800dbf0:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbf4:	d402      	bmi.n	800dbfc <_printf_i+0x188>
 800dbf6:	065f      	lsls	r7, r3, #25
 800dbf8:	bf48      	it	mi
 800dbfa:	b2ad      	uxthmi	r5, r5
 800dbfc:	6031      	str	r1, [r6, #0]
 800dbfe:	07d9      	lsls	r1, r3, #31
 800dc00:	bf44      	itt	mi
 800dc02:	f043 0320 	orrmi.w	r3, r3, #32
 800dc06:	6023      	strmi	r3, [r4, #0]
 800dc08:	b11d      	cbz	r5, 800dc12 <_printf_i+0x19e>
 800dc0a:	2310      	movs	r3, #16
 800dc0c:	e7ac      	b.n	800db68 <_printf_i+0xf4>
 800dc0e:	4827      	ldr	r0, [pc, #156]	@ (800dcac <_printf_i+0x238>)
 800dc10:	e7e9      	b.n	800dbe6 <_printf_i+0x172>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	f023 0320 	bic.w	r3, r3, #32
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	e7f6      	b.n	800dc0a <_printf_i+0x196>
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	e7bd      	b.n	800db9c <_printf_i+0x128>
 800dc20:	6833      	ldr	r3, [r6, #0]
 800dc22:	6825      	ldr	r5, [r4, #0]
 800dc24:	1d18      	adds	r0, r3, #4
 800dc26:	6961      	ldr	r1, [r4, #20]
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	062e      	lsls	r6, r5, #24
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	d501      	bpl.n	800dc34 <_printf_i+0x1c0>
 800dc30:	6019      	str	r1, [r3, #0]
 800dc32:	e002      	b.n	800dc3a <_printf_i+0x1c6>
 800dc34:	0668      	lsls	r0, r5, #25
 800dc36:	d5fb      	bpl.n	800dc30 <_printf_i+0x1bc>
 800dc38:	8019      	strh	r1, [r3, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	6123      	str	r3, [r4, #16]
 800dc40:	e7bc      	b.n	800dbbc <_printf_i+0x148>
 800dc42:	6833      	ldr	r3, [r6, #0]
 800dc44:	2100      	movs	r1, #0
 800dc46:	1d1a      	adds	r2, r3, #4
 800dc48:	6032      	str	r2, [r6, #0]
 800dc4a:	681e      	ldr	r6, [r3, #0]
 800dc4c:	6862      	ldr	r2, [r4, #4]
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f000 fbe7 	bl	800e422 <memchr>
 800dc54:	b108      	cbz	r0, 800dc5a <_printf_i+0x1e6>
 800dc56:	1b80      	subs	r0, r0, r6
 800dc58:	6060      	str	r0, [r4, #4]
 800dc5a:	6863      	ldr	r3, [r4, #4]
 800dc5c:	6123      	str	r3, [r4, #16]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc64:	e7aa      	b.n	800dbbc <_printf_i+0x148>
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	4632      	mov	r2, r6
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	4640      	mov	r0, r8
 800dc6e:	47d0      	blx	sl
 800dc70:	3001      	adds	r0, #1
 800dc72:	d0ad      	beq.n	800dbd0 <_printf_i+0x15c>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	079b      	lsls	r3, r3, #30
 800dc78:	d413      	bmi.n	800dca2 <_printf_i+0x22e>
 800dc7a:	68e0      	ldr	r0, [r4, #12]
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	4298      	cmp	r0, r3
 800dc80:	bfb8      	it	lt
 800dc82:	4618      	movlt	r0, r3
 800dc84:	e7a6      	b.n	800dbd4 <_printf_i+0x160>
 800dc86:	2301      	movs	r3, #1
 800dc88:	4632      	mov	r2, r6
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	47d0      	blx	sl
 800dc90:	3001      	adds	r0, #1
 800dc92:	d09d      	beq.n	800dbd0 <_printf_i+0x15c>
 800dc94:	3501      	adds	r5, #1
 800dc96:	68e3      	ldr	r3, [r4, #12]
 800dc98:	9903      	ldr	r1, [sp, #12]
 800dc9a:	1a5b      	subs	r3, r3, r1
 800dc9c:	42ab      	cmp	r3, r5
 800dc9e:	dcf2      	bgt.n	800dc86 <_printf_i+0x212>
 800dca0:	e7eb      	b.n	800dc7a <_printf_i+0x206>
 800dca2:	2500      	movs	r5, #0
 800dca4:	f104 0619 	add.w	r6, r4, #25
 800dca8:	e7f5      	b.n	800dc96 <_printf_i+0x222>
 800dcaa:	bf00      	nop
 800dcac:	0801461b 	.word	0x0801461b
 800dcb0:	0801462c 	.word	0x0801462c

0800dcb4 <_scanf_float>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	b087      	sub	sp, #28
 800dcba:	4617      	mov	r7, r2
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	688b      	ldr	r3, [r1, #8]
 800dcc4:	1e5a      	subs	r2, r3, #1
 800dcc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dcca:	460a      	mov	r2, r1
 800dccc:	bf89      	itett	hi
 800dcce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dcd2:	f04f 0b00 	movls.w	fp, #0
 800dcd6:	eb03 0b05 	addhi.w	fp, r3, r5
 800dcda:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dcde:	f04f 0500 	mov.w	r5, #0
 800dce2:	bf88      	it	hi
 800dce4:	608b      	strhi	r3, [r1, #8]
 800dce6:	680b      	ldr	r3, [r1, #0]
 800dce8:	46aa      	mov	sl, r5
 800dcea:	46a9      	mov	r9, r5
 800dcec:	9502      	str	r5, [sp, #8]
 800dcee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dcf2:	f842 3b1c 	str.w	r3, [r2], #28
 800dcf6:	4616      	mov	r6, r2
 800dcf8:	9201      	str	r2, [sp, #4]
 800dcfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dcfe:	68a2      	ldr	r2, [r4, #8]
 800dd00:	b152      	cbz	r2, 800dd18 <_scanf_float+0x64>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd08:	d864      	bhi.n	800ddd4 <_scanf_float+0x120>
 800dd0a:	2b40      	cmp	r3, #64	@ 0x40
 800dd0c:	d83c      	bhi.n	800dd88 <_scanf_float+0xd4>
 800dd0e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd12:	b2c8      	uxtb	r0, r1
 800dd14:	280e      	cmp	r0, #14
 800dd16:	d93a      	bls.n	800dd8e <_scanf_float+0xda>
 800dd18:	f1b9 0f00 	cmp.w	r9, #0
 800dd1c:	d003      	beq.n	800dd26 <_scanf_float+0x72>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd2a:	f1ba 0f01 	cmp.w	sl, #1
 800dd2e:	f200 8117 	bhi.w	800df60 <_scanf_float+0x2ac>
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	429e      	cmp	r6, r3
 800dd36:	f200 8108 	bhi.w	800df4a <_scanf_float+0x296>
 800dd3a:	2001      	movs	r0, #1
 800dd3c:	b007      	add	sp, #28
 800dd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd42:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd46:	2a0d      	cmp	r2, #13
 800dd48:	d8e6      	bhi.n	800dd18 <_scanf_float+0x64>
 800dd4a:	a101      	add	r1, pc, #4	@ (adr r1, 800dd50 <_scanf_float+0x9c>)
 800dd4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd50:	0800de97 	.word	0x0800de97
 800dd54:	0800dd19 	.word	0x0800dd19
 800dd58:	0800dd19 	.word	0x0800dd19
 800dd5c:	0800dd19 	.word	0x0800dd19
 800dd60:	0800def7 	.word	0x0800def7
 800dd64:	0800decf 	.word	0x0800decf
 800dd68:	0800dd19 	.word	0x0800dd19
 800dd6c:	0800dd19 	.word	0x0800dd19
 800dd70:	0800dea5 	.word	0x0800dea5
 800dd74:	0800dd19 	.word	0x0800dd19
 800dd78:	0800dd19 	.word	0x0800dd19
 800dd7c:	0800dd19 	.word	0x0800dd19
 800dd80:	0800dd19 	.word	0x0800dd19
 800dd84:	0800de5d 	.word	0x0800de5d
 800dd88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dd8c:	e7db      	b.n	800dd46 <_scanf_float+0x92>
 800dd8e:	290e      	cmp	r1, #14
 800dd90:	d8c2      	bhi.n	800dd18 <_scanf_float+0x64>
 800dd92:	a001      	add	r0, pc, #4	@ (adr r0, 800dd98 <_scanf_float+0xe4>)
 800dd94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd98:	0800de4d 	.word	0x0800de4d
 800dd9c:	0800dd19 	.word	0x0800dd19
 800dda0:	0800de4d 	.word	0x0800de4d
 800dda4:	0800dee3 	.word	0x0800dee3
 800dda8:	0800dd19 	.word	0x0800dd19
 800ddac:	0800ddf5 	.word	0x0800ddf5
 800ddb0:	0800de33 	.word	0x0800de33
 800ddb4:	0800de33 	.word	0x0800de33
 800ddb8:	0800de33 	.word	0x0800de33
 800ddbc:	0800de33 	.word	0x0800de33
 800ddc0:	0800de33 	.word	0x0800de33
 800ddc4:	0800de33 	.word	0x0800de33
 800ddc8:	0800de33 	.word	0x0800de33
 800ddcc:	0800de33 	.word	0x0800de33
 800ddd0:	0800de33 	.word	0x0800de33
 800ddd4:	2b6e      	cmp	r3, #110	@ 0x6e
 800ddd6:	d809      	bhi.n	800ddec <_scanf_float+0x138>
 800ddd8:	2b60      	cmp	r3, #96	@ 0x60
 800ddda:	d8b2      	bhi.n	800dd42 <_scanf_float+0x8e>
 800dddc:	2b54      	cmp	r3, #84	@ 0x54
 800ddde:	d07b      	beq.n	800ded8 <_scanf_float+0x224>
 800dde0:	2b59      	cmp	r3, #89	@ 0x59
 800dde2:	d199      	bne.n	800dd18 <_scanf_float+0x64>
 800dde4:	2d07      	cmp	r5, #7
 800dde6:	d197      	bne.n	800dd18 <_scanf_float+0x64>
 800dde8:	2508      	movs	r5, #8
 800ddea:	e02c      	b.n	800de46 <_scanf_float+0x192>
 800ddec:	2b74      	cmp	r3, #116	@ 0x74
 800ddee:	d073      	beq.n	800ded8 <_scanf_float+0x224>
 800ddf0:	2b79      	cmp	r3, #121	@ 0x79
 800ddf2:	e7f6      	b.n	800dde2 <_scanf_float+0x12e>
 800ddf4:	6821      	ldr	r1, [r4, #0]
 800ddf6:	05c8      	lsls	r0, r1, #23
 800ddf8:	d51b      	bpl.n	800de32 <_scanf_float+0x17e>
 800ddfa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ddfe:	f109 0901 	add.w	r9, r9, #1
 800de02:	6021      	str	r1, [r4, #0]
 800de04:	f1bb 0f00 	cmp.w	fp, #0
 800de08:	d003      	beq.n	800de12 <_scanf_float+0x15e>
 800de0a:	3201      	adds	r2, #1
 800de0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de10:	60a2      	str	r2, [r4, #8]
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	3b01      	subs	r3, #1
 800de16:	60a3      	str	r3, [r4, #8]
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	3301      	adds	r3, #1
 800de1c:	6123      	str	r3, [r4, #16]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3b01      	subs	r3, #1
 800de22:	2b00      	cmp	r3, #0
 800de24:	607b      	str	r3, [r7, #4]
 800de26:	f340 8087 	ble.w	800df38 <_scanf_float+0x284>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	3301      	adds	r3, #1
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	e765      	b.n	800dcfe <_scanf_float+0x4a>
 800de32:	eb1a 0105 	adds.w	r1, sl, r5
 800de36:	f47f af6f 	bne.w	800dd18 <_scanf_float+0x64>
 800de3a:	6822      	ldr	r2, [r4, #0]
 800de3c:	460d      	mov	r5, r1
 800de3e:	468a      	mov	sl, r1
 800de40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	f806 3b01 	strb.w	r3, [r6], #1
 800de4a:	e7e2      	b.n	800de12 <_scanf_float+0x15e>
 800de4c:	6822      	ldr	r2, [r4, #0]
 800de4e:	0610      	lsls	r0, r2, #24
 800de50:	f57f af62 	bpl.w	800dd18 <_scanf_float+0x64>
 800de54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de58:	6022      	str	r2, [r4, #0]
 800de5a:	e7f4      	b.n	800de46 <_scanf_float+0x192>
 800de5c:	f1ba 0f00 	cmp.w	sl, #0
 800de60:	d10e      	bne.n	800de80 <_scanf_float+0x1cc>
 800de62:	f1b9 0f00 	cmp.w	r9, #0
 800de66:	d10e      	bne.n	800de86 <_scanf_float+0x1d2>
 800de68:	6822      	ldr	r2, [r4, #0]
 800de6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800de6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800de72:	d108      	bne.n	800de86 <_scanf_float+0x1d2>
 800de74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800de78:	f04f 0a01 	mov.w	sl, #1
 800de7c:	6022      	str	r2, [r4, #0]
 800de7e:	e7e2      	b.n	800de46 <_scanf_float+0x192>
 800de80:	f1ba 0f02 	cmp.w	sl, #2
 800de84:	d055      	beq.n	800df32 <_scanf_float+0x27e>
 800de86:	2d01      	cmp	r5, #1
 800de88:	d002      	beq.n	800de90 <_scanf_float+0x1dc>
 800de8a:	2d04      	cmp	r5, #4
 800de8c:	f47f af44 	bne.w	800dd18 <_scanf_float+0x64>
 800de90:	3501      	adds	r5, #1
 800de92:	b2ed      	uxtb	r5, r5
 800de94:	e7d7      	b.n	800de46 <_scanf_float+0x192>
 800de96:	f1ba 0f01 	cmp.w	sl, #1
 800de9a:	f47f af3d 	bne.w	800dd18 <_scanf_float+0x64>
 800de9e:	f04f 0a02 	mov.w	sl, #2
 800dea2:	e7d0      	b.n	800de46 <_scanf_float+0x192>
 800dea4:	b97d      	cbnz	r5, 800dec6 <_scanf_float+0x212>
 800dea6:	f1b9 0f00 	cmp.w	r9, #0
 800deaa:	f47f af38 	bne.w	800dd1e <_scanf_float+0x6a>
 800deae:	6822      	ldr	r2, [r4, #0]
 800deb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800deb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800deb8:	f040 8107 	bne.w	800e0ca <_scanf_float+0x416>
 800debc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dec0:	2501      	movs	r5, #1
 800dec2:	6022      	str	r2, [r4, #0]
 800dec4:	e7bf      	b.n	800de46 <_scanf_float+0x192>
 800dec6:	2d03      	cmp	r5, #3
 800dec8:	d0e2      	beq.n	800de90 <_scanf_float+0x1dc>
 800deca:	2d05      	cmp	r5, #5
 800decc:	e7de      	b.n	800de8c <_scanf_float+0x1d8>
 800dece:	2d02      	cmp	r5, #2
 800ded0:	f47f af22 	bne.w	800dd18 <_scanf_float+0x64>
 800ded4:	2503      	movs	r5, #3
 800ded6:	e7b6      	b.n	800de46 <_scanf_float+0x192>
 800ded8:	2d06      	cmp	r5, #6
 800deda:	f47f af1d 	bne.w	800dd18 <_scanf_float+0x64>
 800dede:	2507      	movs	r5, #7
 800dee0:	e7b1      	b.n	800de46 <_scanf_float+0x192>
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	0591      	lsls	r1, r2, #22
 800dee6:	f57f af17 	bpl.w	800dd18 <_scanf_float+0x64>
 800deea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800deee:	f8cd 9008 	str.w	r9, [sp, #8]
 800def2:	6022      	str	r2, [r4, #0]
 800def4:	e7a7      	b.n	800de46 <_scanf_float+0x192>
 800def6:	6822      	ldr	r2, [r4, #0]
 800def8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800defc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800df00:	d006      	beq.n	800df10 <_scanf_float+0x25c>
 800df02:	0550      	lsls	r0, r2, #21
 800df04:	f57f af08 	bpl.w	800dd18 <_scanf_float+0x64>
 800df08:	f1b9 0f00 	cmp.w	r9, #0
 800df0c:	f000 80dd 	beq.w	800e0ca <_scanf_float+0x416>
 800df10:	0591      	lsls	r1, r2, #22
 800df12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df16:	bf58      	it	pl
 800df18:	9902      	ldrpl	r1, [sp, #8]
 800df1a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df1e:	bf58      	it	pl
 800df20:	eba9 0101 	subpl.w	r1, r9, r1
 800df24:	6022      	str	r2, [r4, #0]
 800df26:	f04f 0900 	mov.w	r9, #0
 800df2a:	bf58      	it	pl
 800df2c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df30:	e789      	b.n	800de46 <_scanf_float+0x192>
 800df32:	f04f 0a03 	mov.w	sl, #3
 800df36:	e786      	b.n	800de46 <_scanf_float+0x192>
 800df38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df3c:	4639      	mov	r1, r7
 800df3e:	4640      	mov	r0, r8
 800df40:	4798      	blx	r3
 800df42:	2800      	cmp	r0, #0
 800df44:	f43f aedb 	beq.w	800dcfe <_scanf_float+0x4a>
 800df48:	e6e6      	b.n	800dd18 <_scanf_float+0x64>
 800df4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df4e:	463a      	mov	r2, r7
 800df50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df54:	4640      	mov	r0, r8
 800df56:	4798      	blx	r3
 800df58:	6923      	ldr	r3, [r4, #16]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	6123      	str	r3, [r4, #16]
 800df5e:	e6e8      	b.n	800dd32 <_scanf_float+0x7e>
 800df60:	1e6b      	subs	r3, r5, #1
 800df62:	2b06      	cmp	r3, #6
 800df64:	d824      	bhi.n	800dfb0 <_scanf_float+0x2fc>
 800df66:	2d02      	cmp	r5, #2
 800df68:	d836      	bhi.n	800dfd8 <_scanf_float+0x324>
 800df6a:	9b01      	ldr	r3, [sp, #4]
 800df6c:	429e      	cmp	r6, r3
 800df6e:	f67f aee4 	bls.w	800dd3a <_scanf_float+0x86>
 800df72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df76:	463a      	mov	r2, r7
 800df78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df7c:	4640      	mov	r0, r8
 800df7e:	4798      	blx	r3
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	3b01      	subs	r3, #1
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	e7f0      	b.n	800df6a <_scanf_float+0x2b6>
 800df88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800df8c:	463a      	mov	r2, r7
 800df8e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800df92:	4640      	mov	r0, r8
 800df94:	4798      	blx	r3
 800df96:	6923      	ldr	r3, [r4, #16]
 800df98:	3b01      	subs	r3, #1
 800df9a:	6123      	str	r3, [r4, #16]
 800df9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfa0:	fa5f fa8a 	uxtb.w	sl, sl
 800dfa4:	f1ba 0f02 	cmp.w	sl, #2
 800dfa8:	d1ee      	bne.n	800df88 <_scanf_float+0x2d4>
 800dfaa:	3d03      	subs	r5, #3
 800dfac:	b2ed      	uxtb	r5, r5
 800dfae:	1b76      	subs	r6, r6, r5
 800dfb0:	6823      	ldr	r3, [r4, #0]
 800dfb2:	05da      	lsls	r2, r3, #23
 800dfb4:	d52f      	bpl.n	800e016 <_scanf_float+0x362>
 800dfb6:	055b      	lsls	r3, r3, #21
 800dfb8:	d511      	bpl.n	800dfde <_scanf_float+0x32a>
 800dfba:	9b01      	ldr	r3, [sp, #4]
 800dfbc:	429e      	cmp	r6, r3
 800dfbe:	f67f aebc 	bls.w	800dd3a <_scanf_float+0x86>
 800dfc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfcc:	4640      	mov	r0, r8
 800dfce:	4798      	blx	r3
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	3b01      	subs	r3, #1
 800dfd4:	6123      	str	r3, [r4, #16]
 800dfd6:	e7f0      	b.n	800dfba <_scanf_float+0x306>
 800dfd8:	46aa      	mov	sl, r5
 800dfda:	46b3      	mov	fp, r6
 800dfdc:	e7de      	b.n	800df9c <_scanf_float+0x2e8>
 800dfde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfe2:	1e75      	subs	r5, r6, #1
 800dfe4:	6923      	ldr	r3, [r4, #16]
 800dfe6:	2965      	cmp	r1, #101	@ 0x65
 800dfe8:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfec:	6123      	str	r3, [r4, #16]
 800dfee:	d00c      	beq.n	800e00a <_scanf_float+0x356>
 800dff0:	2945      	cmp	r1, #69	@ 0x45
 800dff2:	d00a      	beq.n	800e00a <_scanf_float+0x356>
 800dff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dff8:	463a      	mov	r2, r7
 800dffa:	4640      	mov	r0, r8
 800dffc:	1eb5      	subs	r5, r6, #2
 800dffe:	4798      	blx	r3
 800e000:	6923      	ldr	r3, [r4, #16]
 800e002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e006:	3b01      	subs	r3, #1
 800e008:	6123      	str	r3, [r4, #16]
 800e00a:	462e      	mov	r6, r5
 800e00c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e010:	463a      	mov	r2, r7
 800e012:	4640      	mov	r0, r8
 800e014:	4798      	blx	r3
 800e016:	6822      	ldr	r2, [r4, #0]
 800e018:	f012 0210 	ands.w	r2, r2, #16
 800e01c:	d001      	beq.n	800e022 <_scanf_float+0x36e>
 800e01e:	2000      	movs	r0, #0
 800e020:	e68c      	b.n	800dd3c <_scanf_float+0x88>
 800e022:	7032      	strb	r2, [r6, #0]
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e02a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e02e:	d11c      	bne.n	800e06a <_scanf_float+0x3b6>
 800e030:	9b02      	ldr	r3, [sp, #8]
 800e032:	454b      	cmp	r3, r9
 800e034:	eba3 0209 	sub.w	r2, r3, r9
 800e038:	d123      	bne.n	800e082 <_scanf_float+0x3ce>
 800e03a:	2200      	movs	r2, #0
 800e03c:	9901      	ldr	r1, [sp, #4]
 800e03e:	4640      	mov	r0, r8
 800e040:	f002 fc22 	bl	8010888 <_strtod_r>
 800e044:	6821      	ldr	r1, [r4, #0]
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	f011 0f02 	tst.w	r1, #2
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	ec57 6b10 	vmov	r6, r7, d0
 800e052:	f103 0204 	add.w	r2, r3, #4
 800e056:	d01f      	beq.n	800e098 <_scanf_float+0x3e4>
 800e058:	9903      	ldr	r1, [sp, #12]
 800e05a:	600a      	str	r2, [r1, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	e9c3 6700 	strd	r6, r7, [r3]
 800e062:	68e3      	ldr	r3, [r4, #12]
 800e064:	3301      	adds	r3, #1
 800e066:	60e3      	str	r3, [r4, #12]
 800e068:	e7d9      	b.n	800e01e <_scanf_float+0x36a>
 800e06a:	9b04      	ldr	r3, [sp, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0e4      	beq.n	800e03a <_scanf_float+0x386>
 800e070:	9905      	ldr	r1, [sp, #20]
 800e072:	230a      	movs	r3, #10
 800e074:	4640      	mov	r0, r8
 800e076:	3101      	adds	r1, #1
 800e078:	f7ff f9b6 	bl	800d3e8 <_strtol_r>
 800e07c:	9b04      	ldr	r3, [sp, #16]
 800e07e:	9e05      	ldr	r6, [sp, #20]
 800e080:	1ac2      	subs	r2, r0, r3
 800e082:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e086:	4912      	ldr	r1, [pc, #72]	@ (800e0d0 <_scanf_float+0x41c>)
 800e088:	429e      	cmp	r6, r3
 800e08a:	bf28      	it	cs
 800e08c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e090:	4630      	mov	r0, r6
 800e092:	f000 f8e3 	bl	800e25c <siprintf>
 800e096:	e7d0      	b.n	800e03a <_scanf_float+0x386>
 800e098:	f011 0f04 	tst.w	r1, #4
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	600a      	str	r2, [r1, #0]
 800e0a0:	d1dc      	bne.n	800e05c <_scanf_float+0x3a8>
 800e0a2:	681d      	ldr	r5, [r3, #0]
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	f7f2 fd52 	bl	8000b54 <__aeabi_dcmpun>
 800e0b0:	b128      	cbz	r0, 800e0be <_scanf_float+0x40a>
 800e0b2:	4808      	ldr	r0, [pc, #32]	@ (800e0d4 <_scanf_float+0x420>)
 800e0b4:	f000 f9d0 	bl	800e458 <nanf>
 800e0b8:	ed85 0a00 	vstr	s0, [r5]
 800e0bc:	e7d1      	b.n	800e062 <_scanf_float+0x3ae>
 800e0be:	4630      	mov	r0, r6
 800e0c0:	4639      	mov	r1, r7
 800e0c2:	f7f2 fda5 	bl	8000c10 <__aeabi_d2f>
 800e0c6:	6028      	str	r0, [r5, #0]
 800e0c8:	e7cb      	b.n	800e062 <_scanf_float+0x3ae>
 800e0ca:	f04f 0900 	mov.w	r9, #0
 800e0ce:	e62a      	b.n	800dd26 <_scanf_float+0x72>
 800e0d0:	0801463d 	.word	0x0801463d
 800e0d4:	080148d4 	.word	0x080148d4

0800e0d8 <std>:
 800e0d8:	2300      	movs	r3, #0
 800e0da:	b510      	push	{r4, lr}
 800e0dc:	4604      	mov	r4, r0
 800e0de:	6083      	str	r3, [r0, #8]
 800e0e0:	8181      	strh	r1, [r0, #12]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0e6:	81c2      	strh	r2, [r0, #14]
 800e0e8:	2208      	movs	r2, #8
 800e0ea:	6183      	str	r3, [r0, #24]
 800e0ec:	e9c0 3300 	strd	r3, r3, [r0]
 800e0f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0f4:	305c      	adds	r0, #92	@ 0x5c
 800e0f6:	f000 f914 	bl	800e322 <memset>
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <std+0x58>)
 800e0fc:	6224      	str	r4, [r4, #32]
 800e0fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800e100:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <std+0x5c>)
 800e102:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e104:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <std+0x60>)
 800e106:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e108:	4b0c      	ldr	r3, [pc, #48]	@ (800e13c <std+0x64>)
 800e10a:	6323      	str	r3, [r4, #48]	@ 0x30
 800e10c:	4b0c      	ldr	r3, [pc, #48]	@ (800e140 <std+0x68>)
 800e10e:	429c      	cmp	r4, r3
 800e110:	d006      	beq.n	800e120 <std+0x48>
 800e112:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e116:	4294      	cmp	r4, r2
 800e118:	d002      	beq.n	800e120 <std+0x48>
 800e11a:	33d0      	adds	r3, #208	@ 0xd0
 800e11c:	429c      	cmp	r4, r3
 800e11e:	d105      	bne.n	800e12c <std+0x54>
 800e120:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e128:	f000 b978 	b.w	800e41c <__retarget_lock_init_recursive>
 800e12c:	bd10      	pop	{r4, pc}
 800e12e:	bf00      	nop
 800e130:	0800e29d 	.word	0x0800e29d
 800e134:	0800e2bf 	.word	0x0800e2bf
 800e138:	0800e2f7 	.word	0x0800e2f7
 800e13c:	0800e31b 	.word	0x0800e31b
 800e140:	2003b278 	.word	0x2003b278

0800e144 <stdio_exit_handler>:
 800e144:	4a02      	ldr	r2, [pc, #8]	@ (800e150 <stdio_exit_handler+0xc>)
 800e146:	4903      	ldr	r1, [pc, #12]	@ (800e154 <stdio_exit_handler+0x10>)
 800e148:	4803      	ldr	r0, [pc, #12]	@ (800e158 <stdio_exit_handler+0x14>)
 800e14a:	f000 b869 	b.w	800e220 <_fwalk_sglue>
 800e14e:	bf00      	nop
 800e150:	20000028 	.word	0x20000028
 800e154:	08010c4d 	.word	0x08010c4d
 800e158:	20000038 	.word	0x20000038

0800e15c <cleanup_stdio>:
 800e15c:	6841      	ldr	r1, [r0, #4]
 800e15e:	4b0c      	ldr	r3, [pc, #48]	@ (800e190 <cleanup_stdio+0x34>)
 800e160:	4299      	cmp	r1, r3
 800e162:	b510      	push	{r4, lr}
 800e164:	4604      	mov	r4, r0
 800e166:	d001      	beq.n	800e16c <cleanup_stdio+0x10>
 800e168:	f002 fd70 	bl	8010c4c <_fflush_r>
 800e16c:	68a1      	ldr	r1, [r4, #8]
 800e16e:	4b09      	ldr	r3, [pc, #36]	@ (800e194 <cleanup_stdio+0x38>)
 800e170:	4299      	cmp	r1, r3
 800e172:	d002      	beq.n	800e17a <cleanup_stdio+0x1e>
 800e174:	4620      	mov	r0, r4
 800e176:	f002 fd69 	bl	8010c4c <_fflush_r>
 800e17a:	68e1      	ldr	r1, [r4, #12]
 800e17c:	4b06      	ldr	r3, [pc, #24]	@ (800e198 <cleanup_stdio+0x3c>)
 800e17e:	4299      	cmp	r1, r3
 800e180:	d004      	beq.n	800e18c <cleanup_stdio+0x30>
 800e182:	4620      	mov	r0, r4
 800e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e188:	f002 bd60 	b.w	8010c4c <_fflush_r>
 800e18c:	bd10      	pop	{r4, pc}
 800e18e:	bf00      	nop
 800e190:	2003b278 	.word	0x2003b278
 800e194:	2003b2e0 	.word	0x2003b2e0
 800e198:	2003b348 	.word	0x2003b348

0800e19c <global_stdio_init.part.0>:
 800e19c:	b510      	push	{r4, lr}
 800e19e:	4b0b      	ldr	r3, [pc, #44]	@ (800e1cc <global_stdio_init.part.0+0x30>)
 800e1a0:	2104      	movs	r1, #4
 800e1a2:	4c0b      	ldr	r4, [pc, #44]	@ (800e1d0 <global_stdio_init.part.0+0x34>)
 800e1a4:	4a0b      	ldr	r2, [pc, #44]	@ (800e1d4 <global_stdio_init.part.0+0x38>)
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f7ff ff94 	bl	800e0d8 <std>
 800e1b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	2109      	movs	r1, #9
 800e1b8:	f7ff ff8e 	bl	800e0d8 <std>
 800e1bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	2112      	movs	r1, #18
 800e1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c8:	f7ff bf86 	b.w	800e0d8 <std>
 800e1cc:	2003b3b0 	.word	0x2003b3b0
 800e1d0:	2003b278 	.word	0x2003b278
 800e1d4:	0800e145 	.word	0x0800e145

0800e1d8 <__sfp_lock_acquire>:
 800e1d8:	4801      	ldr	r0, [pc, #4]	@ (800e1e0 <__sfp_lock_acquire+0x8>)
 800e1da:	f000 b920 	b.w	800e41e <__retarget_lock_acquire_recursive>
 800e1de:	bf00      	nop
 800e1e0:	2003b3b9 	.word	0x2003b3b9

0800e1e4 <__sfp_lock_release>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	@ (800e1ec <__sfp_lock_release+0x8>)
 800e1e6:	f000 b91b 	b.w	800e420 <__retarget_lock_release_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	2003b3b9 	.word	0x2003b3b9

0800e1f0 <__sinit>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	f7ff fff0 	bl	800e1d8 <__sfp_lock_acquire>
 800e1f8:	6a23      	ldr	r3, [r4, #32]
 800e1fa:	b11b      	cbz	r3, 800e204 <__sinit+0x14>
 800e1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e200:	f7ff bff0 	b.w	800e1e4 <__sfp_lock_release>
 800e204:	4b04      	ldr	r3, [pc, #16]	@ (800e218 <__sinit+0x28>)
 800e206:	6223      	str	r3, [r4, #32]
 800e208:	4b04      	ldr	r3, [pc, #16]	@ (800e21c <__sinit+0x2c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1f5      	bne.n	800e1fc <__sinit+0xc>
 800e210:	f7ff ffc4 	bl	800e19c <global_stdio_init.part.0>
 800e214:	e7f2      	b.n	800e1fc <__sinit+0xc>
 800e216:	bf00      	nop
 800e218:	0800e15d 	.word	0x0800e15d
 800e21c:	2003b3b0 	.word	0x2003b3b0

0800e220 <_fwalk_sglue>:
 800e220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e224:	4607      	mov	r7, r0
 800e226:	4688      	mov	r8, r1
 800e228:	4614      	mov	r4, r2
 800e22a:	2600      	movs	r6, #0
 800e22c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e230:	f1b9 0901 	subs.w	r9, r9, #1
 800e234:	d505      	bpl.n	800e242 <_fwalk_sglue+0x22>
 800e236:	6824      	ldr	r4, [r4, #0]
 800e238:	2c00      	cmp	r4, #0
 800e23a:	d1f7      	bne.n	800e22c <_fwalk_sglue+0xc>
 800e23c:	4630      	mov	r0, r6
 800e23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e242:	89ab      	ldrh	r3, [r5, #12]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d907      	bls.n	800e258 <_fwalk_sglue+0x38>
 800e248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e24c:	3301      	adds	r3, #1
 800e24e:	d003      	beq.n	800e258 <_fwalk_sglue+0x38>
 800e250:	4629      	mov	r1, r5
 800e252:	4638      	mov	r0, r7
 800e254:	47c0      	blx	r8
 800e256:	4306      	orrs	r6, r0
 800e258:	3568      	adds	r5, #104	@ 0x68
 800e25a:	e7e9      	b.n	800e230 <_fwalk_sglue+0x10>

0800e25c <siprintf>:
 800e25c:	b40e      	push	{r1, r2, r3}
 800e25e:	b500      	push	{lr}
 800e260:	b09c      	sub	sp, #112	@ 0x70
 800e262:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e266:	ab1d      	add	r3, sp, #116	@ 0x74
 800e268:	9002      	str	r0, [sp, #8]
 800e26a:	9006      	str	r0, [sp, #24]
 800e26c:	9107      	str	r1, [sp, #28]
 800e26e:	9104      	str	r1, [sp, #16]
 800e270:	4808      	ldr	r0, [pc, #32]	@ (800e294 <siprintf+0x38>)
 800e272:	4909      	ldr	r1, [pc, #36]	@ (800e298 <siprintf+0x3c>)
 800e274:	f853 2b04 	ldr.w	r2, [r3], #4
 800e278:	9105      	str	r1, [sp, #20]
 800e27a:	a902      	add	r1, sp, #8
 800e27c:	6800      	ldr	r0, [r0, #0]
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	f002 fb64 	bl	801094c <_svfiprintf_r>
 800e284:	9b02      	ldr	r3, [sp, #8]
 800e286:	2200      	movs	r2, #0
 800e288:	701a      	strb	r2, [r3, #0]
 800e28a:	b01c      	add	sp, #112	@ 0x70
 800e28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e290:	b003      	add	sp, #12
 800e292:	4770      	bx	lr
 800e294:	20000034 	.word	0x20000034
 800e298:	ffff0208 	.word	0xffff0208

0800e29c <__sread>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	460c      	mov	r4, r1
 800e2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a4:	f000 f86c 	bl	800e380 <_read_r>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	bfab      	itete	ge
 800e2ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e2b0:	181b      	addge	r3, r3, r0
 800e2b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e2b6:	bfac      	ite	ge
 800e2b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e2ba:	81a3      	strhlt	r3, [r4, #12]
 800e2bc:	bd10      	pop	{r4, pc}

0800e2be <__swrite>:
 800e2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c2:	461f      	mov	r7, r3
 800e2c4:	898b      	ldrh	r3, [r1, #12]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	05db      	lsls	r3, r3, #23
 800e2cc:	4616      	mov	r6, r2
 800e2ce:	d505      	bpl.n	800e2dc <__swrite+0x1e>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d8:	f000 f840 	bl	800e35c <_lseek_r>
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	4632      	mov	r2, r6
 800e2e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2ea:	81a3      	strh	r3, [r4, #12]
 800e2ec:	463b      	mov	r3, r7
 800e2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	f000 b857 	b.w	800e3a4 <_write_r>

0800e2f6 <__sseek>:
 800e2f6:	b510      	push	{r4, lr}
 800e2f8:	460c      	mov	r4, r1
 800e2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fe:	f000 f82d 	bl	800e35c <_lseek_r>
 800e302:	1c43      	adds	r3, r0, #1
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	bf15      	itete	ne
 800e308:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e30a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e30e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e312:	81a3      	strheq	r3, [r4, #12]
 800e314:	bf18      	it	ne
 800e316:	81a3      	strhne	r3, [r4, #12]
 800e318:	bd10      	pop	{r4, pc}

0800e31a <__sclose>:
 800e31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31e:	f000 b80d 	b.w	800e33c <_close_r>

0800e322 <memset>:
 800e322:	4402      	add	r2, r0
 800e324:	4603      	mov	r3, r0
 800e326:	4293      	cmp	r3, r2
 800e328:	d100      	bne.n	800e32c <memset+0xa>
 800e32a:	4770      	bx	lr
 800e32c:	f803 1b01 	strb.w	r1, [r3], #1
 800e330:	e7f9      	b.n	800e326 <memset+0x4>
	...

0800e334 <_localeconv_r>:
 800e334:	4800      	ldr	r0, [pc, #0]	@ (800e338 <_localeconv_r+0x4>)
 800e336:	4770      	bx	lr
 800e338:	20000174 	.word	0x20000174

0800e33c <_close_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	2300      	movs	r3, #0
 800e340:	4d05      	ldr	r5, [pc, #20]	@ (800e358 <_close_r+0x1c>)
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	f7f6 fdfa 	bl	8004f40 <_close>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_close_r+0x1a>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_close_r+0x1a>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	2003b3b4 	.word	0x2003b3b4

0800e35c <_lseek_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4604      	mov	r4, r0
 800e360:	4d06      	ldr	r5, [pc, #24]	@ (800e37c <_lseek_r+0x20>)
 800e362:	4608      	mov	r0, r1
 800e364:	4611      	mov	r1, r2
 800e366:	2200      	movs	r2, #0
 800e368:	602a      	str	r2, [r5, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f7f6 fe0f 	bl	8004f8e <_lseek>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_lseek_r+0x1e>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_lseek_r+0x1e>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	2003b3b4 	.word	0x2003b3b4

0800e380 <_read_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4604      	mov	r4, r0
 800e384:	4d06      	ldr	r5, [pc, #24]	@ (800e3a0 <_read_r+0x20>)
 800e386:	4608      	mov	r0, r1
 800e388:	4611      	mov	r1, r2
 800e38a:	2200      	movs	r2, #0
 800e38c:	602a      	str	r2, [r5, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	f7f6 fd9d 	bl	8004ece <_read>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	d102      	bne.n	800e39e <_read_r+0x1e>
 800e398:	682b      	ldr	r3, [r5, #0]
 800e39a:	b103      	cbz	r3, 800e39e <_read_r+0x1e>
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	2003b3b4 	.word	0x2003b3b4

0800e3a4 <_write_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4d06      	ldr	r5, [pc, #24]	@ (800e3c4 <_write_r+0x20>)
 800e3aa:	4608      	mov	r0, r1
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	602a      	str	r2, [r5, #0]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f7f6 fda8 	bl	8004f08 <_write>
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	d102      	bne.n	800e3c2 <_write_r+0x1e>
 800e3bc:	682b      	ldr	r3, [r5, #0]
 800e3be:	b103      	cbz	r3, 800e3c2 <_write_r+0x1e>
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	2003b3b4 	.word	0x2003b3b4

0800e3c8 <__errno>:
 800e3c8:	4b01      	ldr	r3, [pc, #4]	@ (800e3d0 <__errno+0x8>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	20000034 	.word	0x20000034

0800e3d4 <__libc_init_array>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	4d0d      	ldr	r5, [pc, #52]	@ (800e40c <__libc_init_array+0x38>)
 800e3d8:	2600      	movs	r6, #0
 800e3da:	4c0d      	ldr	r4, [pc, #52]	@ (800e410 <__libc_init_array+0x3c>)
 800e3dc:	1b64      	subs	r4, r4, r5
 800e3de:	10a4      	asrs	r4, r4, #2
 800e3e0:	42a6      	cmp	r6, r4
 800e3e2:	d109      	bne.n	800e3f8 <__libc_init_array+0x24>
 800e3e4:	4d0b      	ldr	r5, [pc, #44]	@ (800e414 <__libc_init_array+0x40>)
 800e3e6:	2600      	movs	r6, #0
 800e3e8:	4c0b      	ldr	r4, [pc, #44]	@ (800e418 <__libc_init_array+0x44>)
 800e3ea:	f005 fcfd 	bl	8013de8 <_init>
 800e3ee:	1b64      	subs	r4, r4, r5
 800e3f0:	10a4      	asrs	r4, r4, #2
 800e3f2:	42a6      	cmp	r6, r4
 800e3f4:	d105      	bne.n	800e402 <__libc_init_array+0x2e>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fc:	3601      	adds	r6, #1
 800e3fe:	4798      	blx	r3
 800e400:	e7ee      	b.n	800e3e0 <__libc_init_array+0xc>
 800e402:	f855 3b04 	ldr.w	r3, [r5], #4
 800e406:	3601      	adds	r6, #1
 800e408:	4798      	blx	r3
 800e40a:	e7f2      	b.n	800e3f2 <__libc_init_array+0x1e>
 800e40c:	08014bb8 	.word	0x08014bb8
 800e410:	08014bb8 	.word	0x08014bb8
 800e414:	08014bb8 	.word	0x08014bb8
 800e418:	08014bbc 	.word	0x08014bbc

0800e41c <__retarget_lock_init_recursive>:
 800e41c:	4770      	bx	lr

0800e41e <__retarget_lock_acquire_recursive>:
 800e41e:	4770      	bx	lr

0800e420 <__retarget_lock_release_recursive>:
 800e420:	4770      	bx	lr

0800e422 <memchr>:
 800e422:	b2c9      	uxtb	r1, r1
 800e424:	4603      	mov	r3, r0
 800e426:	4402      	add	r2, r0
 800e428:	b510      	push	{r4, lr}
 800e42a:	4293      	cmp	r3, r2
 800e42c:	4618      	mov	r0, r3
 800e42e:	d101      	bne.n	800e434 <memchr+0x12>
 800e430:	2000      	movs	r0, #0
 800e432:	e003      	b.n	800e43c <memchr+0x1a>
 800e434:	7804      	ldrb	r4, [r0, #0]
 800e436:	3301      	adds	r3, #1
 800e438:	428c      	cmp	r4, r1
 800e43a:	d1f6      	bne.n	800e42a <memchr+0x8>
 800e43c:	bd10      	pop	{r4, pc}

0800e43e <memcpy>:
 800e43e:	440a      	add	r2, r1
 800e440:	1e43      	subs	r3, r0, #1
 800e442:	4291      	cmp	r1, r2
 800e444:	d100      	bne.n	800e448 <memcpy+0xa>
 800e446:	4770      	bx	lr
 800e448:	b510      	push	{r4, lr}
 800e44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e44e:	4291      	cmp	r1, r2
 800e450:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e454:	d1f9      	bne.n	800e44a <memcpy+0xc>
 800e456:	bd10      	pop	{r4, pc}

0800e458 <nanf>:
 800e458:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e460 <nanf+0x8>
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	7fc00000 	.word	0x7fc00000

0800e464 <quorem>:
 800e464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e468:	6903      	ldr	r3, [r0, #16]
 800e46a:	4607      	mov	r7, r0
 800e46c:	690c      	ldr	r4, [r1, #16]
 800e46e:	42a3      	cmp	r3, r4
 800e470:	f2c0 8083 	blt.w	800e57a <quorem+0x116>
 800e474:	3c01      	subs	r4, #1
 800e476:	f100 0514 	add.w	r5, r0, #20
 800e47a:	f101 0814 	add.w	r8, r1, #20
 800e47e:	00a3      	lsls	r3, r4, #2
 800e480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e494:	3301      	adds	r3, #1
 800e496:	429a      	cmp	r2, r3
 800e498:	fbb2 f6f3 	udiv	r6, r2, r3
 800e49c:	d331      	bcc.n	800e502 <quorem+0x9e>
 800e49e:	f04f 0a00 	mov.w	sl, #0
 800e4a2:	46c4      	mov	ip, r8
 800e4a4:	46ae      	mov	lr, r5
 800e4a6:	46d3      	mov	fp, sl
 800e4a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4ac:	b298      	uxth	r0, r3
 800e4ae:	45e1      	cmp	r9, ip
 800e4b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e4b4:	fb06 a000 	mla	r0, r6, r0, sl
 800e4b8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e4bc:	b280      	uxth	r0, r0
 800e4be:	fb06 2303 	mla	r3, r6, r3, r2
 800e4c2:	f8de 2000 	ldr.w	r2, [lr]
 800e4c6:	b292      	uxth	r2, r2
 800e4c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4cc:	eba2 0200 	sub.w	r2, r2, r0
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	f8de 0000 	ldr.w	r0, [lr]
 800e4d6:	445a      	add	r2, fp
 800e4d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4ea:	f84e 2b04 	str.w	r2, [lr], #4
 800e4ee:	d2db      	bcs.n	800e4a8 <quorem+0x44>
 800e4f0:	9b00      	ldr	r3, [sp, #0]
 800e4f2:	58eb      	ldr	r3, [r5, r3]
 800e4f4:	b92b      	cbnz	r3, 800e502 <quorem+0x9e>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	d330      	bcc.n	800e562 <quorem+0xfe>
 800e500:	613c      	str	r4, [r7, #16]
 800e502:	4638      	mov	r0, r7
 800e504:	f001 f9c6 	bl	800f894 <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	db26      	blt.n	800e55a <quorem+0xf6>
 800e50c:	4629      	mov	r1, r5
 800e50e:	2000      	movs	r0, #0
 800e510:	f858 2b04 	ldr.w	r2, [r8], #4
 800e514:	f8d1 c000 	ldr.w	ip, [r1]
 800e518:	fa1f fe82 	uxth.w	lr, r2
 800e51c:	45c1      	cmp	r9, r8
 800e51e:	fa1f f38c 	uxth.w	r3, ip
 800e522:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e526:	eba3 030e 	sub.w	r3, r3, lr
 800e52a:	4403      	add	r3, r0
 800e52c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e530:	b29b      	uxth	r3, r3
 800e532:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e53a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e53e:	f841 3b04 	str.w	r3, [r1], #4
 800e542:	d2e5      	bcs.n	800e510 <quorem+0xac>
 800e544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54c:	b922      	cbnz	r2, 800e558 <quorem+0xf4>
 800e54e:	3b04      	subs	r3, #4
 800e550:	429d      	cmp	r5, r3
 800e552:	461a      	mov	r2, r3
 800e554:	d30b      	bcc.n	800e56e <quorem+0x10a>
 800e556:	613c      	str	r4, [r7, #16]
 800e558:	3601      	adds	r6, #1
 800e55a:	4630      	mov	r0, r6
 800e55c:	b003      	add	sp, #12
 800e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e562:	6812      	ldr	r2, [r2, #0]
 800e564:	3b04      	subs	r3, #4
 800e566:	2a00      	cmp	r2, #0
 800e568:	d1ca      	bne.n	800e500 <quorem+0x9c>
 800e56a:	3c01      	subs	r4, #1
 800e56c:	e7c5      	b.n	800e4fa <quorem+0x96>
 800e56e:	6812      	ldr	r2, [r2, #0]
 800e570:	3b04      	subs	r3, #4
 800e572:	2a00      	cmp	r2, #0
 800e574:	d1ef      	bne.n	800e556 <quorem+0xf2>
 800e576:	3c01      	subs	r4, #1
 800e578:	e7ea      	b.n	800e550 <quorem+0xec>
 800e57a:	2000      	movs	r0, #0
 800e57c:	e7ee      	b.n	800e55c <quorem+0xf8>
	...

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	69c7      	ldr	r7, [r0, #28]
 800e586:	b099      	sub	sp, #100	@ 0x64
 800e588:	4683      	mov	fp, r0
 800e58a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e58c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e58e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e590:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e592:	ec55 4b10 	vmov	r4, r5, d0
 800e596:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e59a:	b97f      	cbnz	r7, 800e5bc <_dtoa_r+0x3c>
 800e59c:	2010      	movs	r0, #16
 800e59e:	f000 fdfd 	bl	800f19c <malloc>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_dtoa_r+0x34>
 800e5aa:	4ba7      	ldr	r3, [pc, #668]	@ (800e848 <_dtoa_r+0x2c8>)
 800e5ac:	21ef      	movs	r1, #239	@ 0xef
 800e5ae:	48a7      	ldr	r0, [pc, #668]	@ (800e84c <_dtoa_r+0x2cc>)
 800e5b0:	f002 fbba 	bl	8010d28 <__assert_func>
 800e5b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5b8:	6007      	str	r7, [r0, #0]
 800e5ba:	60c7      	str	r7, [r0, #12]
 800e5bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5c0:	6819      	ldr	r1, [r3, #0]
 800e5c2:	b159      	cbz	r1, 800e5dc <_dtoa_r+0x5c>
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4658      	mov	r0, fp
 800e5ca:	4093      	lsls	r3, r2
 800e5cc:	604a      	str	r2, [r1, #4]
 800e5ce:	608b      	str	r3, [r1, #8]
 800e5d0:	f000 feda 	bl	800f388 <_Bfree>
 800e5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	1e2b      	subs	r3, r5, #0
 800e5de:	bfb7      	itett	lt
 800e5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5e4:	2300      	movge	r3, #0
 800e5e6:	2201      	movlt	r2, #1
 800e5e8:	9303      	strlt	r3, [sp, #12]
 800e5ea:	bfa8      	it	ge
 800e5ec:	6033      	strge	r3, [r6, #0]
 800e5ee:	9f03      	ldr	r7, [sp, #12]
 800e5f0:	4b97      	ldr	r3, [pc, #604]	@ (800e850 <_dtoa_r+0x2d0>)
 800e5f2:	bfb8      	it	lt
 800e5f4:	6032      	strlt	r2, [r6, #0]
 800e5f6:	43bb      	bics	r3, r7
 800e5f8:	d112      	bne.n	800e620 <_dtoa_r+0xa0>
 800e5fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e606:	4323      	orrs	r3, r4
 800e608:	f000 854c 	beq.w	800f0a4 <_dtoa_r+0xb24>
 800e60c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e60e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e864 <_dtoa_r+0x2e4>
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 854e 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800e618:	f10a 0303 	add.w	r3, sl, #3
 800e61c:	f000 bd48 	b.w	800f0b0 <_dtoa_r+0xb30>
 800e620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e624:	2200      	movs	r2, #0
 800e626:	2300      	movs	r3, #0
 800e628:	ec51 0b17 	vmov	r0, r1, d7
 800e62c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e630:	f7f2 fa5e 	bl	8000af0 <__aeabi_dcmpeq>
 800e634:	4680      	mov	r8, r0
 800e636:	b158      	cbz	r0, 800e650 <_dtoa_r+0xd0>
 800e638:	2301      	movs	r3, #1
 800e63a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e63c:	6013      	str	r3, [r2, #0]
 800e63e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e640:	b113      	cbz	r3, 800e648 <_dtoa_r+0xc8>
 800e642:	4b84      	ldr	r3, [pc, #528]	@ (800e854 <_dtoa_r+0x2d4>)
 800e644:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e646:	6013      	str	r3, [r2, #0]
 800e648:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e868 <_dtoa_r+0x2e8>
 800e64c:	f000 bd32 	b.w	800f0b4 <_dtoa_r+0xb34>
 800e650:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e654:	aa16      	add	r2, sp, #88	@ 0x58
 800e656:	a917      	add	r1, sp, #92	@ 0x5c
 800e658:	4658      	mov	r0, fp
 800e65a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e65e:	f001 fa41 	bl	800fae4 <__d2b>
 800e662:	4681      	mov	r9, r0
 800e664:	2e00      	cmp	r6, #0
 800e666:	d075      	beq.n	800e754 <_dtoa_r+0x1d4>
 800e668:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e66a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e66e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e676:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e67a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e67e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e682:	4619      	mov	r1, r3
 800e684:	2200      	movs	r2, #0
 800e686:	4b74      	ldr	r3, [pc, #464]	@ (800e858 <_dtoa_r+0x2d8>)
 800e688:	f7f1 fe12 	bl	80002b0 <__aeabi_dsub>
 800e68c:	a368      	add	r3, pc, #416	@ (adr r3, 800e830 <_dtoa_r+0x2b0>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	f7f1 ffc5 	bl	8000620 <__aeabi_dmul>
 800e696:	a368      	add	r3, pc, #416	@ (adr r3, 800e838 <_dtoa_r+0x2b8>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f1 fe0a 	bl	80002b4 <__adddf3>
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7f1 ff51 	bl	800054c <__aeabi_i2d>
 800e6aa:	a365      	add	r3, pc, #404	@ (adr r3, 800e840 <_dtoa_r+0x2c0>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 ffb6 	bl	8000620 <__aeabi_dmul>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f7f1 fdfa 	bl	80002b4 <__adddf3>
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	f7f2 fa5c 	bl	8000b80 <__aeabi_d2iz>
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f2 fa17 	bl	8000b04 <__aeabi_dcmplt>
 800e6d6:	b140      	cbz	r0, 800e6ea <_dtoa_r+0x16a>
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f7f1 ff37 	bl	800054c <__aeabi_i2d>
 800e6de:	4622      	mov	r2, r4
 800e6e0:	462b      	mov	r3, r5
 800e6e2:	f7f2 fa05 	bl	8000af0 <__aeabi_dcmpeq>
 800e6e6:	b900      	cbnz	r0, 800e6ea <_dtoa_r+0x16a>
 800e6e8:	3f01      	subs	r7, #1
 800e6ea:	2f16      	cmp	r7, #22
 800e6ec:	d851      	bhi.n	800e792 <_dtoa_r+0x212>
 800e6ee:	4b5b      	ldr	r3, [pc, #364]	@ (800e85c <_dtoa_r+0x2dc>)
 800e6f0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fc:	f7f2 fa02 	bl	8000b04 <__aeabi_dcmplt>
 800e700:	2800      	cmp	r0, #0
 800e702:	d048      	beq.n	800e796 <_dtoa_r+0x216>
 800e704:	3f01      	subs	r7, #1
 800e706:	2300      	movs	r3, #0
 800e708:	9312      	str	r3, [sp, #72]	@ 0x48
 800e70a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e70c:	1b9b      	subs	r3, r3, r6
 800e70e:	1e5a      	subs	r2, r3, #1
 800e710:	bf46      	itte	mi
 800e712:	f1c3 0801 	rsbmi	r8, r3, #1
 800e716:	2300      	movmi	r3, #0
 800e718:	f04f 0800 	movpl.w	r8, #0
 800e71c:	9208      	str	r2, [sp, #32]
 800e71e:	bf48      	it	mi
 800e720:	9308      	strmi	r3, [sp, #32]
 800e722:	2f00      	cmp	r7, #0
 800e724:	db39      	blt.n	800e79a <_dtoa_r+0x21a>
 800e726:	9b08      	ldr	r3, [sp, #32]
 800e728:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e72a:	443b      	add	r3, r7
 800e72c:	9308      	str	r3, [sp, #32]
 800e72e:	2300      	movs	r3, #0
 800e730:	930a      	str	r3, [sp, #40]	@ 0x28
 800e732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e734:	2b09      	cmp	r3, #9
 800e736:	d864      	bhi.n	800e802 <_dtoa_r+0x282>
 800e738:	2b05      	cmp	r3, #5
 800e73a:	bfc5      	ittet	gt
 800e73c:	3b04      	subgt	r3, #4
 800e73e:	2400      	movgt	r4, #0
 800e740:	2401      	movle	r4, #1
 800e742:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e746:	3b02      	subs	r3, #2
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d865      	bhi.n	800e818 <_dtoa_r+0x298>
 800e74c:	e8df f003 	tbb	[pc, r3]
 800e750:	5737392c 	.word	0x5737392c
 800e754:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e758:	441e      	add	r6, r3
 800e75a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e75e:	2b20      	cmp	r3, #32
 800e760:	bfc9      	itett	gt
 800e762:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e766:	f1c3 0320 	rsble	r3, r3, #32
 800e76a:	409f      	lslgt	r7, r3
 800e76c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e770:	bfd8      	it	le
 800e772:	fa04 f003 	lslle.w	r0, r4, r3
 800e776:	f106 36ff 	add.w	r6, r6, #4294967295
 800e77a:	bfc4      	itt	gt
 800e77c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e780:	ea47 0003 	orrgt.w	r0, r7, r3
 800e784:	f7f1 fed2 	bl	800052c <__aeabi_ui2d>
 800e788:	2201      	movs	r2, #1
 800e78a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e78e:	9214      	str	r2, [sp, #80]	@ 0x50
 800e790:	e777      	b.n	800e682 <_dtoa_r+0x102>
 800e792:	2301      	movs	r3, #1
 800e794:	e7b8      	b.n	800e708 <_dtoa_r+0x188>
 800e796:	9012      	str	r0, [sp, #72]	@ 0x48
 800e798:	e7b7      	b.n	800e70a <_dtoa_r+0x18a>
 800e79a:	427b      	negs	r3, r7
 800e79c:	eba8 0807 	sub.w	r8, r8, r7
 800e7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7a6:	e7c4      	b.n	800e732 <_dtoa_r+0x1b2>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	dc35      	bgt.n	800e81e <_dtoa_r+0x29e>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	9307      	str	r3, [sp, #28]
 800e7ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7bc:	e00b      	b.n	800e7d6 <_dtoa_r+0x256>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e7f3      	b.n	800e7aa <_dtoa_r+0x22a>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c8:	18fb      	adds	r3, r7, r3
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	9307      	str	r3, [sp, #28]
 800e7d2:	bfb8      	it	lt
 800e7d4:	2301      	movlt	r3, #1
 800e7d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e7da:	2100      	movs	r1, #0
 800e7dc:	2204      	movs	r2, #4
 800e7de:	f102 0514 	add.w	r5, r2, #20
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	d91f      	bls.n	800e826 <_dtoa_r+0x2a6>
 800e7e6:	6041      	str	r1, [r0, #4]
 800e7e8:	4658      	mov	r0, fp
 800e7ea:	f000 fd8d 	bl	800f308 <_Balloc>
 800e7ee:	4682      	mov	sl, r0
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d13b      	bne.n	800e86c <_dtoa_r+0x2ec>
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e860 <_dtoa_r+0x2e0>)
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7fc:	e6d7      	b.n	800e5ae <_dtoa_r+0x2e>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e7e0      	b.n	800e7c4 <_dtoa_r+0x244>
 800e802:	2401      	movs	r4, #1
 800e804:	2300      	movs	r3, #0
 800e806:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e808:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80a:	f04f 33ff 	mov.w	r3, #4294967295
 800e80e:	2200      	movs	r2, #0
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	9307      	str	r3, [sp, #28]
 800e814:	2312      	movs	r3, #18
 800e816:	e7d0      	b.n	800e7ba <_dtoa_r+0x23a>
 800e818:	2301      	movs	r3, #1
 800e81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e81c:	e7f5      	b.n	800e80a <_dtoa_r+0x28a>
 800e81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	9307      	str	r3, [sp, #28]
 800e824:	e7d7      	b.n	800e7d6 <_dtoa_r+0x256>
 800e826:	3101      	adds	r1, #1
 800e828:	0052      	lsls	r2, r2, #1
 800e82a:	e7d8      	b.n	800e7de <_dtoa_r+0x25e>
 800e82c:	f3af 8000 	nop.w
 800e830:	636f4361 	.word	0x636f4361
 800e834:	3fd287a7 	.word	0x3fd287a7
 800e838:	8b60c8b3 	.word	0x8b60c8b3
 800e83c:	3fc68a28 	.word	0x3fc68a28
 800e840:	509f79fb 	.word	0x509f79fb
 800e844:	3fd34413 	.word	0x3fd34413
 800e848:	0801464f 	.word	0x0801464f
 800e84c:	08014666 	.word	0x08014666
 800e850:	7ff00000 	.word	0x7ff00000
 800e854:	0801461a 	.word	0x0801461a
 800e858:	3ff80000 	.word	0x3ff80000
 800e85c:	08014760 	.word	0x08014760
 800e860:	080146be 	.word	0x080146be
 800e864:	0801464b 	.word	0x0801464b
 800e868:	08014619 	.word	0x08014619
 800e86c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e870:	6018      	str	r0, [r3, #0]
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	2b0e      	cmp	r3, #14
 800e876:	f200 80a4 	bhi.w	800e9c2 <_dtoa_r+0x442>
 800e87a:	2c00      	cmp	r4, #0
 800e87c:	f000 80a1 	beq.w	800e9c2 <_dtoa_r+0x442>
 800e880:	2f00      	cmp	r7, #0
 800e882:	dd33      	ble.n	800e8ec <_dtoa_r+0x36c>
 800e884:	f007 020f 	and.w	r2, r7, #15
 800e888:	4bac      	ldr	r3, [pc, #688]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e88a:	05f8      	lsls	r0, r7, #23
 800e88c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e894:	ed93 7b00 	vldr	d7, [r3]
 800e898:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e89c:	d516      	bpl.n	800e8cc <_dtoa_r+0x34c>
 800e89e:	4ba8      	ldr	r3, [pc, #672]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8a0:	f004 040f 	and.w	r4, r4, #15
 800e8a4:	2603      	movs	r6, #3
 800e8a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8ae:	f7f1 ffe1 	bl	8000874 <__aeabi_ddiv>
 800e8b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8b6:	4da2      	ldr	r5, [pc, #648]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8b8:	b954      	cbnz	r4, 800e8d0 <_dtoa_r+0x350>
 800e8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c2:	f7f1 ffd7 	bl	8000874 <__aeabi_ddiv>
 800e8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ca:	e028      	b.n	800e91e <_dtoa_r+0x39e>
 800e8cc:	2602      	movs	r6, #2
 800e8ce:	e7f2      	b.n	800e8b6 <_dtoa_r+0x336>
 800e8d0:	07e1      	lsls	r1, r4, #31
 800e8d2:	d508      	bpl.n	800e8e6 <_dtoa_r+0x366>
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8de:	f7f1 fe9f 	bl	8000620 <__aeabi_dmul>
 800e8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8e6:	1064      	asrs	r4, r4, #1
 800e8e8:	3508      	adds	r5, #8
 800e8ea:	e7e5      	b.n	800e8b8 <_dtoa_r+0x338>
 800e8ec:	f000 80d2 	beq.w	800ea94 <_dtoa_r+0x514>
 800e8f0:	427c      	negs	r4, r7
 800e8f2:	4b92      	ldr	r3, [pc, #584]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e8f4:	4d92      	ldr	r5, [pc, #584]	@ (800eb40 <_dtoa_r+0x5c0>)
 800e8f6:	2602      	movs	r6, #2
 800e8f8:	f004 020f 	and.w	r2, r4, #15
 800e8fc:	1124      	asrs	r4, r4, #4
 800e8fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	f7f1 fe89 	bl	8000620 <__aeabi_dmul>
 800e90e:	2300      	movs	r3, #0
 800e910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e914:	2c00      	cmp	r4, #0
 800e916:	f040 80b2 	bne.w	800ea7e <_dtoa_r+0x4fe>
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1d3      	bne.n	800e8c6 <_dtoa_r+0x346>
 800e91e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e920:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	f000 80b7 	beq.w	800ea98 <_dtoa_r+0x518>
 800e92a:	2200      	movs	r2, #0
 800e92c:	4b85      	ldr	r3, [pc, #532]	@ (800eb44 <_dtoa_r+0x5c4>)
 800e92e:	4620      	mov	r0, r4
 800e930:	4629      	mov	r1, r5
 800e932:	f7f2 f8e7 	bl	8000b04 <__aeabi_dcmplt>
 800e936:	2800      	cmp	r0, #0
 800e938:	f000 80ae 	beq.w	800ea98 <_dtoa_r+0x518>
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 80aa 	beq.w	800ea98 <_dtoa_r+0x518>
 800e944:	9b00      	ldr	r3, [sp, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd37      	ble.n	800e9ba <_dtoa_r+0x43a>
 800e94a:	1e7b      	subs	r3, r7, #1
 800e94c:	4620      	mov	r0, r4
 800e94e:	2200      	movs	r2, #0
 800e950:	4629      	mov	r1, r5
 800e952:	9304      	str	r3, [sp, #16]
 800e954:	3601      	adds	r6, #1
 800e956:	4b7c      	ldr	r3, [pc, #496]	@ (800eb48 <_dtoa_r+0x5c8>)
 800e958:	f7f1 fe62 	bl	8000620 <__aeabi_dmul>
 800e95c:	9c00      	ldr	r4, [sp, #0]
 800e95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e962:	4630      	mov	r0, r6
 800e964:	f7f1 fdf2 	bl	800054c <__aeabi_i2d>
 800e968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e96c:	f7f1 fe58 	bl	8000620 <__aeabi_dmul>
 800e970:	2200      	movs	r2, #0
 800e972:	4b76      	ldr	r3, [pc, #472]	@ (800eb4c <_dtoa_r+0x5cc>)
 800e974:	f7f1 fc9e 	bl	80002b4 <__adddf3>
 800e978:	4605      	mov	r5, r0
 800e97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e97e:	2c00      	cmp	r4, #0
 800e980:	f040 808d 	bne.w	800ea9e <_dtoa_r+0x51e>
 800e984:	2200      	movs	r2, #0
 800e986:	4b72      	ldr	r3, [pc, #456]	@ (800eb50 <_dtoa_r+0x5d0>)
 800e988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e98c:	f7f1 fc90 	bl	80002b0 <__aeabi_dsub>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e998:	462a      	mov	r2, r5
 800e99a:	4633      	mov	r3, r6
 800e99c:	f7f2 f8d0 	bl	8000b40 <__aeabi_dcmpgt>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	f040 828b 	bne.w	800eebc <_dtoa_r+0x93c>
 800e9a6:	462a      	mov	r2, r5
 800e9a8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b0:	f7f2 f8a8 	bl	8000b04 <__aeabi_dcmplt>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	f040 8128 	bne.w	800ec0a <_dtoa_r+0x68a>
 800e9ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f2c0 815a 	blt.w	800ec7e <_dtoa_r+0x6fe>
 800e9ca:	2f0e      	cmp	r7, #14
 800e9cc:	f300 8157 	bgt.w	800ec7e <_dtoa_r+0x6fe>
 800e9d0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb3c <_dtoa_r+0x5bc>)
 800e9d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9d6:	ed93 7b00 	vldr	d7, [r3]
 800e9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	ed8d 7b00 	vstr	d7, [sp]
 800e9e2:	da03      	bge.n	800e9ec <_dtoa_r+0x46c>
 800e9e4:	9b07      	ldr	r3, [sp, #28]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f340 8101 	ble.w	800ebee <_dtoa_r+0x66e>
 800e9ec:	4656      	mov	r6, sl
 800e9ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	f7f1 ff3b 	bl	8000874 <__aeabi_ddiv>
 800e9fe:	f7f2 f8bf 	bl	8000b80 <__aeabi_d2iz>
 800ea02:	4680      	mov	r8, r0
 800ea04:	f7f1 fda2 	bl	800054c <__aeabi_i2d>
 800ea08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0c:	f7f1 fe08 	bl	8000620 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	4620      	mov	r0, r4
 800ea14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7f1 fc48 	bl	80002b0 <__aeabi_dsub>
 800ea20:	9d07      	ldr	r5, [sp, #28]
 800ea22:	f806 4b01 	strb.w	r4, [r6], #1
 800ea26:	eba6 040a 	sub.w	r4, r6, sl
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	42a5      	cmp	r5, r4
 800ea30:	f040 8117 	bne.w	800ec62 <_dtoa_r+0x6e2>
 800ea34:	f7f1 fc3e 	bl	80002b4 <__adddf3>
 800ea38:	4604      	mov	r4, r0
 800ea3a:	460d      	mov	r5, r1
 800ea3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea40:	f7f2 f87e 	bl	8000b40 <__aeabi_dcmpgt>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 80f9 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea52:	f7f2 f84d 	bl	8000af0 <__aeabi_dcmpeq>
 800ea56:	b118      	cbz	r0, 800ea60 <_dtoa_r+0x4e0>
 800ea58:	f018 0f01 	tst.w	r8, #1
 800ea5c:	f040 80ee 	bne.w	800ec3c <_dtoa_r+0x6bc>
 800ea60:	4649      	mov	r1, r9
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 fc90 	bl	800f388 <_Bfree>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	3701      	adds	r7, #1
 800ea6c:	7033      	strb	r3, [r6, #0]
 800ea6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea70:	601f      	str	r7, [r3, #0]
 800ea72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 831d 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800ea7a:	601e      	str	r6, [r3, #0]
 800ea7c:	e31a      	b.n	800f0b4 <_dtoa_r+0xb34>
 800ea7e:	07e2      	lsls	r2, r4, #31
 800ea80:	d505      	bpl.n	800ea8e <_dtoa_r+0x50e>
 800ea82:	3601      	adds	r6, #1
 800ea84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea88:	f7f1 fdca 	bl	8000620 <__aeabi_dmul>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	1064      	asrs	r4, r4, #1
 800ea90:	3508      	adds	r5, #8
 800ea92:	e73f      	b.n	800e914 <_dtoa_r+0x394>
 800ea94:	2602      	movs	r6, #2
 800ea96:	e742      	b.n	800e91e <_dtoa_r+0x39e>
 800ea98:	9c07      	ldr	r4, [sp, #28]
 800ea9a:	9704      	str	r7, [sp, #16]
 800ea9c:	e761      	b.n	800e962 <_dtoa_r+0x3e2>
 800ea9e:	4b27      	ldr	r3, [pc, #156]	@ (800eb3c <_dtoa_r+0x5bc>)
 800eaa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eaa6:	4454      	add	r4, sl
 800eaa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eaac:	2900      	cmp	r1, #0
 800eaae:	d053      	beq.n	800eb58 <_dtoa_r+0x5d8>
 800eab0:	2000      	movs	r0, #0
 800eab2:	4928      	ldr	r1, [pc, #160]	@ (800eb54 <_dtoa_r+0x5d4>)
 800eab4:	f7f1 fede 	bl	8000874 <__aeabi_ddiv>
 800eab8:	4633      	mov	r3, r6
 800eaba:	4656      	mov	r6, sl
 800eabc:	462a      	mov	r2, r5
 800eabe:	f7f1 fbf7 	bl	80002b0 <__aeabi_dsub>
 800eac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaca:	f7f2 f859 	bl	8000b80 <__aeabi_d2iz>
 800eace:	4605      	mov	r5, r0
 800ead0:	f7f1 fd3c 	bl	800054c <__aeabi_i2d>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	3530      	adds	r5, #48	@ 0x30
 800eada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eade:	f7f1 fbe7 	bl	80002b0 <__aeabi_dsub>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	f806 5b01 	strb.w	r5, [r6], #1
 800eaea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaf2:	f7f2 f807 	bl	8000b04 <__aeabi_dcmplt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d171      	bne.n	800ebde <_dtoa_r+0x65e>
 800eafa:	2000      	movs	r0, #0
 800eafc:	4911      	ldr	r1, [pc, #68]	@ (800eb44 <_dtoa_r+0x5c4>)
 800eafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb02:	f7f1 fbd5 	bl	80002b0 <__aeabi_dsub>
 800eb06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb0a:	f7f1 fffb 	bl	8000b04 <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 8095 	bne.w	800ec3e <_dtoa_r+0x6be>
 800eb14:	42a6      	cmp	r6, r4
 800eb16:	f43f af50 	beq.w	800e9ba <_dtoa_r+0x43a>
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb22:	f7f1 fd7d 	bl	8000620 <__aeabi_dmul>
 800eb26:	2200      	movs	r2, #0
 800eb28:	4b07      	ldr	r3, [pc, #28]	@ (800eb48 <_dtoa_r+0x5c8>)
 800eb2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb32:	f7f1 fd75 	bl	8000620 <__aeabi_dmul>
 800eb36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb3a:	e7c4      	b.n	800eac6 <_dtoa_r+0x546>
 800eb3c:	08014760 	.word	0x08014760
 800eb40:	08014738 	.word	0x08014738
 800eb44:	3ff00000 	.word	0x3ff00000
 800eb48:	40240000 	.word	0x40240000
 800eb4c:	401c0000 	.word	0x401c0000
 800eb50:	40140000 	.word	0x40140000
 800eb54:	3fe00000 	.word	0x3fe00000
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4656      	mov	r6, sl
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f7f1 fd5f 	bl	8000620 <__aeabi_dmul>
 800eb62:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6c:	f7f2 f808 	bl	8000b80 <__aeabi_d2iz>
 800eb70:	4605      	mov	r5, r0
 800eb72:	f7f1 fceb 	bl	800054c <__aeabi_i2d>
 800eb76:	4602      	mov	r2, r0
 800eb78:	3530      	adds	r5, #48	@ 0x30
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb80:	f7f1 fb96 	bl	80002b0 <__aeabi_dsub>
 800eb84:	f806 5b01 	strb.w	r5, [r6], #1
 800eb88:	4602      	mov	r2, r0
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	42a6      	cmp	r6, r4
 800eb8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb92:	f04f 0200 	mov.w	r2, #0
 800eb96:	d124      	bne.n	800ebe2 <_dtoa_r+0x662>
 800eb98:	4bac      	ldr	r3, [pc, #688]	@ (800ee4c <_dtoa_r+0x8cc>)
 800eb9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb9e:	f7f1 fb89 	bl	80002b4 <__adddf3>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebaa:	f7f1 ffc9 	bl	8000b40 <__aeabi_dcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d145      	bne.n	800ec3e <_dtoa_r+0x6be>
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	49a5      	ldr	r1, [pc, #660]	@ (800ee4c <_dtoa_r+0x8cc>)
 800ebb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebba:	f7f1 fb79 	bl	80002b0 <__aeabi_dsub>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc6:	f7f1 ff9d 	bl	8000b04 <__aeabi_dcmplt>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f43f aef5 	beq.w	800e9ba <_dtoa_r+0x43a>
 800ebd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ebd2:	1e73      	subs	r3, r6, #1
 800ebd4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebda:	2b30      	cmp	r3, #48	@ 0x30
 800ebdc:	d0f8      	beq.n	800ebd0 <_dtoa_r+0x650>
 800ebde:	9f04      	ldr	r7, [sp, #16]
 800ebe0:	e73e      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ebe2:	4b9b      	ldr	r3, [pc, #620]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ebe4:	f7f1 fd1c 	bl	8000620 <__aeabi_dmul>
 800ebe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebec:	e7bc      	b.n	800eb68 <_dtoa_r+0x5e8>
 800ebee:	d10c      	bne.n	800ec0a <_dtoa_r+0x68a>
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	4b98      	ldr	r3, [pc, #608]	@ (800ee54 <_dtoa_r+0x8d4>)
 800ebf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebf8:	f7f1 fd12 	bl	8000620 <__aeabi_dmul>
 800ebfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec00:	f7f1 ff94 	bl	8000b2c <__aeabi_dcmpge>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f000 8157 	beq.w	800eeb8 <_dtoa_r+0x938>
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	4625      	mov	r5, r4
 800ec0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec10:	4656      	mov	r6, sl
 800ec12:	43db      	mvns	r3, r3
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	2700      	movs	r7, #0
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4658      	mov	r0, fp
 800ec1c:	f000 fbb4 	bl	800f388 <_Bfree>
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	d0dc      	beq.n	800ebde <_dtoa_r+0x65e>
 800ec24:	b12f      	cbz	r7, 800ec32 <_dtoa_r+0x6b2>
 800ec26:	42af      	cmp	r7, r5
 800ec28:	d003      	beq.n	800ec32 <_dtoa_r+0x6b2>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4658      	mov	r0, fp
 800ec2e:	f000 fbab 	bl	800f388 <_Bfree>
 800ec32:	4629      	mov	r1, r5
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 fba7 	bl	800f388 <_Bfree>
 800ec3a:	e7d0      	b.n	800ebde <_dtoa_r+0x65e>
 800ec3c:	9704      	str	r7, [sp, #16]
 800ec3e:	4633      	mov	r3, r6
 800ec40:	461e      	mov	r6, r3
 800ec42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec46:	2a39      	cmp	r2, #57	@ 0x39
 800ec48:	d107      	bne.n	800ec5a <_dtoa_r+0x6da>
 800ec4a:	459a      	cmp	sl, r3
 800ec4c:	d1f8      	bne.n	800ec40 <_dtoa_r+0x6c0>
 800ec4e:	9a04      	ldr	r2, [sp, #16]
 800ec50:	3201      	adds	r2, #1
 800ec52:	9204      	str	r2, [sp, #16]
 800ec54:	2230      	movs	r2, #48	@ 0x30
 800ec56:	f88a 2000 	strb.w	r2, [sl]
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	3201      	adds	r2, #1
 800ec5e:	701a      	strb	r2, [r3, #0]
 800ec60:	e7bd      	b.n	800ebde <_dtoa_r+0x65e>
 800ec62:	2200      	movs	r2, #0
 800ec64:	4b7a      	ldr	r3, [pc, #488]	@ (800ee50 <_dtoa_r+0x8d0>)
 800ec66:	f7f1 fcdb 	bl	8000620 <__aeabi_dmul>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	f7f1 ff3d 	bl	8000af0 <__aeabi_dcmpeq>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f43f aebb 	beq.w	800e9f2 <_dtoa_r+0x472>
 800ec7c:	e6f0      	b.n	800ea60 <_dtoa_r+0x4e0>
 800ec7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	f000 80db 	beq.w	800ee3c <_dtoa_r+0x8bc>
 800ec86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec88:	2a01      	cmp	r2, #1
 800ec8a:	f300 80bf 	bgt.w	800ee0c <_dtoa_r+0x88c>
 800ec8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	f000 80b7 	beq.w	800ee04 <_dtoa_r+0x884>
 800ec96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec9c:	4646      	mov	r6, r8
 800ec9e:	9a08      	ldr	r2, [sp, #32]
 800eca0:	2101      	movs	r1, #1
 800eca2:	4658      	mov	r0, fp
 800eca4:	4498      	add	r8, r3
 800eca6:	441a      	add	r2, r3
 800eca8:	9208      	str	r2, [sp, #32]
 800ecaa:	f000 fc6d 	bl	800f588 <__i2b>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b15e      	cbz	r6, 800ecca <_dtoa_r+0x74a>
 800ecb2:	9b08      	ldr	r3, [sp, #32]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd08      	ble.n	800ecca <_dtoa_r+0x74a>
 800ecb8:	42b3      	cmp	r3, r6
 800ecba:	9a08      	ldr	r2, [sp, #32]
 800ecbc:	bfa8      	it	ge
 800ecbe:	4633      	movge	r3, r6
 800ecc0:	eba8 0803 	sub.w	r8, r8, r3
 800ecc4:	1af6      	subs	r6, r6, r3
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	9308      	str	r3, [sp, #32]
 800ecca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eccc:	b1f3      	cbz	r3, 800ed0c <_dtoa_r+0x78c>
 800ecce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 80b7 	beq.w	800ee44 <_dtoa_r+0x8c4>
 800ecd6:	b18c      	cbz	r4, 800ecfc <_dtoa_r+0x77c>
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4658      	mov	r0, fp
 800ecde:	f000 fd13 	bl	800f708 <__pow5mult>
 800ece2:	464a      	mov	r2, r9
 800ece4:	4601      	mov	r1, r0
 800ece6:	4605      	mov	r5, r0
 800ece8:	4658      	mov	r0, fp
 800ecea:	f000 fc63 	bl	800f5b4 <__multiply>
 800ecee:	4649      	mov	r1, r9
 800ecf0:	9004      	str	r0, [sp, #16]
 800ecf2:	4658      	mov	r0, fp
 800ecf4:	f000 fb48 	bl	800f388 <_Bfree>
 800ecf8:	9b04      	ldr	r3, [sp, #16]
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecfe:	1b1a      	subs	r2, r3, r4
 800ed00:	d004      	beq.n	800ed0c <_dtoa_r+0x78c>
 800ed02:	4649      	mov	r1, r9
 800ed04:	4658      	mov	r0, fp
 800ed06:	f000 fcff 	bl	800f708 <__pow5mult>
 800ed0a:	4681      	mov	r9, r0
 800ed0c:	2101      	movs	r1, #1
 800ed0e:	4658      	mov	r0, fp
 800ed10:	f000 fc3a 	bl	800f588 <__i2b>
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	4604      	mov	r4, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 81cf 	beq.w	800f0bc <_dtoa_r+0xb3c>
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4601      	mov	r1, r0
 800ed22:	4658      	mov	r0, fp
 800ed24:	f000 fcf0 	bl	800f708 <__pow5mult>
 800ed28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	f300 8095 	bgt.w	800ee5c <_dtoa_r+0x8dc>
 800ed32:	9b02      	ldr	r3, [sp, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 8087 	bne.w	800ee48 <_dtoa_r+0x8c8>
 800ed3a:	9b03      	ldr	r3, [sp, #12]
 800ed3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 8089 	bne.w	800ee58 <_dtoa_r+0x8d8>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed4c:	0d1b      	lsrs	r3, r3, #20
 800ed4e:	051b      	lsls	r3, r3, #20
 800ed50:	b12b      	cbz	r3, 800ed5e <_dtoa_r+0x7de>
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	f108 0801 	add.w	r8, r8, #1
 800ed58:	3301      	adds	r3, #1
 800ed5a:	9308      	str	r3, [sp, #32]
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 81b0 	beq.w	800f0c8 <_dtoa_r+0xb48>
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed6e:	6918      	ldr	r0, [r3, #16]
 800ed70:	f000 fbbe 	bl	800f4f0 <__hi0bits>
 800ed74:	f1c0 0020 	rsb	r0, r0, #32
 800ed78:	9b08      	ldr	r3, [sp, #32]
 800ed7a:	4418      	add	r0, r3
 800ed7c:	f010 001f 	ands.w	r0, r0, #31
 800ed80:	d077      	beq.n	800ee72 <_dtoa_r+0x8f2>
 800ed82:	f1c0 0320 	rsb	r3, r0, #32
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	dd6b      	ble.n	800ee62 <_dtoa_r+0x8e2>
 800ed8a:	f1c0 001c 	rsb	r0, r0, #28
 800ed8e:	9b08      	ldr	r3, [sp, #32]
 800ed90:	4480      	add	r8, r0
 800ed92:	4403      	add	r3, r0
 800ed94:	4406      	add	r6, r0
 800ed96:	9308      	str	r3, [sp, #32]
 800ed98:	f1b8 0f00 	cmp.w	r8, #0
 800ed9c:	dd05      	ble.n	800edaa <_dtoa_r+0x82a>
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4642      	mov	r2, r8
 800eda2:	4658      	mov	r0, fp
 800eda4:	f000 fd0a 	bl	800f7bc <__lshift>
 800eda8:	4681      	mov	r9, r0
 800edaa:	9b08      	ldr	r3, [sp, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	dd05      	ble.n	800edbc <_dtoa_r+0x83c>
 800edb0:	4621      	mov	r1, r4
 800edb2:	461a      	mov	r2, r3
 800edb4:	4658      	mov	r0, fp
 800edb6:	f000 fd01 	bl	800f7bc <__lshift>
 800edba:	4604      	mov	r4, r0
 800edbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d059      	beq.n	800ee76 <_dtoa_r+0x8f6>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4648      	mov	r0, r9
 800edc6:	f000 fd65 	bl	800f894 <__mcmp>
 800edca:	2800      	cmp	r0, #0
 800edcc:	da53      	bge.n	800ee76 <_dtoa_r+0x8f6>
 800edce:	1e7b      	subs	r3, r7, #1
 800edd0:	4649      	mov	r1, r9
 800edd2:	220a      	movs	r2, #10
 800edd4:	4658      	mov	r0, fp
 800edd6:	9304      	str	r3, [sp, #16]
 800edd8:	2300      	movs	r3, #0
 800edda:	f000 faf7 	bl	800f3cc <__multadd>
 800edde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede0:	4681      	mov	r9, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f000 8172 	beq.w	800f0cc <_dtoa_r+0xb4c>
 800ede8:	2300      	movs	r3, #0
 800edea:	4629      	mov	r1, r5
 800edec:	220a      	movs	r2, #10
 800edee:	4658      	mov	r0, fp
 800edf0:	f000 faec 	bl	800f3cc <__multadd>
 800edf4:	9b00      	ldr	r3, [sp, #0]
 800edf6:	4605      	mov	r5, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	dc67      	bgt.n	800eecc <_dtoa_r+0x94c>
 800edfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	dc41      	bgt.n	800ee86 <_dtoa_r+0x906>
 800ee02:	e063      	b.n	800eecc <_dtoa_r+0x94c>
 800ee04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee0a:	e746      	b.n	800ec9a <_dtoa_r+0x71a>
 800ee0c:	9b07      	ldr	r3, [sp, #28]
 800ee0e:	1e5c      	subs	r4, r3, #1
 800ee10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	bfb7      	itett	lt
 800ee16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee18:	1b1c      	subge	r4, r3, r4
 800ee1a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee1c:	1ae3      	sublt	r3, r4, r3
 800ee1e:	bfbe      	ittt	lt
 800ee20:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee22:	2400      	movlt	r4, #0
 800ee24:	18d2      	addlt	r2, r2, r3
 800ee26:	9b07      	ldr	r3, [sp, #28]
 800ee28:	bfb8      	it	lt
 800ee2a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bfb5      	itete	lt
 800ee30:	eba8 0603 	sublt.w	r6, r8, r3
 800ee34:	4646      	movge	r6, r8
 800ee36:	2300      	movlt	r3, #0
 800ee38:	9b07      	ldrge	r3, [sp, #28]
 800ee3a:	e730      	b.n	800ec9e <_dtoa_r+0x71e>
 800ee3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee3e:	4646      	mov	r6, r8
 800ee40:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee42:	e735      	b.n	800ecb0 <_dtoa_r+0x730>
 800ee44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee46:	e75c      	b.n	800ed02 <_dtoa_r+0x782>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e788      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee4c:	3fe00000 	.word	0x3fe00000
 800ee50:	40240000 	.word	0x40240000
 800ee54:	40140000 	.word	0x40140000
 800ee58:	9b02      	ldr	r3, [sp, #8]
 800ee5a:	e780      	b.n	800ed5e <_dtoa_r+0x7de>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee60:	e782      	b.n	800ed68 <_dtoa_r+0x7e8>
 800ee62:	d099      	beq.n	800ed98 <_dtoa_r+0x818>
 800ee64:	331c      	adds	r3, #28
 800ee66:	9a08      	ldr	r2, [sp, #32]
 800ee68:	441a      	add	r2, r3
 800ee6a:	4498      	add	r8, r3
 800ee6c:	441e      	add	r6, r3
 800ee6e:	9208      	str	r2, [sp, #32]
 800ee70:	e792      	b.n	800ed98 <_dtoa_r+0x818>
 800ee72:	4603      	mov	r3, r0
 800ee74:	e7f6      	b.n	800ee64 <_dtoa_r+0x8e4>
 800ee76:	9b07      	ldr	r3, [sp, #28]
 800ee78:	9704      	str	r7, [sp, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	dc20      	bgt.n	800eec0 <_dtoa_r+0x940>
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	dd1e      	ble.n	800eec4 <_dtoa_r+0x944>
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f47f aec0 	bne.w	800ec0e <_dtoa_r+0x68e>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	2205      	movs	r2, #5
 800ee92:	4658      	mov	r0, fp
 800ee94:	f000 fa9a 	bl	800f3cc <__multadd>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4648      	mov	r0, r9
 800ee9e:	f000 fcf9 	bl	800f894 <__mcmp>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	f77f aeb3 	ble.w	800ec0e <_dtoa_r+0x68e>
 800eea8:	2331      	movs	r3, #49	@ 0x31
 800eeaa:	4656      	mov	r6, sl
 800eeac:	f806 3b01 	strb.w	r3, [r6], #1
 800eeb0:	9b04      	ldr	r3, [sp, #16]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	e6ae      	b.n	800ec16 <_dtoa_r+0x696>
 800eeb8:	9c07      	ldr	r4, [sp, #28]
 800eeba:	9704      	str	r7, [sp, #16]
 800eebc:	4625      	mov	r5, r4
 800eebe:	e7f3      	b.n	800eea8 <_dtoa_r+0x928>
 800eec0:	9b07      	ldr	r3, [sp, #28]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8104 	beq.w	800f0d4 <_dtoa_r+0xb54>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	dd05      	ble.n	800eedc <_dtoa_r+0x95c>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4632      	mov	r2, r6
 800eed4:	4658      	mov	r0, fp
 800eed6:	f000 fc71 	bl	800f7bc <__lshift>
 800eeda:	4605      	mov	r5, r0
 800eedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d05a      	beq.n	800ef98 <_dtoa_r+0xa18>
 800eee2:	6869      	ldr	r1, [r5, #4]
 800eee4:	4658      	mov	r0, fp
 800eee6:	f000 fa0f 	bl	800f308 <_Balloc>
 800eeea:	4606      	mov	r6, r0
 800eeec:	b928      	cbnz	r0, 800eefa <_dtoa_r+0x97a>
 800eeee:	4b84      	ldr	r3, [pc, #528]	@ (800f100 <_dtoa_r+0xb80>)
 800eef0:	4602      	mov	r2, r0
 800eef2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eef6:	f7ff bb5a 	b.w	800e5ae <_dtoa_r+0x2e>
 800eefa:	692a      	ldr	r2, [r5, #16]
 800eefc:	f105 010c 	add.w	r1, r5, #12
 800ef00:	300c      	adds	r0, #12
 800ef02:	3202      	adds	r2, #2
 800ef04:	0092      	lsls	r2, r2, #2
 800ef06:	f7ff fa9a 	bl	800e43e <memcpy>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f000 fc54 	bl	800f7bc <__lshift>
 800ef14:	f10a 0301 	add.w	r3, sl, #1
 800ef18:	462f      	mov	r7, r5
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	9307      	str	r3, [sp, #28]
 800ef1e:	9b00      	ldr	r3, [sp, #0]
 800ef20:	4453      	add	r3, sl
 800ef22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef24:	9b02      	ldr	r3, [sp, #8]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	4648      	mov	r0, r9
 800ef32:	3b01      	subs	r3, #1
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	f7ff fa95 	bl	800e464 <quorem>
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	9002      	str	r0, [sp, #8]
 800ef3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef42:	4648      	mov	r0, r9
 800ef44:	f000 fca6 	bl	800f894 <__mcmp>
 800ef48:	462a      	mov	r2, r5
 800ef4a:	9008      	str	r0, [sp, #32]
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	4658      	mov	r0, fp
 800ef50:	f000 fcbc 	bl	800f8cc <__mdiff>
 800ef54:	68c2      	ldr	r2, [r0, #12]
 800ef56:	4606      	mov	r6, r0
 800ef58:	bb02      	cbnz	r2, 800ef9c <_dtoa_r+0xa1c>
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	4648      	mov	r0, r9
 800ef5e:	f000 fc99 	bl	800f894 <__mcmp>
 800ef62:	4602      	mov	r2, r0
 800ef64:	4631      	mov	r1, r6
 800ef66:	4658      	mov	r0, fp
 800ef68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef6a:	f000 fa0d 	bl	800f388 <_Bfree>
 800ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef72:	9e07      	ldr	r6, [sp, #28]
 800ef74:	ea43 0102 	orr.w	r1, r3, r2
 800ef78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef7a:	4319      	orrs	r1, r3
 800ef7c:	d110      	bne.n	800efa0 <_dtoa_r+0xa20>
 800ef7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef82:	d029      	beq.n	800efd8 <_dtoa_r+0xa58>
 800ef84:	9b08      	ldr	r3, [sp, #32]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	dd02      	ble.n	800ef90 <_dtoa_r+0xa10>
 800ef8a:	9b02      	ldr	r3, [sp, #8]
 800ef8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	f883 8000 	strb.w	r8, [r3]
 800ef96:	e63f      	b.n	800ec18 <_dtoa_r+0x698>
 800ef98:	4628      	mov	r0, r5
 800ef9a:	e7bb      	b.n	800ef14 <_dtoa_r+0x994>
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	e7e1      	b.n	800ef64 <_dtoa_r+0x9e4>
 800efa0:	9b08      	ldr	r3, [sp, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	db04      	blt.n	800efb0 <_dtoa_r+0xa30>
 800efa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efa8:	430b      	orrs	r3, r1
 800efaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efac:	430b      	orrs	r3, r1
 800efae:	d120      	bne.n	800eff2 <_dtoa_r+0xa72>
 800efb0:	2a00      	cmp	r2, #0
 800efb2:	dded      	ble.n	800ef90 <_dtoa_r+0xa10>
 800efb4:	4649      	mov	r1, r9
 800efb6:	2201      	movs	r2, #1
 800efb8:	4658      	mov	r0, fp
 800efba:	f000 fbff 	bl	800f7bc <__lshift>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4681      	mov	r9, r0
 800efc2:	f000 fc67 	bl	800f894 <__mcmp>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	dc03      	bgt.n	800efd2 <_dtoa_r+0xa52>
 800efca:	d1e1      	bne.n	800ef90 <_dtoa_r+0xa10>
 800efcc:	f018 0f01 	tst.w	r8, #1
 800efd0:	d0de      	beq.n	800ef90 <_dtoa_r+0xa10>
 800efd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efd6:	d1d8      	bne.n	800ef8a <_dtoa_r+0xa0a>
 800efd8:	2339      	movs	r3, #57	@ 0x39
 800efda:	9a00      	ldr	r2, [sp, #0]
 800efdc:	7013      	strb	r3, [r2, #0]
 800efde:	4633      	mov	r3, r6
 800efe0:	461e      	mov	r6, r3
 800efe2:	3b01      	subs	r3, #1
 800efe4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efe8:	2a39      	cmp	r2, #57	@ 0x39
 800efea:	d052      	beq.n	800f092 <_dtoa_r+0xb12>
 800efec:	3201      	adds	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	e612      	b.n	800ec18 <_dtoa_r+0x698>
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	dd07      	ble.n	800f006 <_dtoa_r+0xa86>
 800eff6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800effa:	d0ed      	beq.n	800efd8 <_dtoa_r+0xa58>
 800effc:	f108 0301 	add.w	r3, r8, #1
 800f000:	9a00      	ldr	r2, [sp, #0]
 800f002:	7013      	strb	r3, [r2, #0]
 800f004:	e608      	b.n	800ec18 <_dtoa_r+0x698>
 800f006:	9b07      	ldr	r3, [sp, #28]
 800f008:	9a07      	ldr	r2, [sp, #28]
 800f00a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f010:	4293      	cmp	r3, r2
 800f012:	d028      	beq.n	800f066 <_dtoa_r+0xae6>
 800f014:	4649      	mov	r1, r9
 800f016:	2300      	movs	r3, #0
 800f018:	220a      	movs	r2, #10
 800f01a:	4658      	mov	r0, fp
 800f01c:	f000 f9d6 	bl	800f3cc <__multadd>
 800f020:	42af      	cmp	r7, r5
 800f022:	4681      	mov	r9, r0
 800f024:	f04f 0300 	mov.w	r3, #0
 800f028:	f04f 020a 	mov.w	r2, #10
 800f02c:	4639      	mov	r1, r7
 800f02e:	4658      	mov	r0, fp
 800f030:	d107      	bne.n	800f042 <_dtoa_r+0xac2>
 800f032:	f000 f9cb 	bl	800f3cc <__multadd>
 800f036:	4607      	mov	r7, r0
 800f038:	4605      	mov	r5, r0
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	3301      	adds	r3, #1
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	e774      	b.n	800ef2c <_dtoa_r+0x9ac>
 800f042:	f000 f9c3 	bl	800f3cc <__multadd>
 800f046:	4629      	mov	r1, r5
 800f048:	4607      	mov	r7, r0
 800f04a:	2300      	movs	r3, #0
 800f04c:	220a      	movs	r2, #10
 800f04e:	4658      	mov	r0, fp
 800f050:	f000 f9bc 	bl	800f3cc <__multadd>
 800f054:	4605      	mov	r5, r0
 800f056:	e7f0      	b.n	800f03a <_dtoa_r+0xaba>
 800f058:	9b00      	ldr	r3, [sp, #0]
 800f05a:	2700      	movs	r7, #0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfcc      	ite	gt
 800f060:	461e      	movgt	r6, r3
 800f062:	2601      	movle	r6, #1
 800f064:	4456      	add	r6, sl
 800f066:	4649      	mov	r1, r9
 800f068:	2201      	movs	r2, #1
 800f06a:	4658      	mov	r0, fp
 800f06c:	f000 fba6 	bl	800f7bc <__lshift>
 800f070:	4621      	mov	r1, r4
 800f072:	4681      	mov	r9, r0
 800f074:	f000 fc0e 	bl	800f894 <__mcmp>
 800f078:	2800      	cmp	r0, #0
 800f07a:	dcb0      	bgt.n	800efde <_dtoa_r+0xa5e>
 800f07c:	d102      	bne.n	800f084 <_dtoa_r+0xb04>
 800f07e:	f018 0f01 	tst.w	r8, #1
 800f082:	d1ac      	bne.n	800efde <_dtoa_r+0xa5e>
 800f084:	4633      	mov	r3, r6
 800f086:	461e      	mov	r6, r3
 800f088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f08c:	2a30      	cmp	r2, #48	@ 0x30
 800f08e:	d0fa      	beq.n	800f086 <_dtoa_r+0xb06>
 800f090:	e5c2      	b.n	800ec18 <_dtoa_r+0x698>
 800f092:	459a      	cmp	sl, r3
 800f094:	d1a4      	bne.n	800efe0 <_dtoa_r+0xa60>
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	3301      	adds	r3, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	2331      	movs	r3, #49	@ 0x31
 800f09e:	f88a 3000 	strb.w	r3, [sl]
 800f0a2:	e5b9      	b.n	800ec18 <_dtoa_r+0x698>
 800f0a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f104 <_dtoa_r+0xb84>
 800f0aa:	b11b      	cbz	r3, 800f0b4 <_dtoa_r+0xb34>
 800f0ac:	f10a 0308 	add.w	r3, sl, #8
 800f0b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	4650      	mov	r0, sl
 800f0b6:	b019      	add	sp, #100	@ 0x64
 800f0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	f77f ae37 	ble.w	800ed32 <_dtoa_r+0x7b2>
 800f0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	e655      	b.n	800ed78 <_dtoa_r+0x7f8>
 800f0cc:	9b00      	ldr	r3, [sp, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f77f aed6 	ble.w	800ee80 <_dtoa_r+0x900>
 800f0d4:	4656      	mov	r6, sl
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f7ff f9c3 	bl	800e464 <quorem>
 800f0de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0e2:	9b00      	ldr	r3, [sp, #0]
 800f0e4:	f806 8b01 	strb.w	r8, [r6], #1
 800f0e8:	eba6 020a 	sub.w	r2, r6, sl
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	ddb3      	ble.n	800f058 <_dtoa_r+0xad8>
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4658      	mov	r0, fp
 800f0f8:	f000 f968 	bl	800f3cc <__multadd>
 800f0fc:	4681      	mov	r9, r0
 800f0fe:	e7ea      	b.n	800f0d6 <_dtoa_r+0xb56>
 800f100:	080146be 	.word	0x080146be
 800f104:	08014642 	.word	0x08014642

0800f108 <_free_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4605      	mov	r5, r0
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d041      	beq.n	800f194 <_free_r+0x8c>
 800f110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f114:	1f0c      	subs	r4, r1, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	18e4      	addlt	r4, r4, r3
 800f11c:	f000 f8e8 	bl	800f2f0 <__malloc_lock>
 800f120:	4a1d      	ldr	r2, [pc, #116]	@ (800f198 <_free_r+0x90>)
 800f122:	6813      	ldr	r3, [r2, #0]
 800f124:	b933      	cbnz	r3, 800f134 <_free_r+0x2c>
 800f126:	6063      	str	r3, [r4, #4]
 800f128:	6014      	str	r4, [r2, #0]
 800f12a:	4628      	mov	r0, r5
 800f12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f130:	f000 b8e4 	b.w	800f2fc <__malloc_unlock>
 800f134:	42a3      	cmp	r3, r4
 800f136:	d908      	bls.n	800f14a <_free_r+0x42>
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	1821      	adds	r1, r4, r0
 800f13c:	428b      	cmp	r3, r1
 800f13e:	bf01      	itttt	eq
 800f140:	6819      	ldreq	r1, [r3, #0]
 800f142:	685b      	ldreq	r3, [r3, #4]
 800f144:	1809      	addeq	r1, r1, r0
 800f146:	6021      	streq	r1, [r4, #0]
 800f148:	e7ed      	b.n	800f126 <_free_r+0x1e>
 800f14a:	461a      	mov	r2, r3
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	b10b      	cbz	r3, 800f154 <_free_r+0x4c>
 800f150:	42a3      	cmp	r3, r4
 800f152:	d9fa      	bls.n	800f14a <_free_r+0x42>
 800f154:	6811      	ldr	r1, [r2, #0]
 800f156:	1850      	adds	r0, r2, r1
 800f158:	42a0      	cmp	r0, r4
 800f15a:	d10b      	bne.n	800f174 <_free_r+0x6c>
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4401      	add	r1, r0
 800f160:	1850      	adds	r0, r2, r1
 800f162:	6011      	str	r1, [r2, #0]
 800f164:	4283      	cmp	r3, r0
 800f166:	d1e0      	bne.n	800f12a <_free_r+0x22>
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	4408      	add	r0, r1
 800f16e:	6053      	str	r3, [r2, #4]
 800f170:	6010      	str	r0, [r2, #0]
 800f172:	e7da      	b.n	800f12a <_free_r+0x22>
 800f174:	d902      	bls.n	800f17c <_free_r+0x74>
 800f176:	230c      	movs	r3, #12
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	e7d6      	b.n	800f12a <_free_r+0x22>
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	1821      	adds	r1, r4, r0
 800f180:	428b      	cmp	r3, r1
 800f182:	bf02      	ittt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	1809      	addeq	r1, r1, r0
 800f18a:	6063      	str	r3, [r4, #4]
 800f18c:	bf08      	it	eq
 800f18e:	6021      	streq	r1, [r4, #0]
 800f190:	6054      	str	r4, [r2, #4]
 800f192:	e7ca      	b.n	800f12a <_free_r+0x22>
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	2003b3c0 	.word	0x2003b3c0

0800f19c <malloc>:
 800f19c:	4b02      	ldr	r3, [pc, #8]	@ (800f1a8 <malloc+0xc>)
 800f19e:	4601      	mov	r1, r0
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	f000 b825 	b.w	800f1f0 <_malloc_r>
 800f1a6:	bf00      	nop
 800f1a8:	20000034 	.word	0x20000034

0800f1ac <sbrk_aligned>:
 800f1ac:	b570      	push	{r4, r5, r6, lr}
 800f1ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f1ec <sbrk_aligned+0x40>)
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	6831      	ldr	r1, [r6, #0]
 800f1b6:	b911      	cbnz	r1, 800f1be <sbrk_aligned+0x12>
 800f1b8:	f001 fd9c 	bl	8010cf4 <_sbrk_r>
 800f1bc:	6030      	str	r0, [r6, #0]
 800f1be:	4621      	mov	r1, r4
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f001 fd97 	bl	8010cf4 <_sbrk_r>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d103      	bne.n	800f1d2 <sbrk_aligned+0x26>
 800f1ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	bd70      	pop	{r4, r5, r6, pc}
 800f1d2:	1cc4      	adds	r4, r0, #3
 800f1d4:	f024 0403 	bic.w	r4, r4, #3
 800f1d8:	42a0      	cmp	r0, r4
 800f1da:	d0f8      	beq.n	800f1ce <sbrk_aligned+0x22>
 800f1dc:	1a21      	subs	r1, r4, r0
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f001 fd88 	bl	8010cf4 <_sbrk_r>
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d1f2      	bne.n	800f1ce <sbrk_aligned+0x22>
 800f1e8:	e7ef      	b.n	800f1ca <sbrk_aligned+0x1e>
 800f1ea:	bf00      	nop
 800f1ec:	2003b3bc 	.word	0x2003b3bc

0800f1f0 <_malloc_r>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	1ccd      	adds	r5, r1, #3
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	f025 0503 	bic.w	r5, r5, #3
 800f1fc:	3508      	adds	r5, #8
 800f1fe:	2d0c      	cmp	r5, #12
 800f200:	bf38      	it	cc
 800f202:	250c      	movcc	r5, #12
 800f204:	2d00      	cmp	r5, #0
 800f206:	db01      	blt.n	800f20c <_malloc_r+0x1c>
 800f208:	42a9      	cmp	r1, r5
 800f20a:	d904      	bls.n	800f216 <_malloc_r+0x26>
 800f20c:	230c      	movs	r3, #12
 800f20e:	6033      	str	r3, [r6, #0]
 800f210:	2000      	movs	r0, #0
 800f212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2ec <_malloc_r+0xfc>
 800f21a:	f000 f869 	bl	800f2f0 <__malloc_lock>
 800f21e:	f8d8 3000 	ldr.w	r3, [r8]
 800f222:	461c      	mov	r4, r3
 800f224:	bb44      	cbnz	r4, 800f278 <_malloc_r+0x88>
 800f226:	4629      	mov	r1, r5
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff ffbf 	bl	800f1ac <sbrk_aligned>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	4604      	mov	r4, r0
 800f232:	d158      	bne.n	800f2e6 <_malloc_r+0xf6>
 800f234:	f8d8 4000 	ldr.w	r4, [r8]
 800f238:	4627      	mov	r7, r4
 800f23a:	2f00      	cmp	r7, #0
 800f23c:	d143      	bne.n	800f2c6 <_malloc_r+0xd6>
 800f23e:	2c00      	cmp	r4, #0
 800f240:	d04b      	beq.n	800f2da <_malloc_r+0xea>
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	4639      	mov	r1, r7
 800f246:	4630      	mov	r0, r6
 800f248:	eb04 0903 	add.w	r9, r4, r3
 800f24c:	f001 fd52 	bl	8010cf4 <_sbrk_r>
 800f250:	4581      	cmp	r9, r0
 800f252:	d142      	bne.n	800f2da <_malloc_r+0xea>
 800f254:	6821      	ldr	r1, [r4, #0]
 800f256:	4630      	mov	r0, r6
 800f258:	1a6d      	subs	r5, r5, r1
 800f25a:	4629      	mov	r1, r5
 800f25c:	f7ff ffa6 	bl	800f1ac <sbrk_aligned>
 800f260:	3001      	adds	r0, #1
 800f262:	d03a      	beq.n	800f2da <_malloc_r+0xea>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	442b      	add	r3, r5
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	f8d8 3000 	ldr.w	r3, [r8]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	bb62      	cbnz	r2, 800f2cc <_malloc_r+0xdc>
 800f272:	f8c8 7000 	str.w	r7, [r8]
 800f276:	e00f      	b.n	800f298 <_malloc_r+0xa8>
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	1b52      	subs	r2, r2, r5
 800f27c:	d420      	bmi.n	800f2c0 <_malloc_r+0xd0>
 800f27e:	2a0b      	cmp	r2, #11
 800f280:	d917      	bls.n	800f2b2 <_malloc_r+0xc2>
 800f282:	1961      	adds	r1, r4, r5
 800f284:	42a3      	cmp	r3, r4
 800f286:	6025      	str	r5, [r4, #0]
 800f288:	bf18      	it	ne
 800f28a:	6059      	strne	r1, [r3, #4]
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	bf08      	it	eq
 800f290:	f8c8 1000 	streq.w	r1, [r8]
 800f294:	5162      	str	r2, [r4, r5]
 800f296:	604b      	str	r3, [r1, #4]
 800f298:	4630      	mov	r0, r6
 800f29a:	f000 f82f 	bl	800f2fc <__malloc_unlock>
 800f29e:	f104 000b 	add.w	r0, r4, #11
 800f2a2:	1d23      	adds	r3, r4, #4
 800f2a4:	f020 0007 	bic.w	r0, r0, #7
 800f2a8:	1ac2      	subs	r2, r0, r3
 800f2aa:	bf1c      	itt	ne
 800f2ac:	1a1b      	subne	r3, r3, r0
 800f2ae:	50a3      	strne	r3, [r4, r2]
 800f2b0:	e7af      	b.n	800f212 <_malloc_r+0x22>
 800f2b2:	6862      	ldr	r2, [r4, #4]
 800f2b4:	42a3      	cmp	r3, r4
 800f2b6:	bf0c      	ite	eq
 800f2b8:	f8c8 2000 	streq.w	r2, [r8]
 800f2bc:	605a      	strne	r2, [r3, #4]
 800f2be:	e7eb      	b.n	800f298 <_malloc_r+0xa8>
 800f2c0:	4623      	mov	r3, r4
 800f2c2:	6864      	ldr	r4, [r4, #4]
 800f2c4:	e7ae      	b.n	800f224 <_malloc_r+0x34>
 800f2c6:	463c      	mov	r4, r7
 800f2c8:	687f      	ldr	r7, [r7, #4]
 800f2ca:	e7b6      	b.n	800f23a <_malloc_r+0x4a>
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	42a3      	cmp	r3, r4
 800f2d2:	d1fb      	bne.n	800f2cc <_malloc_r+0xdc>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	6053      	str	r3, [r2, #4]
 800f2d8:	e7de      	b.n	800f298 <_malloc_r+0xa8>
 800f2da:	230c      	movs	r3, #12
 800f2dc:	4630      	mov	r0, r6
 800f2de:	6033      	str	r3, [r6, #0]
 800f2e0:	f000 f80c 	bl	800f2fc <__malloc_unlock>
 800f2e4:	e794      	b.n	800f210 <_malloc_r+0x20>
 800f2e6:	6005      	str	r5, [r0, #0]
 800f2e8:	e7d6      	b.n	800f298 <_malloc_r+0xa8>
 800f2ea:	bf00      	nop
 800f2ec:	2003b3c0 	.word	0x2003b3c0

0800f2f0 <__malloc_lock>:
 800f2f0:	4801      	ldr	r0, [pc, #4]	@ (800f2f8 <__malloc_lock+0x8>)
 800f2f2:	f7ff b894 	b.w	800e41e <__retarget_lock_acquire_recursive>
 800f2f6:	bf00      	nop
 800f2f8:	2003b3b8 	.word	0x2003b3b8

0800f2fc <__malloc_unlock>:
 800f2fc:	4801      	ldr	r0, [pc, #4]	@ (800f304 <__malloc_unlock+0x8>)
 800f2fe:	f7ff b88f 	b.w	800e420 <__retarget_lock_release_recursive>
 800f302:	bf00      	nop
 800f304:	2003b3b8 	.word	0x2003b3b8

0800f308 <_Balloc>:
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	69c6      	ldr	r6, [r0, #28]
 800f30c:	4604      	mov	r4, r0
 800f30e:	460d      	mov	r5, r1
 800f310:	b976      	cbnz	r6, 800f330 <_Balloc+0x28>
 800f312:	2010      	movs	r0, #16
 800f314:	f7ff ff42 	bl	800f19c <malloc>
 800f318:	4602      	mov	r2, r0
 800f31a:	61e0      	str	r0, [r4, #28]
 800f31c:	b920      	cbnz	r0, 800f328 <_Balloc+0x20>
 800f31e:	4b18      	ldr	r3, [pc, #96]	@ (800f380 <_Balloc+0x78>)
 800f320:	216b      	movs	r1, #107	@ 0x6b
 800f322:	4818      	ldr	r0, [pc, #96]	@ (800f384 <_Balloc+0x7c>)
 800f324:	f001 fd00 	bl	8010d28 <__assert_func>
 800f328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f32c:	6006      	str	r6, [r0, #0]
 800f32e:	60c6      	str	r6, [r0, #12]
 800f330:	69e6      	ldr	r6, [r4, #28]
 800f332:	68f3      	ldr	r3, [r6, #12]
 800f334:	b183      	cbz	r3, 800f358 <_Balloc+0x50>
 800f336:	69e3      	ldr	r3, [r4, #28]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f33e:	b9b8      	cbnz	r0, 800f370 <_Balloc+0x68>
 800f340:	2101      	movs	r1, #1
 800f342:	4620      	mov	r0, r4
 800f344:	fa01 f605 	lsl.w	r6, r1, r5
 800f348:	1d72      	adds	r2, r6, #5
 800f34a:	0092      	lsls	r2, r2, #2
 800f34c:	f001 fd0a 	bl	8010d64 <_calloc_r>
 800f350:	b160      	cbz	r0, 800f36c <_Balloc+0x64>
 800f352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f356:	e00e      	b.n	800f376 <_Balloc+0x6e>
 800f358:	2221      	movs	r2, #33	@ 0x21
 800f35a:	2104      	movs	r1, #4
 800f35c:	4620      	mov	r0, r4
 800f35e:	f001 fd01 	bl	8010d64 <_calloc_r>
 800f362:	69e3      	ldr	r3, [r4, #28]
 800f364:	60f0      	str	r0, [r6, #12]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e4      	bne.n	800f336 <_Balloc+0x2e>
 800f36c:	2000      	movs	r0, #0
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	6802      	ldr	r2, [r0, #0]
 800f372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f376:	2300      	movs	r3, #0
 800f378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f37c:	e7f7      	b.n	800f36e <_Balloc+0x66>
 800f37e:	bf00      	nop
 800f380:	0801464f 	.word	0x0801464f
 800f384:	080146cf 	.word	0x080146cf

0800f388 <_Bfree>:
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	69c6      	ldr	r6, [r0, #28]
 800f38c:	4605      	mov	r5, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	b976      	cbnz	r6, 800f3b0 <_Bfree+0x28>
 800f392:	2010      	movs	r0, #16
 800f394:	f7ff ff02 	bl	800f19c <malloc>
 800f398:	4602      	mov	r2, r0
 800f39a:	61e8      	str	r0, [r5, #28]
 800f39c:	b920      	cbnz	r0, 800f3a8 <_Bfree+0x20>
 800f39e:	4b09      	ldr	r3, [pc, #36]	@ (800f3c4 <_Bfree+0x3c>)
 800f3a0:	218f      	movs	r1, #143	@ 0x8f
 800f3a2:	4809      	ldr	r0, [pc, #36]	@ (800f3c8 <_Bfree+0x40>)
 800f3a4:	f001 fcc0 	bl	8010d28 <__assert_func>
 800f3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3ac:	6006      	str	r6, [r0, #0]
 800f3ae:	60c6      	str	r6, [r0, #12]
 800f3b0:	b13c      	cbz	r4, 800f3c2 <_Bfree+0x3a>
 800f3b2:	69eb      	ldr	r3, [r5, #28]
 800f3b4:	6862      	ldr	r2, [r4, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3bc:	6021      	str	r1, [r4, #0]
 800f3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	0801464f 	.word	0x0801464f
 800f3c8:	080146cf 	.word	0x080146cf

0800f3cc <__multadd>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	f101 0c14 	add.w	ip, r1, #20
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	461e      	mov	r6, r3
 800f3da:	690d      	ldr	r5, [r1, #16]
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f8dc 3000 	ldr.w	r3, [ip]
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	b299      	uxth	r1, r3
 800f3e6:	4285      	cmp	r5, r0
 800f3e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3ec:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f3f4:	b289      	uxth	r1, r1
 800f3f6:	fb02 3306 	mla	r3, r2, r6, r3
 800f3fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f402:	f84c 1b04 	str.w	r1, [ip], #4
 800f406:	dcea      	bgt.n	800f3de <__multadd+0x12>
 800f408:	b30e      	cbz	r6, 800f44e <__multadd+0x82>
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	42ab      	cmp	r3, r5
 800f40e:	dc19      	bgt.n	800f444 <__multadd+0x78>
 800f410:	6861      	ldr	r1, [r4, #4]
 800f412:	4638      	mov	r0, r7
 800f414:	3101      	adds	r1, #1
 800f416:	f7ff ff77 	bl	800f308 <_Balloc>
 800f41a:	4680      	mov	r8, r0
 800f41c:	b928      	cbnz	r0, 800f42a <__multadd+0x5e>
 800f41e:	4602      	mov	r2, r0
 800f420:	4b0c      	ldr	r3, [pc, #48]	@ (800f454 <__multadd+0x88>)
 800f422:	21ba      	movs	r1, #186	@ 0xba
 800f424:	480c      	ldr	r0, [pc, #48]	@ (800f458 <__multadd+0x8c>)
 800f426:	f001 fc7f 	bl	8010d28 <__assert_func>
 800f42a:	6922      	ldr	r2, [r4, #16]
 800f42c:	f104 010c 	add.w	r1, r4, #12
 800f430:	300c      	adds	r0, #12
 800f432:	3202      	adds	r2, #2
 800f434:	0092      	lsls	r2, r2, #2
 800f436:	f7ff f802 	bl	800e43e <memcpy>
 800f43a:	4621      	mov	r1, r4
 800f43c:	4644      	mov	r4, r8
 800f43e:	4638      	mov	r0, r7
 800f440:	f7ff ffa2 	bl	800f388 <_Bfree>
 800f444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f448:	3501      	adds	r5, #1
 800f44a:	615e      	str	r6, [r3, #20]
 800f44c:	6125      	str	r5, [r4, #16]
 800f44e:	4620      	mov	r0, r4
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	080146be 	.word	0x080146be
 800f458:	080146cf 	.word	0x080146cf

0800f45c <__s2b>:
 800f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f460:	4615      	mov	r5, r2
 800f462:	461f      	mov	r7, r3
 800f464:	2209      	movs	r2, #9
 800f466:	3308      	adds	r3, #8
 800f468:	460c      	mov	r4, r1
 800f46a:	4606      	mov	r6, r0
 800f46c:	2100      	movs	r1, #0
 800f46e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f472:	2201      	movs	r2, #1
 800f474:	429a      	cmp	r2, r3
 800f476:	db09      	blt.n	800f48c <__s2b+0x30>
 800f478:	4630      	mov	r0, r6
 800f47a:	f7ff ff45 	bl	800f308 <_Balloc>
 800f47e:	b940      	cbnz	r0, 800f492 <__s2b+0x36>
 800f480:	4602      	mov	r2, r0
 800f482:	4b19      	ldr	r3, [pc, #100]	@ (800f4e8 <__s2b+0x8c>)
 800f484:	21d3      	movs	r1, #211	@ 0xd3
 800f486:	4819      	ldr	r0, [pc, #100]	@ (800f4ec <__s2b+0x90>)
 800f488:	f001 fc4e 	bl	8010d28 <__assert_func>
 800f48c:	0052      	lsls	r2, r2, #1
 800f48e:	3101      	adds	r1, #1
 800f490:	e7f0      	b.n	800f474 <__s2b+0x18>
 800f492:	9b08      	ldr	r3, [sp, #32]
 800f494:	2d09      	cmp	r5, #9
 800f496:	6143      	str	r3, [r0, #20]
 800f498:	f04f 0301 	mov.w	r3, #1
 800f49c:	6103      	str	r3, [r0, #16]
 800f49e:	dd16      	ble.n	800f4ce <__s2b+0x72>
 800f4a0:	f104 0909 	add.w	r9, r4, #9
 800f4a4:	442c      	add	r4, r5
 800f4a6:	46c8      	mov	r8, r9
 800f4a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4ac:	4601      	mov	r1, r0
 800f4ae:	220a      	movs	r2, #10
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	3b30      	subs	r3, #48	@ 0x30
 800f4b4:	f7ff ff8a 	bl	800f3cc <__multadd>
 800f4b8:	45a0      	cmp	r8, r4
 800f4ba:	d1f5      	bne.n	800f4a8 <__s2b+0x4c>
 800f4bc:	f1a5 0408 	sub.w	r4, r5, #8
 800f4c0:	444c      	add	r4, r9
 800f4c2:	1b2d      	subs	r5, r5, r4
 800f4c4:	1963      	adds	r3, r4, r5
 800f4c6:	42bb      	cmp	r3, r7
 800f4c8:	db04      	blt.n	800f4d4 <__s2b+0x78>
 800f4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ce:	340a      	adds	r4, #10
 800f4d0:	2509      	movs	r5, #9
 800f4d2:	e7f6      	b.n	800f4c2 <__s2b+0x66>
 800f4d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4d8:	4601      	mov	r1, r0
 800f4da:	220a      	movs	r2, #10
 800f4dc:	4630      	mov	r0, r6
 800f4de:	3b30      	subs	r3, #48	@ 0x30
 800f4e0:	f7ff ff74 	bl	800f3cc <__multadd>
 800f4e4:	e7ee      	b.n	800f4c4 <__s2b+0x68>
 800f4e6:	bf00      	nop
 800f4e8:	080146be 	.word	0x080146be
 800f4ec:	080146cf 	.word	0x080146cf

0800f4f0 <__hi0bits>:
 800f4f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	bf36      	itet	cc
 800f4f8:	0403      	lslcc	r3, r0, #16
 800f4fa:	2000      	movcs	r0, #0
 800f4fc:	2010      	movcc	r0, #16
 800f4fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f502:	bf3c      	itt	cc
 800f504:	021b      	lslcc	r3, r3, #8
 800f506:	3008      	addcc	r0, #8
 800f508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f50c:	bf3c      	itt	cc
 800f50e:	011b      	lslcc	r3, r3, #4
 800f510:	3004      	addcc	r0, #4
 800f512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f516:	bf3c      	itt	cc
 800f518:	009b      	lslcc	r3, r3, #2
 800f51a:	3002      	addcc	r0, #2
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	db05      	blt.n	800f52c <__hi0bits+0x3c>
 800f520:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f524:	f100 0001 	add.w	r0, r0, #1
 800f528:	bf08      	it	eq
 800f52a:	2020      	moveq	r0, #32
 800f52c:	4770      	bx	lr

0800f52e <__lo0bits>:
 800f52e:	6803      	ldr	r3, [r0, #0]
 800f530:	4602      	mov	r2, r0
 800f532:	f013 0007 	ands.w	r0, r3, #7
 800f536:	d00b      	beq.n	800f550 <__lo0bits+0x22>
 800f538:	07d9      	lsls	r1, r3, #31
 800f53a:	d421      	bmi.n	800f580 <__lo0bits+0x52>
 800f53c:	0798      	lsls	r0, r3, #30
 800f53e:	bf47      	ittee	mi
 800f540:	085b      	lsrmi	r3, r3, #1
 800f542:	2001      	movmi	r0, #1
 800f544:	089b      	lsrpl	r3, r3, #2
 800f546:	2002      	movpl	r0, #2
 800f548:	bf4c      	ite	mi
 800f54a:	6013      	strmi	r3, [r2, #0]
 800f54c:	6013      	strpl	r3, [r2, #0]
 800f54e:	4770      	bx	lr
 800f550:	b299      	uxth	r1, r3
 800f552:	b909      	cbnz	r1, 800f558 <__lo0bits+0x2a>
 800f554:	0c1b      	lsrs	r3, r3, #16
 800f556:	2010      	movs	r0, #16
 800f558:	b2d9      	uxtb	r1, r3
 800f55a:	b909      	cbnz	r1, 800f560 <__lo0bits+0x32>
 800f55c:	3008      	adds	r0, #8
 800f55e:	0a1b      	lsrs	r3, r3, #8
 800f560:	0719      	lsls	r1, r3, #28
 800f562:	bf04      	itt	eq
 800f564:	091b      	lsreq	r3, r3, #4
 800f566:	3004      	addeq	r0, #4
 800f568:	0799      	lsls	r1, r3, #30
 800f56a:	bf04      	itt	eq
 800f56c:	089b      	lsreq	r3, r3, #2
 800f56e:	3002      	addeq	r0, #2
 800f570:	07d9      	lsls	r1, r3, #31
 800f572:	d403      	bmi.n	800f57c <__lo0bits+0x4e>
 800f574:	085b      	lsrs	r3, r3, #1
 800f576:	f100 0001 	add.w	r0, r0, #1
 800f57a:	d003      	beq.n	800f584 <__lo0bits+0x56>
 800f57c:	6013      	str	r3, [r2, #0]
 800f57e:	4770      	bx	lr
 800f580:	2000      	movs	r0, #0
 800f582:	4770      	bx	lr
 800f584:	2020      	movs	r0, #32
 800f586:	4770      	bx	lr

0800f588 <__i2b>:
 800f588:	b510      	push	{r4, lr}
 800f58a:	460c      	mov	r4, r1
 800f58c:	2101      	movs	r1, #1
 800f58e:	f7ff febb 	bl	800f308 <_Balloc>
 800f592:	4602      	mov	r2, r0
 800f594:	b928      	cbnz	r0, 800f5a2 <__i2b+0x1a>
 800f596:	4b05      	ldr	r3, [pc, #20]	@ (800f5ac <__i2b+0x24>)
 800f598:	f240 1145 	movw	r1, #325	@ 0x145
 800f59c:	4804      	ldr	r0, [pc, #16]	@ (800f5b0 <__i2b+0x28>)
 800f59e:	f001 fbc3 	bl	8010d28 <__assert_func>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	6144      	str	r4, [r0, #20]
 800f5a6:	6103      	str	r3, [r0, #16]
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	bf00      	nop
 800f5ac:	080146be 	.word	0x080146be
 800f5b0:	080146cf 	.word	0x080146cf

0800f5b4 <__multiply>:
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b8:	4614      	mov	r4, r2
 800f5ba:	690a      	ldr	r2, [r1, #16]
 800f5bc:	460f      	mov	r7, r1
 800f5be:	b085      	sub	sp, #20
 800f5c0:	6923      	ldr	r3, [r4, #16]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	bfa2      	ittt	ge
 800f5c6:	4623      	movge	r3, r4
 800f5c8:	460c      	movge	r4, r1
 800f5ca:	461f      	movge	r7, r3
 800f5cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f5d0:	68a3      	ldr	r3, [r4, #8]
 800f5d2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f5d6:	6861      	ldr	r1, [r4, #4]
 800f5d8:	eb0a 0609 	add.w	r6, sl, r9
 800f5dc:	42b3      	cmp	r3, r6
 800f5de:	bfb8      	it	lt
 800f5e0:	3101      	addlt	r1, #1
 800f5e2:	f7ff fe91 	bl	800f308 <_Balloc>
 800f5e6:	b930      	cbnz	r0, 800f5f6 <__multiply+0x42>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	4b45      	ldr	r3, [pc, #276]	@ (800f700 <__multiply+0x14c>)
 800f5ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5f0:	4844      	ldr	r0, [pc, #272]	@ (800f704 <__multiply+0x150>)
 800f5f2:	f001 fb99 	bl	8010d28 <__assert_func>
 800f5f6:	f100 0514 	add.w	r5, r0, #20
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f600:	462b      	mov	r3, r5
 800f602:	4543      	cmp	r3, r8
 800f604:	d321      	bcc.n	800f64a <__multiply+0x96>
 800f606:	f107 0114 	add.w	r1, r7, #20
 800f60a:	f104 0214 	add.w	r2, r4, #20
 800f60e:	f104 0715 	add.w	r7, r4, #21
 800f612:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f616:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f61a:	9302      	str	r3, [sp, #8]
 800f61c:	1b13      	subs	r3, r2, r4
 800f61e:	3b15      	subs	r3, #21
 800f620:	f023 0303 	bic.w	r3, r3, #3
 800f624:	3304      	adds	r3, #4
 800f626:	42ba      	cmp	r2, r7
 800f628:	bf38      	it	cc
 800f62a:	2304      	movcc	r3, #4
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	9b02      	ldr	r3, [sp, #8]
 800f630:	9103      	str	r1, [sp, #12]
 800f632:	428b      	cmp	r3, r1
 800f634:	d80c      	bhi.n	800f650 <__multiply+0x9c>
 800f636:	2e00      	cmp	r6, #0
 800f638:	dd03      	ble.n	800f642 <__multiply+0x8e>
 800f63a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d05b      	beq.n	800f6fa <__multiply+0x146>
 800f642:	6106      	str	r6, [r0, #16]
 800f644:	b005      	add	sp, #20
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64a:	f843 2b04 	str.w	r2, [r3], #4
 800f64e:	e7d8      	b.n	800f602 <__multiply+0x4e>
 800f650:	f8b1 a000 	ldrh.w	sl, [r1]
 800f654:	f1ba 0f00 	cmp.w	sl, #0
 800f658:	d024      	beq.n	800f6a4 <__multiply+0xf0>
 800f65a:	f104 0e14 	add.w	lr, r4, #20
 800f65e:	46a9      	mov	r9, r5
 800f660:	f04f 0c00 	mov.w	ip, #0
 800f664:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f668:	f8d9 3000 	ldr.w	r3, [r9]
 800f66c:	fa1f fb87 	uxth.w	fp, r7
 800f670:	4572      	cmp	r2, lr
 800f672:	b29b      	uxth	r3, r3
 800f674:	fb0a 330b 	mla	r3, sl, fp, r3
 800f678:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f67c:	f8d9 7000 	ldr.w	r7, [r9]
 800f680:	4463      	add	r3, ip
 800f682:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f686:	fb0a c70b 	mla	r7, sl, fp, ip
 800f68a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f68e:	b29b      	uxth	r3, r3
 800f690:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f694:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f698:	f849 3b04 	str.w	r3, [r9], #4
 800f69c:	d8e2      	bhi.n	800f664 <__multiply+0xb0>
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	f845 c003 	str.w	ip, [r5, r3]
 800f6a4:	9b03      	ldr	r3, [sp, #12]
 800f6a6:	3104      	adds	r1, #4
 800f6a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6ac:	f1b9 0f00 	cmp.w	r9, #0
 800f6b0:	d021      	beq.n	800f6f6 <__multiply+0x142>
 800f6b2:	682b      	ldr	r3, [r5, #0]
 800f6b4:	f104 0c14 	add.w	ip, r4, #20
 800f6b8:	46ae      	mov	lr, r5
 800f6ba:	f04f 0a00 	mov.w	sl, #0
 800f6be:	f8bc b000 	ldrh.w	fp, [ip]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f6c8:	fb09 770b 	mla	r7, r9, fp, r7
 800f6cc:	4457      	add	r7, sl
 800f6ce:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f6d2:	f84e 3b04 	str.w	r3, [lr], #4
 800f6d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6de:	f8be 3000 	ldrh.w	r3, [lr]
 800f6e2:	4562      	cmp	r2, ip
 800f6e4:	fb09 330a 	mla	r3, r9, sl, r3
 800f6e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f6ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6f0:	d8e5      	bhi.n	800f6be <__multiply+0x10a>
 800f6f2:	9f01      	ldr	r7, [sp, #4]
 800f6f4:	51eb      	str	r3, [r5, r7]
 800f6f6:	3504      	adds	r5, #4
 800f6f8:	e799      	b.n	800f62e <__multiply+0x7a>
 800f6fa:	3e01      	subs	r6, #1
 800f6fc:	e79b      	b.n	800f636 <__multiply+0x82>
 800f6fe:	bf00      	nop
 800f700:	080146be 	.word	0x080146be
 800f704:	080146cf 	.word	0x080146cf

0800f708 <__pow5mult>:
 800f708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f70c:	4615      	mov	r5, r2
 800f70e:	f012 0203 	ands.w	r2, r2, #3
 800f712:	4607      	mov	r7, r0
 800f714:	460e      	mov	r6, r1
 800f716:	d007      	beq.n	800f728 <__pow5mult+0x20>
 800f718:	3a01      	subs	r2, #1
 800f71a:	4c25      	ldr	r4, [pc, #148]	@ (800f7b0 <__pow5mult+0xa8>)
 800f71c:	2300      	movs	r3, #0
 800f71e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f722:	f7ff fe53 	bl	800f3cc <__multadd>
 800f726:	4606      	mov	r6, r0
 800f728:	10ad      	asrs	r5, r5, #2
 800f72a:	d03d      	beq.n	800f7a8 <__pow5mult+0xa0>
 800f72c:	69fc      	ldr	r4, [r7, #28]
 800f72e:	b97c      	cbnz	r4, 800f750 <__pow5mult+0x48>
 800f730:	2010      	movs	r0, #16
 800f732:	f7ff fd33 	bl	800f19c <malloc>
 800f736:	4602      	mov	r2, r0
 800f738:	61f8      	str	r0, [r7, #28]
 800f73a:	b928      	cbnz	r0, 800f748 <__pow5mult+0x40>
 800f73c:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b4 <__pow5mult+0xac>)
 800f73e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f742:	481d      	ldr	r0, [pc, #116]	@ (800f7b8 <__pow5mult+0xb0>)
 800f744:	f001 faf0 	bl	8010d28 <__assert_func>
 800f748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f74c:	6004      	str	r4, [r0, #0]
 800f74e:	60c4      	str	r4, [r0, #12]
 800f750:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f758:	b94c      	cbnz	r4, 800f76e <__pow5mult+0x66>
 800f75a:	f240 2171 	movw	r1, #625	@ 0x271
 800f75e:	4638      	mov	r0, r7
 800f760:	f7ff ff12 	bl	800f588 <__i2b>
 800f764:	2300      	movs	r3, #0
 800f766:	4604      	mov	r4, r0
 800f768:	f8c8 0008 	str.w	r0, [r8, #8]
 800f76c:	6003      	str	r3, [r0, #0]
 800f76e:	f04f 0900 	mov.w	r9, #0
 800f772:	07eb      	lsls	r3, r5, #31
 800f774:	d50a      	bpl.n	800f78c <__pow5mult+0x84>
 800f776:	4631      	mov	r1, r6
 800f778:	4622      	mov	r2, r4
 800f77a:	4638      	mov	r0, r7
 800f77c:	f7ff ff1a 	bl	800f5b4 <__multiply>
 800f780:	4680      	mov	r8, r0
 800f782:	4631      	mov	r1, r6
 800f784:	4638      	mov	r0, r7
 800f786:	4646      	mov	r6, r8
 800f788:	f7ff fdfe 	bl	800f388 <_Bfree>
 800f78c:	106d      	asrs	r5, r5, #1
 800f78e:	d00b      	beq.n	800f7a8 <__pow5mult+0xa0>
 800f790:	6820      	ldr	r0, [r4, #0]
 800f792:	b938      	cbnz	r0, 800f7a4 <__pow5mult+0x9c>
 800f794:	4622      	mov	r2, r4
 800f796:	4621      	mov	r1, r4
 800f798:	4638      	mov	r0, r7
 800f79a:	f7ff ff0b 	bl	800f5b4 <__multiply>
 800f79e:	6020      	str	r0, [r4, #0]
 800f7a0:	f8c0 9000 	str.w	r9, [r0]
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	e7e4      	b.n	800f772 <__pow5mult+0x6a>
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ae:	bf00      	nop
 800f7b0:	08014728 	.word	0x08014728
 800f7b4:	0801464f 	.word	0x0801464f
 800f7b8:	080146cf 	.word	0x080146cf

0800f7bc <__lshift>:
 800f7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c0:	460c      	mov	r4, r1
 800f7c2:	4607      	mov	r7, r0
 800f7c4:	4691      	mov	r9, r2
 800f7c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	6849      	ldr	r1, [r1, #4]
 800f7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7d2:	68a3      	ldr	r3, [r4, #8]
 800f7d4:	f108 0601 	add.w	r6, r8, #1
 800f7d8:	42b3      	cmp	r3, r6
 800f7da:	db0b      	blt.n	800f7f4 <__lshift+0x38>
 800f7dc:	4638      	mov	r0, r7
 800f7de:	f7ff fd93 	bl	800f308 <_Balloc>
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	b948      	cbnz	r0, 800f7fa <__lshift+0x3e>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	4b28      	ldr	r3, [pc, #160]	@ (800f88c <__lshift+0xd0>)
 800f7ea:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7ee:	4828      	ldr	r0, [pc, #160]	@ (800f890 <__lshift+0xd4>)
 800f7f0:	f001 fa9a 	bl	8010d28 <__assert_func>
 800f7f4:	3101      	adds	r1, #1
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	e7ee      	b.n	800f7d8 <__lshift+0x1c>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f100 0114 	add.w	r1, r0, #20
 800f800:	f100 0210 	add.w	r2, r0, #16
 800f804:	4618      	mov	r0, r3
 800f806:	4553      	cmp	r3, sl
 800f808:	db33      	blt.n	800f872 <__lshift+0xb6>
 800f80a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f80e:	f104 0314 	add.w	r3, r4, #20
 800f812:	6920      	ldr	r0, [r4, #16]
 800f814:	f019 091f 	ands.w	r9, r9, #31
 800f818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f81c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f820:	d02b      	beq.n	800f87a <__lshift+0xbe>
 800f822:	f1c9 0e20 	rsb	lr, r9, #32
 800f826:	468a      	mov	sl, r1
 800f828:	2200      	movs	r2, #0
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	fa00 f009 	lsl.w	r0, r0, r9
 800f830:	4310      	orrs	r0, r2
 800f832:	f84a 0b04 	str.w	r0, [sl], #4
 800f836:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83a:	459c      	cmp	ip, r3
 800f83c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f840:	d8f3      	bhi.n	800f82a <__lshift+0x6e>
 800f842:	ebac 0304 	sub.w	r3, ip, r4
 800f846:	f104 0015 	add.w	r0, r4, #21
 800f84a:	3b15      	subs	r3, #21
 800f84c:	f023 0303 	bic.w	r3, r3, #3
 800f850:	3304      	adds	r3, #4
 800f852:	4584      	cmp	ip, r0
 800f854:	bf38      	it	cc
 800f856:	2304      	movcc	r3, #4
 800f858:	50ca      	str	r2, [r1, r3]
 800f85a:	b10a      	cbz	r2, 800f860 <__lshift+0xa4>
 800f85c:	f108 0602 	add.w	r6, r8, #2
 800f860:	3e01      	subs	r6, #1
 800f862:	4638      	mov	r0, r7
 800f864:	4621      	mov	r1, r4
 800f866:	612e      	str	r6, [r5, #16]
 800f868:	f7ff fd8e 	bl	800f388 <_Bfree>
 800f86c:	4628      	mov	r0, r5
 800f86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f872:	3301      	adds	r3, #1
 800f874:	f842 0f04 	str.w	r0, [r2, #4]!
 800f878:	e7c5      	b.n	800f806 <__lshift+0x4a>
 800f87a:	3904      	subs	r1, #4
 800f87c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f880:	459c      	cmp	ip, r3
 800f882:	f841 2f04 	str.w	r2, [r1, #4]!
 800f886:	d8f9      	bhi.n	800f87c <__lshift+0xc0>
 800f888:	e7ea      	b.n	800f860 <__lshift+0xa4>
 800f88a:	bf00      	nop
 800f88c:	080146be 	.word	0x080146be
 800f890:	080146cf 	.word	0x080146cf

0800f894 <__mcmp>:
 800f894:	4603      	mov	r3, r0
 800f896:	690a      	ldr	r2, [r1, #16]
 800f898:	6900      	ldr	r0, [r0, #16]
 800f89a:	1a80      	subs	r0, r0, r2
 800f89c:	b530      	push	{r4, r5, lr}
 800f89e:	d10e      	bne.n	800f8be <__mcmp+0x2a>
 800f8a0:	3314      	adds	r3, #20
 800f8a2:	3114      	adds	r1, #20
 800f8a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8b4:	4295      	cmp	r5, r2
 800f8b6:	d003      	beq.n	800f8c0 <__mcmp+0x2c>
 800f8b8:	d205      	bcs.n	800f8c6 <__mcmp+0x32>
 800f8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f8be:	bd30      	pop	{r4, r5, pc}
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	d3f3      	bcc.n	800f8ac <__mcmp+0x18>
 800f8c4:	e7fb      	b.n	800f8be <__mcmp+0x2a>
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	e7f9      	b.n	800f8be <__mcmp+0x2a>
	...

0800f8cc <__mdiff>:
 800f8cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	4689      	mov	r9, r1
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	4614      	mov	r4, r2
 800f8d8:	4648      	mov	r0, r9
 800f8da:	f7ff ffdb 	bl	800f894 <__mcmp>
 800f8de:	1e05      	subs	r5, r0, #0
 800f8e0:	d112      	bne.n	800f908 <__mdiff+0x3c>
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7ff fd0f 	bl	800f308 <_Balloc>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	b928      	cbnz	r0, 800f8fa <__mdiff+0x2e>
 800f8ee:	4b41      	ldr	r3, [pc, #260]	@ (800f9f4 <__mdiff+0x128>)
 800f8f0:	f240 2137 	movw	r1, #567	@ 0x237
 800f8f4:	4840      	ldr	r0, [pc, #256]	@ (800f9f8 <__mdiff+0x12c>)
 800f8f6:	f001 fa17 	bl	8010d28 <__assert_func>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f900:	4610      	mov	r0, r2
 800f902:	b003      	add	sp, #12
 800f904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f908:	bfbc      	itt	lt
 800f90a:	464b      	movlt	r3, r9
 800f90c:	46a1      	movlt	r9, r4
 800f90e:	4630      	mov	r0, r6
 800f910:	bfb8      	it	lt
 800f912:	2501      	movlt	r5, #1
 800f914:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f918:	bfb4      	ite	lt
 800f91a:	461c      	movlt	r4, r3
 800f91c:	2500      	movge	r5, #0
 800f91e:	f7ff fcf3 	bl	800f308 <_Balloc>
 800f922:	4602      	mov	r2, r0
 800f924:	b918      	cbnz	r0, 800f92e <__mdiff+0x62>
 800f926:	4b33      	ldr	r3, [pc, #204]	@ (800f9f4 <__mdiff+0x128>)
 800f928:	f240 2145 	movw	r1, #581	@ 0x245
 800f92c:	e7e2      	b.n	800f8f4 <__mdiff+0x28>
 800f92e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f932:	f104 0e14 	add.w	lr, r4, #20
 800f936:	6926      	ldr	r6, [r4, #16]
 800f938:	f100 0b14 	add.w	fp, r0, #20
 800f93c:	60c5      	str	r5, [r0, #12]
 800f93e:	f109 0514 	add.w	r5, r9, #20
 800f942:	f109 0310 	add.w	r3, r9, #16
 800f946:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f94a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f94e:	46d9      	mov	r9, fp
 800f950:	f04f 0c00 	mov.w	ip, #0
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f95c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f960:	4576      	cmp	r6, lr
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	fa1f f38a 	uxth.w	r3, sl
 800f968:	4619      	mov	r1, r3
 800f96a:	b283      	uxth	r3, r0
 800f96c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800f970:	eba1 0303 	sub.w	r3, r1, r3
 800f974:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f978:	4463      	add	r3, ip
 800f97a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f97e:	b29b      	uxth	r3, r3
 800f980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f984:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f988:	f849 3b04 	str.w	r3, [r9], #4
 800f98c:	d8e3      	bhi.n	800f956 <__mdiff+0x8a>
 800f98e:	1b33      	subs	r3, r6, r4
 800f990:	3415      	adds	r4, #21
 800f992:	3b15      	subs	r3, #21
 800f994:	f023 0303 	bic.w	r3, r3, #3
 800f998:	3304      	adds	r3, #4
 800f99a:	42a6      	cmp	r6, r4
 800f99c:	bf38      	it	cc
 800f99e:	2304      	movcc	r3, #4
 800f9a0:	441d      	add	r5, r3
 800f9a2:	445b      	add	r3, fp
 800f9a4:	462c      	mov	r4, r5
 800f9a6:	461e      	mov	r6, r3
 800f9a8:	4544      	cmp	r4, r8
 800f9aa:	d30e      	bcc.n	800f9ca <__mdiff+0xfe>
 800f9ac:	f108 0103 	add.w	r1, r8, #3
 800f9b0:	1b49      	subs	r1, r1, r5
 800f9b2:	3d03      	subs	r5, #3
 800f9b4:	f021 0103 	bic.w	r1, r1, #3
 800f9b8:	45a8      	cmp	r8, r5
 800f9ba:	bf38      	it	cc
 800f9bc:	2100      	movcc	r1, #0
 800f9be:	440b      	add	r3, r1
 800f9c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9c4:	b199      	cbz	r1, 800f9ee <__mdiff+0x122>
 800f9c6:	6117      	str	r7, [r2, #16]
 800f9c8:	e79a      	b.n	800f900 <__mdiff+0x34>
 800f9ca:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9ce:	46e6      	mov	lr, ip
 800f9d0:	fa1f fc81 	uxth.w	ip, r1
 800f9d4:	0c08      	lsrs	r0, r1, #16
 800f9d6:	4471      	add	r1, lr
 800f9d8:	44f4      	add	ip, lr
 800f9da:	b289      	uxth	r1, r1
 800f9dc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9e8:	f846 1b04 	str.w	r1, [r6], #4
 800f9ec:	e7dc      	b.n	800f9a8 <__mdiff+0xdc>
 800f9ee:	3f01      	subs	r7, #1
 800f9f0:	e7e6      	b.n	800f9c0 <__mdiff+0xf4>
 800f9f2:	bf00      	nop
 800f9f4:	080146be 	.word	0x080146be
 800f9f8:	080146cf 	.word	0x080146cf

0800f9fc <__ulp>:
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	4b11      	ldr	r3, [pc, #68]	@ (800fa44 <__ulp+0x48>)
 800fa00:	ed8d 0b00 	vstr	d0, [sp]
 800fa04:	9a01      	ldr	r2, [sp, #4]
 800fa06:	4013      	ands	r3, r2
 800fa08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dc08      	bgt.n	800fa22 <__ulp+0x26>
 800fa10:	425b      	negs	r3, r3
 800fa12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa16:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa1a:	da04      	bge.n	800fa26 <__ulp+0x2a>
 800fa1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa20:	4113      	asrs	r3, r2
 800fa22:	2200      	movs	r2, #0
 800fa24:	e008      	b.n	800fa38 <__ulp+0x3c>
 800fa26:	f1a2 0314 	sub.w	r3, r2, #20
 800fa2a:	2b1e      	cmp	r3, #30
 800fa2c:	bfd6      	itet	le
 800fa2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa32:	2201      	movgt	r2, #1
 800fa34:	40da      	lsrle	r2, r3
 800fa36:	2300      	movs	r3, #0
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	ec41 0b10 	vmov	d0, r0, r1
 800fa40:	b002      	add	sp, #8
 800fa42:	4770      	bx	lr
 800fa44:	7ff00000 	.word	0x7ff00000

0800fa48 <__b2d>:
 800fa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4c:	6906      	ldr	r6, [r0, #16]
 800fa4e:	f100 0814 	add.w	r8, r0, #20
 800fa52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa56:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa5a:	1f37      	subs	r7, r6, #4
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	f7ff fd47 	bl	800f4f0 <__hi0bits>
 800fa62:	f1c0 0320 	rsb	r3, r0, #32
 800fa66:	280a      	cmp	r0, #10
 800fa68:	600b      	str	r3, [r1, #0]
 800fa6a:	491d      	ldr	r1, [pc, #116]	@ (800fae0 <__b2d+0x98>)
 800fa6c:	dc16      	bgt.n	800fa9c <__b2d+0x54>
 800fa6e:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa72:	45b8      	cmp	r8, r7
 800fa74:	f100 0015 	add.w	r0, r0, #21
 800fa78:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa7c:	fa02 f000 	lsl.w	r0, r2, r0
 800fa80:	ea43 0501 	orr.w	r5, r3, r1
 800fa84:	bf34      	ite	cc
 800fa86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa8a:	2300      	movcs	r3, #0
 800fa8c:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa90:	4303      	orrs	r3, r0
 800fa92:	461c      	mov	r4, r3
 800fa94:	ec45 4b10 	vmov	d0, r4, r5
 800fa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa9c:	45b8      	cmp	r8, r7
 800fa9e:	bf3a      	itte	cc
 800faa0:	f1a6 0708 	subcc.w	r7, r6, #8
 800faa4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800faa8:	2300      	movcs	r3, #0
 800faaa:	380b      	subs	r0, #11
 800faac:	d014      	beq.n	800fad8 <__b2d+0x90>
 800faae:	f1c0 0120 	rsb	r1, r0, #32
 800fab2:	4082      	lsls	r2, r0
 800fab4:	4547      	cmp	r7, r8
 800fab6:	fa23 f401 	lsr.w	r4, r3, r1
 800faba:	fa03 f300 	lsl.w	r3, r3, r0
 800fabe:	ea42 0204 	orr.w	r2, r2, r4
 800fac2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fac6:	bf8c      	ite	hi
 800fac8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800facc:	2200      	movls	r2, #0
 800face:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fad2:	40ca      	lsrs	r2, r1
 800fad4:	4313      	orrs	r3, r2
 800fad6:	e7dc      	b.n	800fa92 <__b2d+0x4a>
 800fad8:	ea42 0501 	orr.w	r5, r2, r1
 800fadc:	e7d9      	b.n	800fa92 <__b2d+0x4a>
 800fade:	bf00      	nop
 800fae0:	3ff00000 	.word	0x3ff00000

0800fae4 <__d2b>:
 800fae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fae8:	460f      	mov	r7, r1
 800faea:	2101      	movs	r1, #1
 800faec:	4616      	mov	r6, r2
 800faee:	ec59 8b10 	vmov	r8, r9, d0
 800faf2:	f7ff fc09 	bl	800f308 <_Balloc>
 800faf6:	4604      	mov	r4, r0
 800faf8:	b930      	cbnz	r0, 800fb08 <__d2b+0x24>
 800fafa:	4602      	mov	r2, r0
 800fafc:	4b23      	ldr	r3, [pc, #140]	@ (800fb8c <__d2b+0xa8>)
 800fafe:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb02:	4823      	ldr	r0, [pc, #140]	@ (800fb90 <__d2b+0xac>)
 800fb04:	f001 f910 	bl	8010d28 <__assert_func>
 800fb08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb10:	b10d      	cbz	r5, 800fb16 <__d2b+0x32>
 800fb12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb16:	9301      	str	r3, [sp, #4]
 800fb18:	f1b8 0300 	subs.w	r3, r8, #0
 800fb1c:	d023      	beq.n	800fb66 <__d2b+0x82>
 800fb1e:	4668      	mov	r0, sp
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	f7ff fd04 	bl	800f52e <__lo0bits>
 800fb26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb2a:	b1d0      	cbz	r0, 800fb62 <__d2b+0x7e>
 800fb2c:	f1c0 0320 	rsb	r3, r0, #32
 800fb30:	fa02 f303 	lsl.w	r3, r2, r3
 800fb34:	40c2      	lsrs	r2, r0
 800fb36:	430b      	orrs	r3, r1
 800fb38:	9201      	str	r2, [sp, #4]
 800fb3a:	6163      	str	r3, [r4, #20]
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	61a3      	str	r3, [r4, #24]
 800fb42:	bf0c      	ite	eq
 800fb44:	2201      	moveq	r2, #1
 800fb46:	2202      	movne	r2, #2
 800fb48:	6122      	str	r2, [r4, #16]
 800fb4a:	b1a5      	cbz	r5, 800fb76 <__d2b+0x92>
 800fb4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb50:	4405      	add	r5, r0
 800fb52:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb56:	603d      	str	r5, [r7, #0]
 800fb58:	6030      	str	r0, [r6, #0]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	b003      	add	sp, #12
 800fb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb62:	6161      	str	r1, [r4, #20]
 800fb64:	e7ea      	b.n	800fb3c <__d2b+0x58>
 800fb66:	a801      	add	r0, sp, #4
 800fb68:	f7ff fce1 	bl	800f52e <__lo0bits>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	3020      	adds	r0, #32
 800fb70:	2201      	movs	r2, #1
 800fb72:	6163      	str	r3, [r4, #20]
 800fb74:	e7e8      	b.n	800fb48 <__d2b+0x64>
 800fb76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb7e:	6038      	str	r0, [r7, #0]
 800fb80:	6918      	ldr	r0, [r3, #16]
 800fb82:	f7ff fcb5 	bl	800f4f0 <__hi0bits>
 800fb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb8a:	e7e5      	b.n	800fb58 <__d2b+0x74>
 800fb8c:	080146be 	.word	0x080146be
 800fb90:	080146cf 	.word	0x080146cf

0800fb94 <__ratio>:
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	b085      	sub	sp, #20
 800fb9a:	e9cd 1000 	strd	r1, r0, [sp]
 800fb9e:	a902      	add	r1, sp, #8
 800fba0:	f7ff ff52 	bl	800fa48 <__b2d>
 800fba4:	a903      	add	r1, sp, #12
 800fba6:	9800      	ldr	r0, [sp, #0]
 800fba8:	ec55 4b10 	vmov	r4, r5, d0
 800fbac:	f7ff ff4c 	bl	800fa48 <__b2d>
 800fbb0:	9b01      	ldr	r3, [sp, #4]
 800fbb2:	462f      	mov	r7, r5
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	6919      	ldr	r1, [r3, #16]
 800fbb8:	9b00      	ldr	r3, [sp, #0]
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	1ac9      	subs	r1, r1, r3
 800fbbe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbc2:	ec5b ab10 	vmov	sl, fp, d0
 800fbc6:	1a9b      	subs	r3, r3, r2
 800fbc8:	46d9      	mov	r9, fp
 800fbca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	bfcd      	iteet	gt
 800fbd2:	462a      	movgt	r2, r5
 800fbd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fbd8:	465a      	movle	r2, fp
 800fbda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fbde:	bfd8      	it	le
 800fbe0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	4639      	mov	r1, r7
 800fbe8:	464b      	mov	r3, r9
 800fbea:	f7f0 fe43 	bl	8000874 <__aeabi_ddiv>
 800fbee:	ec41 0b10 	vmov	d0, r0, r1
 800fbf2:	b005      	add	sp, #20
 800fbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbf8 <__copybits>:
 800fbf8:	3901      	subs	r1, #1
 800fbfa:	f102 0314 	add.w	r3, r2, #20
 800fbfe:	1149      	asrs	r1, r1, #5
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	3101      	adds	r1, #1
 800fc04:	6914      	ldr	r4, [r2, #16]
 800fc06:	1f05      	subs	r5, r0, #4
 800fc08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	d30c      	bcc.n	800fc2e <__copybits+0x36>
 800fc14:	1aa3      	subs	r3, r4, r2
 800fc16:	3211      	adds	r2, #17
 800fc18:	3b11      	subs	r3, #17
 800fc1a:	f023 0303 	bic.w	r3, r3, #3
 800fc1e:	42a2      	cmp	r2, r4
 800fc20:	bf88      	it	hi
 800fc22:	2300      	movhi	r3, #0
 800fc24:	4418      	add	r0, r3
 800fc26:	2300      	movs	r3, #0
 800fc28:	4288      	cmp	r0, r1
 800fc2a:	d305      	bcc.n	800fc38 <__copybits+0x40>
 800fc2c:	bd70      	pop	{r4, r5, r6, pc}
 800fc2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc32:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc36:	e7eb      	b.n	800fc10 <__copybits+0x18>
 800fc38:	f840 3b04 	str.w	r3, [r0], #4
 800fc3c:	e7f4      	b.n	800fc28 <__copybits+0x30>

0800fc3e <__any_on>:
 800fc3e:	f100 0214 	add.w	r2, r0, #20
 800fc42:	114b      	asrs	r3, r1, #5
 800fc44:	6900      	ldr	r0, [r0, #16]
 800fc46:	4298      	cmp	r0, r3
 800fc48:	b510      	push	{r4, lr}
 800fc4a:	db11      	blt.n	800fc70 <__any_on+0x32>
 800fc4c:	dd0a      	ble.n	800fc64 <__any_on+0x26>
 800fc4e:	f011 011f 	ands.w	r1, r1, #31
 800fc52:	d007      	beq.n	800fc64 <__any_on+0x26>
 800fc54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc58:	fa24 f001 	lsr.w	r0, r4, r1
 800fc5c:	fa00 f101 	lsl.w	r1, r0, r1
 800fc60:	428c      	cmp	r4, r1
 800fc62:	d10b      	bne.n	800fc7c <__any_on+0x3e>
 800fc64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d803      	bhi.n	800fc74 <__any_on+0x36>
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	bd10      	pop	{r4, pc}
 800fc70:	4603      	mov	r3, r0
 800fc72:	e7f7      	b.n	800fc64 <__any_on+0x26>
 800fc74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	d0f5      	beq.n	800fc68 <__any_on+0x2a>
 800fc7c:	2001      	movs	r0, #1
 800fc7e:	e7f6      	b.n	800fc6e <__any_on+0x30>

0800fc80 <sulp>:
 800fc80:	b570      	push	{r4, r5, r6, lr}
 800fc82:	4604      	mov	r4, r0
 800fc84:	460d      	mov	r5, r1
 800fc86:	4616      	mov	r6, r2
 800fc88:	ec45 4b10 	vmov	d0, r4, r5
 800fc8c:	f7ff feb6 	bl	800f9fc <__ulp>
 800fc90:	ec51 0b10 	vmov	r0, r1, d0
 800fc94:	b17e      	cbz	r6, 800fcb6 <sulp+0x36>
 800fc96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	dd09      	ble.n	800fcb6 <sulp+0x36>
 800fca2:	051b      	lsls	r3, r3, #20
 800fca4:	2400      	movs	r4, #0
 800fca6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fcaa:	4622      	mov	r2, r4
 800fcac:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fcb0:	462b      	mov	r3, r5
 800fcb2:	f7f0 fcb5 	bl	8000620 <__aeabi_dmul>
 800fcb6:	ec41 0b10 	vmov	d0, r0, r1
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	0000      	movs	r0, r0
	...

0800fcc0 <_strtod_l>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	b09f      	sub	sp, #124	@ 0x7c
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	f04f 0a00 	mov.w	sl, #0
 800fccc:	f04f 0b00 	mov.w	fp, #0
 800fcd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	9005      	str	r0, [sp, #20]
 800fcd6:	921a      	str	r2, [sp, #104]	@ 0x68
 800fcd8:	460a      	mov	r2, r1
 800fcda:	9219      	str	r2, [sp, #100]	@ 0x64
 800fcdc:	7811      	ldrb	r1, [r2, #0]
 800fcde:	292b      	cmp	r1, #43	@ 0x2b
 800fce0:	d04a      	beq.n	800fd78 <_strtod_l+0xb8>
 800fce2:	d838      	bhi.n	800fd56 <_strtod_l+0x96>
 800fce4:	290d      	cmp	r1, #13
 800fce6:	d832      	bhi.n	800fd4e <_strtod_l+0x8e>
 800fce8:	2908      	cmp	r1, #8
 800fcea:	d832      	bhi.n	800fd52 <_strtod_l+0x92>
 800fcec:	2900      	cmp	r1, #0
 800fcee:	d03b      	beq.n	800fd68 <_strtod_l+0xa8>
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fcf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fcf6:	782a      	ldrb	r2, [r5, #0]
 800fcf8:	2a30      	cmp	r2, #48	@ 0x30
 800fcfa:	f040 80b3 	bne.w	800fe64 <_strtod_l+0x1a4>
 800fcfe:	786a      	ldrb	r2, [r5, #1]
 800fd00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fd04:	2a58      	cmp	r2, #88	@ 0x58
 800fd06:	d16e      	bne.n	800fde6 <_strtod_l+0x126>
 800fd08:	9302      	str	r3, [sp, #8]
 800fd0a:	a919      	add	r1, sp, #100	@ 0x64
 800fd0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd0e:	4a90      	ldr	r2, [pc, #576]	@ (800ff50 <_strtod_l+0x290>)
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	ab1a      	add	r3, sp, #104	@ 0x68
 800fd14:	9805      	ldr	r0, [sp, #20]
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fd1a:	f001 f89d 	bl	8010e58 <__gethex>
 800fd1e:	f010 060f 	ands.w	r6, r0, #15
 800fd22:	4604      	mov	r4, r0
 800fd24:	d005      	beq.n	800fd32 <_strtod_l+0x72>
 800fd26:	2e06      	cmp	r6, #6
 800fd28:	d128      	bne.n	800fd7c <_strtod_l+0xbc>
 800fd2a:	3501      	adds	r5, #1
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800fd30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f040 858e 	bne.w	8010856 <_strtod_l+0xb96>
 800fd3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd3c:	b1cb      	cbz	r3, 800fd72 <_strtod_l+0xb2>
 800fd3e:	4652      	mov	r2, sl
 800fd40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fd44:	ec43 2b10 	vmov	d0, r2, r3
 800fd48:	b01f      	add	sp, #124	@ 0x7c
 800fd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4e:	2920      	cmp	r1, #32
 800fd50:	d1ce      	bne.n	800fcf0 <_strtod_l+0x30>
 800fd52:	3201      	adds	r2, #1
 800fd54:	e7c1      	b.n	800fcda <_strtod_l+0x1a>
 800fd56:	292d      	cmp	r1, #45	@ 0x2d
 800fd58:	d1ca      	bne.n	800fcf0 <_strtod_l+0x30>
 800fd5a:	2101      	movs	r1, #1
 800fd5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd5e:	1c51      	adds	r1, r2, #1
 800fd60:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd62:	7852      	ldrb	r2, [r2, #1]
 800fd64:	2a00      	cmp	r2, #0
 800fd66:	d1c5      	bne.n	800fcf4 <_strtod_l+0x34>
 800fd68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f040 8570 	bne.w	8010852 <_strtod_l+0xb92>
 800fd72:	4652      	mov	r2, sl
 800fd74:	465b      	mov	r3, fp
 800fd76:	e7e5      	b.n	800fd44 <_strtod_l+0x84>
 800fd78:	2100      	movs	r1, #0
 800fd7a:	e7ef      	b.n	800fd5c <_strtod_l+0x9c>
 800fd7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd7e:	b13a      	cbz	r2, 800fd90 <_strtod_l+0xd0>
 800fd80:	2135      	movs	r1, #53	@ 0x35
 800fd82:	a81c      	add	r0, sp, #112	@ 0x70
 800fd84:	f7ff ff38 	bl	800fbf8 <__copybits>
 800fd88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd8a:	9805      	ldr	r0, [sp, #20]
 800fd8c:	f7ff fafc 	bl	800f388 <_Bfree>
 800fd90:	3e01      	subs	r6, #1
 800fd92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd94:	2e04      	cmp	r6, #4
 800fd96:	d806      	bhi.n	800fda6 <_strtod_l+0xe6>
 800fd98:	e8df f006 	tbb	[pc, r6]
 800fd9c:	201d0314 	.word	0x201d0314
 800fda0:	14          	.byte	0x14
 800fda1:	00          	.byte	0x00
 800fda2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fda6:	05e1      	lsls	r1, r4, #23
 800fda8:	bf48      	it	mi
 800fdaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fdae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdb2:	0d1b      	lsrs	r3, r3, #20
 800fdb4:	051b      	lsls	r3, r3, #20
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d1bb      	bne.n	800fd32 <_strtod_l+0x72>
 800fdba:	f7fe fb05 	bl	800e3c8 <__errno>
 800fdbe:	2322      	movs	r3, #34	@ 0x22
 800fdc0:	6003      	str	r3, [r0, #0]
 800fdc2:	e7b6      	b.n	800fd32 <_strtod_l+0x72>
 800fdc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fdc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fdcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fdd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdd4:	e7e7      	b.n	800fda6 <_strtod_l+0xe6>
 800fdd6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ff58 <_strtod_l+0x298>
 800fdda:	e7e4      	b.n	800fda6 <_strtod_l+0xe6>
 800fddc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fde0:	f04f 3aff 	mov.w	sl, #4294967295
 800fde4:	e7df      	b.n	800fda6 <_strtod_l+0xe6>
 800fde6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fde8:	1c5a      	adds	r2, r3, #1
 800fdea:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdec:	785b      	ldrb	r3, [r3, #1]
 800fdee:	2b30      	cmp	r3, #48	@ 0x30
 800fdf0:	d0f9      	beq.n	800fde6 <_strtod_l+0x126>
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d09d      	beq.n	800fd32 <_strtod_l+0x72>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdfa:	220a      	movs	r2, #10
 800fdfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fdfe:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe00:	2300      	movs	r3, #0
 800fe02:	461f      	mov	r7, r3
 800fe04:	9308      	str	r3, [sp, #32]
 800fe06:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fe0a:	7805      	ldrb	r5, [r0, #0]
 800fe0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fe10:	b2d9      	uxtb	r1, r3
 800fe12:	2909      	cmp	r1, #9
 800fe14:	d928      	bls.n	800fe68 <_strtod_l+0x1a8>
 800fe16:	2201      	movs	r2, #1
 800fe18:	494e      	ldr	r1, [pc, #312]	@ (800ff54 <_strtod_l+0x294>)
 800fe1a:	f000 ff59 	bl	8010cd0 <strncmp>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d033      	beq.n	800fe8a <_strtod_l+0x1ca>
 800fe22:	2000      	movs	r0, #0
 800fe24:	462a      	mov	r2, r5
 800fe26:	463d      	mov	r5, r7
 800fe28:	4681      	mov	r9, r0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2a65      	cmp	r2, #101	@ 0x65
 800fe2e:	d001      	beq.n	800fe34 <_strtod_l+0x174>
 800fe30:	2a45      	cmp	r2, #69	@ 0x45
 800fe32:	d114      	bne.n	800fe5e <_strtod_l+0x19e>
 800fe34:	b91d      	cbnz	r5, 800fe3e <_strtod_l+0x17e>
 800fe36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe38:	4302      	orrs	r2, r0
 800fe3a:	d095      	beq.n	800fd68 <_strtod_l+0xa8>
 800fe3c:	2500      	movs	r5, #0
 800fe3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fe40:	1c62      	adds	r2, r4, #1
 800fe42:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe44:	7862      	ldrb	r2, [r4, #1]
 800fe46:	2a2b      	cmp	r2, #43	@ 0x2b
 800fe48:	d078      	beq.n	800ff3c <_strtod_l+0x27c>
 800fe4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800fe4c:	d07c      	beq.n	800ff48 <_strtod_l+0x288>
 800fe4e:	f04f 0c00 	mov.w	ip, #0
 800fe52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fe56:	2909      	cmp	r1, #9
 800fe58:	f240 8084 	bls.w	800ff64 <_strtod_l+0x2a4>
 800fe5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe5e:	f04f 0800 	mov.w	r8, #0
 800fe62:	e0a4      	b.n	800ffae <_strtod_l+0x2ee>
 800fe64:	2300      	movs	r3, #0
 800fe66:	e7c7      	b.n	800fdf8 <_strtod_l+0x138>
 800fe68:	2f08      	cmp	r7, #8
 800fe6a:	f100 0001 	add.w	r0, r0, #1
 800fe6e:	f107 0701 	add.w	r7, r7, #1
 800fe72:	bfd5      	itete	le
 800fe74:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe76:	9908      	ldrgt	r1, [sp, #32]
 800fe78:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe7c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe80:	bfd4      	ite	le
 800fe82:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe84:	9308      	strgt	r3, [sp, #32]
 800fe86:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe88:	e7be      	b.n	800fe08 <_strtod_l+0x148>
 800fe8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe90:	785a      	ldrb	r2, [r3, #1]
 800fe92:	b37f      	cbz	r7, 800fef4 <_strtod_l+0x234>
 800fe94:	4681      	mov	r9, r0
 800fe96:	463d      	mov	r5, r7
 800fe98:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe9c:	2b09      	cmp	r3, #9
 800fe9e:	d912      	bls.n	800fec6 <_strtod_l+0x206>
 800fea0:	2301      	movs	r3, #1
 800fea2:	e7c3      	b.n	800fe2c <_strtod_l+0x16c>
 800fea4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fea6:	3001      	adds	r0, #1
 800fea8:	1c5a      	adds	r2, r3, #1
 800feaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800feac:	785a      	ldrb	r2, [r3, #1]
 800feae:	2a30      	cmp	r2, #48	@ 0x30
 800feb0:	d0f8      	beq.n	800fea4 <_strtod_l+0x1e4>
 800feb2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800feb6:	2b08      	cmp	r3, #8
 800feb8:	f200 84d2 	bhi.w	8010860 <_strtod_l+0xba0>
 800febc:	4681      	mov	r9, r0
 800febe:	2000      	movs	r0, #0
 800fec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fec2:	4605      	mov	r5, r0
 800fec4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fec6:	3a30      	subs	r2, #48	@ 0x30
 800fec8:	f100 0301 	add.w	r3, r0, #1
 800fecc:	d02a      	beq.n	800ff24 <_strtod_l+0x264>
 800fece:	4499      	add	r9, r3
 800fed0:	eb00 0c05 	add.w	ip, r0, r5
 800fed4:	462b      	mov	r3, r5
 800fed6:	210a      	movs	r1, #10
 800fed8:	4563      	cmp	r3, ip
 800feda:	d10d      	bne.n	800fef8 <_strtod_l+0x238>
 800fedc:	1c69      	adds	r1, r5, #1
 800fede:	4401      	add	r1, r0
 800fee0:	4428      	add	r0, r5
 800fee2:	2808      	cmp	r0, #8
 800fee4:	dc16      	bgt.n	800ff14 <_strtod_l+0x254>
 800fee6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fee8:	230a      	movs	r3, #10
 800feea:	fb03 2300 	mla	r3, r3, r0, r2
 800feee:	930a      	str	r3, [sp, #40]	@ 0x28
 800fef0:	2300      	movs	r3, #0
 800fef2:	e018      	b.n	800ff26 <_strtod_l+0x266>
 800fef4:	4638      	mov	r0, r7
 800fef6:	e7da      	b.n	800feae <_strtod_l+0x1ee>
 800fef8:	2b08      	cmp	r3, #8
 800fefa:	f103 0301 	add.w	r3, r3, #1
 800fefe:	dc03      	bgt.n	800ff08 <_strtod_l+0x248>
 800ff00:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ff02:	434e      	muls	r6, r1
 800ff04:	960a      	str	r6, [sp, #40]	@ 0x28
 800ff06:	e7e7      	b.n	800fed8 <_strtod_l+0x218>
 800ff08:	2b10      	cmp	r3, #16
 800ff0a:	bfde      	ittt	le
 800ff0c:	9e08      	ldrle	r6, [sp, #32]
 800ff0e:	434e      	mulle	r6, r1
 800ff10:	9608      	strle	r6, [sp, #32]
 800ff12:	e7e1      	b.n	800fed8 <_strtod_l+0x218>
 800ff14:	280f      	cmp	r0, #15
 800ff16:	dceb      	bgt.n	800fef0 <_strtod_l+0x230>
 800ff18:	9808      	ldr	r0, [sp, #32]
 800ff1a:	230a      	movs	r3, #10
 800ff1c:	fb03 2300 	mla	r3, r3, r0, r2
 800ff20:	9308      	str	r3, [sp, #32]
 800ff22:	e7e5      	b.n	800fef0 <_strtod_l+0x230>
 800ff24:	4629      	mov	r1, r5
 800ff26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff28:	460d      	mov	r5, r1
 800ff2a:	1c50      	adds	r0, r2, #1
 800ff2c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ff2e:	4618      	mov	r0, r3
 800ff30:	7852      	ldrb	r2, [r2, #1]
 800ff32:	e7b1      	b.n	800fe98 <_strtod_l+0x1d8>
 800ff34:	f04f 0900 	mov.w	r9, #0
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e77c      	b.n	800fe36 <_strtod_l+0x176>
 800ff3c:	f04f 0c00 	mov.w	ip, #0
 800ff40:	1ca2      	adds	r2, r4, #2
 800ff42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff44:	78a2      	ldrb	r2, [r4, #2]
 800ff46:	e784      	b.n	800fe52 <_strtod_l+0x192>
 800ff48:	f04f 0c01 	mov.w	ip, #1
 800ff4c:	e7f8      	b.n	800ff40 <_strtod_l+0x280>
 800ff4e:	bf00      	nop
 800ff50:	08014840 	.word	0x08014840
 800ff54:	08014828 	.word	0x08014828
 800ff58:	7ff00000 	.word	0x7ff00000
 800ff5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff5e:	1c51      	adds	r1, r2, #1
 800ff60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ff62:	7852      	ldrb	r2, [r2, #1]
 800ff64:	2a30      	cmp	r2, #48	@ 0x30
 800ff66:	d0f9      	beq.n	800ff5c <_strtod_l+0x29c>
 800ff68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff6c:	2908      	cmp	r1, #8
 800ff6e:	f63f af76 	bhi.w	800fe5e <_strtod_l+0x19e>
 800ff72:	3a30      	subs	r2, #48	@ 0x30
 800ff74:	f04f 080a 	mov.w	r8, #10
 800ff78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff80:	1c56      	adds	r6, r2, #1
 800ff82:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff84:	7852      	ldrb	r2, [r2, #1]
 800ff86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff8a:	f1be 0f09 	cmp.w	lr, #9
 800ff8e:	d939      	bls.n	8010004 <_strtod_l+0x344>
 800ff90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff96:	1a76      	subs	r6, r6, r1
 800ff98:	2e08      	cmp	r6, #8
 800ff9a:	dc03      	bgt.n	800ffa4 <_strtod_l+0x2e4>
 800ff9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff9e:	4588      	cmp	r8, r1
 800ffa0:	bfa8      	it	ge
 800ffa2:	4688      	movge	r8, r1
 800ffa4:	f1bc 0f00 	cmp.w	ip, #0
 800ffa8:	d001      	beq.n	800ffae <_strtod_l+0x2ee>
 800ffaa:	f1c8 0800 	rsb	r8, r8, #0
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	d14e      	bne.n	8010050 <_strtod_l+0x390>
 800ffb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffb4:	4308      	orrs	r0, r1
 800ffb6:	f47f aebc 	bne.w	800fd32 <_strtod_l+0x72>
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f47f aed4 	bne.w	800fd68 <_strtod_l+0xa8>
 800ffc0:	2a69      	cmp	r2, #105	@ 0x69
 800ffc2:	d028      	beq.n	8010016 <_strtod_l+0x356>
 800ffc4:	dc25      	bgt.n	8010012 <_strtod_l+0x352>
 800ffc6:	2a49      	cmp	r2, #73	@ 0x49
 800ffc8:	d025      	beq.n	8010016 <_strtod_l+0x356>
 800ffca:	2a4e      	cmp	r2, #78	@ 0x4e
 800ffcc:	f47f aecc 	bne.w	800fd68 <_strtod_l+0xa8>
 800ffd0:	499b      	ldr	r1, [pc, #620]	@ (8010240 <_strtod_l+0x580>)
 800ffd2:	a819      	add	r0, sp, #100	@ 0x64
 800ffd4:	f001 f960 	bl	8011298 <__match>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	f43f aec5 	beq.w	800fd68 <_strtod_l+0xa8>
 800ffde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b28      	cmp	r3, #40	@ 0x28
 800ffe4:	d12e      	bne.n	8010044 <_strtod_l+0x384>
 800ffe6:	aa1c      	add	r2, sp, #112	@ 0x70
 800ffe8:	4996      	ldr	r1, [pc, #600]	@ (8010244 <_strtod_l+0x584>)
 800ffea:	a819      	add	r0, sp, #100	@ 0x64
 800ffec:	f001 f968 	bl	80112c0 <__hexnan>
 800fff0:	2805      	cmp	r0, #5
 800fff2:	d127      	bne.n	8010044 <_strtod_l+0x384>
 800fff4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fff6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fffa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fffe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010002:	e696      	b.n	800fd32 <_strtod_l+0x72>
 8010004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010006:	fb08 2101 	mla	r1, r8, r1, r2
 801000a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801000e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010010:	e7b5      	b.n	800ff7e <_strtod_l+0x2be>
 8010012:	2a6e      	cmp	r2, #110	@ 0x6e
 8010014:	e7da      	b.n	800ffcc <_strtod_l+0x30c>
 8010016:	498c      	ldr	r1, [pc, #560]	@ (8010248 <_strtod_l+0x588>)
 8010018:	a819      	add	r0, sp, #100	@ 0x64
 801001a:	f001 f93d 	bl	8011298 <__match>
 801001e:	2800      	cmp	r0, #0
 8010020:	f43f aea2 	beq.w	800fd68 <_strtod_l+0xa8>
 8010024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010026:	a819      	add	r0, sp, #100	@ 0x64
 8010028:	4988      	ldr	r1, [pc, #544]	@ (801024c <_strtod_l+0x58c>)
 801002a:	3b01      	subs	r3, #1
 801002c:	9319      	str	r3, [sp, #100]	@ 0x64
 801002e:	f001 f933 	bl	8011298 <__match>
 8010032:	b910      	cbnz	r0, 801003a <_strtod_l+0x37a>
 8010034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010036:	3301      	adds	r3, #1
 8010038:	9319      	str	r3, [sp, #100]	@ 0x64
 801003a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801025c <_strtod_l+0x59c>
 801003e:	f04f 0a00 	mov.w	sl, #0
 8010042:	e676      	b.n	800fd32 <_strtod_l+0x72>
 8010044:	4882      	ldr	r0, [pc, #520]	@ (8010250 <_strtod_l+0x590>)
 8010046:	f000 fe67 	bl	8010d18 <nan>
 801004a:	ec5b ab10 	vmov	sl, fp, d0
 801004e:	e670      	b.n	800fd32 <_strtod_l+0x72>
 8010050:	eba8 0309 	sub.w	r3, r8, r9
 8010054:	2f00      	cmp	r7, #0
 8010056:	bf08      	it	eq
 8010058:	462f      	moveq	r7, r5
 801005a:	2d10      	cmp	r5, #16
 801005c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801005e:	462c      	mov	r4, r5
 8010060:	9309      	str	r3, [sp, #36]	@ 0x24
 8010062:	bfa8      	it	ge
 8010064:	2410      	movge	r4, #16
 8010066:	f7f0 fa61 	bl	800052c <__aeabi_ui2d>
 801006a:	2d09      	cmp	r5, #9
 801006c:	4682      	mov	sl, r0
 801006e:	468b      	mov	fp, r1
 8010070:	dc13      	bgt.n	801009a <_strtod_l+0x3da>
 8010072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010074:	2b00      	cmp	r3, #0
 8010076:	f43f ae5c 	beq.w	800fd32 <_strtod_l+0x72>
 801007a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801007c:	dd78      	ble.n	8010170 <_strtod_l+0x4b0>
 801007e:	2b16      	cmp	r3, #22
 8010080:	dc5f      	bgt.n	8010142 <_strtod_l+0x482>
 8010082:	4974      	ldr	r1, [pc, #464]	@ (8010254 <_strtod_l+0x594>)
 8010084:	4652      	mov	r2, sl
 8010086:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801008a:	465b      	mov	r3, fp
 801008c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010090:	f7f0 fac6 	bl	8000620 <__aeabi_dmul>
 8010094:	4682      	mov	sl, r0
 8010096:	468b      	mov	fp, r1
 8010098:	e64b      	b.n	800fd32 <_strtod_l+0x72>
 801009a:	4b6e      	ldr	r3, [pc, #440]	@ (8010254 <_strtod_l+0x594>)
 801009c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80100a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80100a4:	f7f0 fabc 	bl	8000620 <__aeabi_dmul>
 80100a8:	4682      	mov	sl, r0
 80100aa:	468b      	mov	fp, r1
 80100ac:	9808      	ldr	r0, [sp, #32]
 80100ae:	f7f0 fa3d 	bl	800052c <__aeabi_ui2d>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4650      	mov	r0, sl
 80100b8:	4659      	mov	r1, fp
 80100ba:	f7f0 f8fb 	bl	80002b4 <__adddf3>
 80100be:	2d0f      	cmp	r5, #15
 80100c0:	4682      	mov	sl, r0
 80100c2:	468b      	mov	fp, r1
 80100c4:	ddd5      	ble.n	8010072 <_strtod_l+0x3b2>
 80100c6:	1b2c      	subs	r4, r5, r4
 80100c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ca:	441c      	add	r4, r3
 80100cc:	2c00      	cmp	r4, #0
 80100ce:	f340 8096 	ble.w	80101fe <_strtod_l+0x53e>
 80100d2:	f014 030f 	ands.w	r3, r4, #15
 80100d6:	d00a      	beq.n	80100ee <_strtod_l+0x42e>
 80100d8:	495e      	ldr	r1, [pc, #376]	@ (8010254 <_strtod_l+0x594>)
 80100da:	4652      	mov	r2, sl
 80100dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100e0:	465b      	mov	r3, fp
 80100e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100e6:	f7f0 fa9b 	bl	8000620 <__aeabi_dmul>
 80100ea:	4682      	mov	sl, r0
 80100ec:	468b      	mov	fp, r1
 80100ee:	f034 040f 	bics.w	r4, r4, #15
 80100f2:	d073      	beq.n	80101dc <_strtod_l+0x51c>
 80100f4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80100f8:	dd48      	ble.n	801018c <_strtod_l+0x4cc>
 80100fa:	2400      	movs	r4, #0
 80100fc:	46a0      	mov	r8, r4
 80100fe:	46a1      	mov	r9, r4
 8010100:	940a      	str	r4, [sp, #40]	@ 0x28
 8010102:	2322      	movs	r3, #34	@ 0x22
 8010104:	9a05      	ldr	r2, [sp, #20]
 8010106:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801025c <_strtod_l+0x59c>
 801010a:	f04f 0a00 	mov.w	sl, #0
 801010e:	6013      	str	r3, [r2, #0]
 8010110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010112:	2b00      	cmp	r3, #0
 8010114:	f43f ae0d 	beq.w	800fd32 <_strtod_l+0x72>
 8010118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801011a:	9805      	ldr	r0, [sp, #20]
 801011c:	f7ff f934 	bl	800f388 <_Bfree>
 8010120:	4649      	mov	r1, r9
 8010122:	9805      	ldr	r0, [sp, #20]
 8010124:	f7ff f930 	bl	800f388 <_Bfree>
 8010128:	4641      	mov	r1, r8
 801012a:	9805      	ldr	r0, [sp, #20]
 801012c:	f7ff f92c 	bl	800f388 <_Bfree>
 8010130:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010132:	9805      	ldr	r0, [sp, #20]
 8010134:	f7ff f928 	bl	800f388 <_Bfree>
 8010138:	4621      	mov	r1, r4
 801013a:	9805      	ldr	r0, [sp, #20]
 801013c:	f7ff f924 	bl	800f388 <_Bfree>
 8010140:	e5f7      	b.n	800fd32 <_strtod_l+0x72>
 8010142:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010148:	4293      	cmp	r3, r2
 801014a:	dbbc      	blt.n	80100c6 <_strtod_l+0x406>
 801014c:	f1c5 050f 	rsb	r5, r5, #15
 8010150:	4c40      	ldr	r4, [pc, #256]	@ (8010254 <_strtod_l+0x594>)
 8010152:	4652      	mov	r2, sl
 8010154:	465b      	mov	r3, fp
 8010156:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801015a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801015e:	f7f0 fa5f 	bl	8000620 <__aeabi_dmul>
 8010162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010164:	1b5d      	subs	r5, r3, r5
 8010166:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801016a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801016e:	e78f      	b.n	8010090 <_strtod_l+0x3d0>
 8010170:	3316      	adds	r3, #22
 8010172:	dba8      	blt.n	80100c6 <_strtod_l+0x406>
 8010174:	eba9 0808 	sub.w	r8, r9, r8
 8010178:	4b36      	ldr	r3, [pc, #216]	@ (8010254 <_strtod_l+0x594>)
 801017a:	4650      	mov	r0, sl
 801017c:	4659      	mov	r1, fp
 801017e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010182:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010186:	f7f0 fb75 	bl	8000874 <__aeabi_ddiv>
 801018a:	e783      	b.n	8010094 <_strtod_l+0x3d4>
 801018c:	4b32      	ldr	r3, [pc, #200]	@ (8010258 <_strtod_l+0x598>)
 801018e:	1124      	asrs	r4, r4, #4
 8010190:	4650      	mov	r0, sl
 8010192:	4659      	mov	r1, fp
 8010194:	9308      	str	r3, [sp, #32]
 8010196:	2300      	movs	r3, #0
 8010198:	461e      	mov	r6, r3
 801019a:	2c01      	cmp	r4, #1
 801019c:	dc21      	bgt.n	80101e2 <_strtod_l+0x522>
 801019e:	b10b      	cbz	r3, 80101a4 <_strtod_l+0x4e4>
 80101a0:	4682      	mov	sl, r0
 80101a2:	468b      	mov	fp, r1
 80101a4:	492c      	ldr	r1, [pc, #176]	@ (8010258 <_strtod_l+0x598>)
 80101a6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80101aa:	4652      	mov	r2, sl
 80101ac:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80101b0:	465b      	mov	r3, fp
 80101b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101b6:	f7f0 fa33 	bl	8000620 <__aeabi_dmul>
 80101ba:	4b28      	ldr	r3, [pc, #160]	@ (801025c <_strtod_l+0x59c>)
 80101bc:	460a      	mov	r2, r1
 80101be:	4682      	mov	sl, r0
 80101c0:	400b      	ands	r3, r1
 80101c2:	4927      	ldr	r1, [pc, #156]	@ (8010260 <_strtod_l+0x5a0>)
 80101c4:	428b      	cmp	r3, r1
 80101c6:	d898      	bhi.n	80100fa <_strtod_l+0x43a>
 80101c8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80101cc:	428b      	cmp	r3, r1
 80101ce:	bf86      	itte	hi
 80101d0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010264 <_strtod_l+0x5a4>
 80101d4:	f04f 3aff 	movhi.w	sl, #4294967295
 80101d8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80101dc:	2300      	movs	r3, #0
 80101de:	9308      	str	r3, [sp, #32]
 80101e0:	e07a      	b.n	80102d8 <_strtod_l+0x618>
 80101e2:	07e2      	lsls	r2, r4, #31
 80101e4:	d505      	bpl.n	80101f2 <_strtod_l+0x532>
 80101e6:	9b08      	ldr	r3, [sp, #32]
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	f7f0 fa18 	bl	8000620 <__aeabi_dmul>
 80101f0:	2301      	movs	r3, #1
 80101f2:	9a08      	ldr	r2, [sp, #32]
 80101f4:	3601      	adds	r6, #1
 80101f6:	1064      	asrs	r4, r4, #1
 80101f8:	3208      	adds	r2, #8
 80101fa:	9208      	str	r2, [sp, #32]
 80101fc:	e7cd      	b.n	801019a <_strtod_l+0x4da>
 80101fe:	d0ed      	beq.n	80101dc <_strtod_l+0x51c>
 8010200:	4264      	negs	r4, r4
 8010202:	f014 020f 	ands.w	r2, r4, #15
 8010206:	d00a      	beq.n	801021e <_strtod_l+0x55e>
 8010208:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <_strtod_l+0x594>)
 801020a:	4650      	mov	r0, sl
 801020c:	4659      	mov	r1, fp
 801020e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7f0 fb2d 	bl	8000874 <__aeabi_ddiv>
 801021a:	4682      	mov	sl, r0
 801021c:	468b      	mov	fp, r1
 801021e:	1124      	asrs	r4, r4, #4
 8010220:	d0dc      	beq.n	80101dc <_strtod_l+0x51c>
 8010222:	2c1f      	cmp	r4, #31
 8010224:	dd20      	ble.n	8010268 <_strtod_l+0x5a8>
 8010226:	2400      	movs	r4, #0
 8010228:	46a0      	mov	r8, r4
 801022a:	46a1      	mov	r9, r4
 801022c:	940a      	str	r4, [sp, #40]	@ 0x28
 801022e:	2322      	movs	r3, #34	@ 0x22
 8010230:	9a05      	ldr	r2, [sp, #20]
 8010232:	f04f 0a00 	mov.w	sl, #0
 8010236:	f04f 0b00 	mov.w	fp, #0
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	e768      	b.n	8010110 <_strtod_l+0x450>
 801023e:	bf00      	nop
 8010240:	08014616 	.word	0x08014616
 8010244:	0801482c 	.word	0x0801482c
 8010248:	0801460e 	.word	0x0801460e
 801024c:	08014645 	.word	0x08014645
 8010250:	080148d4 	.word	0x080148d4
 8010254:	08014760 	.word	0x08014760
 8010258:	08014738 	.word	0x08014738
 801025c:	7ff00000 	.word	0x7ff00000
 8010260:	7ca00000 	.word	0x7ca00000
 8010264:	7fefffff 	.word	0x7fefffff
 8010268:	f014 0310 	ands.w	r3, r4, #16
 801026c:	4650      	mov	r0, sl
 801026e:	4659      	mov	r1, fp
 8010270:	4ea9      	ldr	r6, [pc, #676]	@ (8010518 <_strtod_l+0x858>)
 8010272:	bf18      	it	ne
 8010274:	236a      	movne	r3, #106	@ 0x6a
 8010276:	9308      	str	r3, [sp, #32]
 8010278:	2300      	movs	r3, #0
 801027a:	07e2      	lsls	r2, r4, #31
 801027c:	d504      	bpl.n	8010288 <_strtod_l+0x5c8>
 801027e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010282:	f7f0 f9cd 	bl	8000620 <__aeabi_dmul>
 8010286:	2301      	movs	r3, #1
 8010288:	1064      	asrs	r4, r4, #1
 801028a:	f106 0608 	add.w	r6, r6, #8
 801028e:	d1f4      	bne.n	801027a <_strtod_l+0x5ba>
 8010290:	b10b      	cbz	r3, 8010296 <_strtod_l+0x5d6>
 8010292:	4682      	mov	sl, r0
 8010294:	468b      	mov	fp, r1
 8010296:	9b08      	ldr	r3, [sp, #32]
 8010298:	b1b3      	cbz	r3, 80102c8 <_strtod_l+0x608>
 801029a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801029e:	4659      	mov	r1, fp
 80102a0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	dd0f      	ble.n	80102c8 <_strtod_l+0x608>
 80102a8:	2b1f      	cmp	r3, #31
 80102aa:	dd55      	ble.n	8010358 <_strtod_l+0x698>
 80102ac:	2b34      	cmp	r3, #52	@ 0x34
 80102ae:	f04f 0a00 	mov.w	sl, #0
 80102b2:	bfdb      	ittet	le
 80102b4:	f04f 33ff 	movle.w	r3, #4294967295
 80102b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80102bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80102c0:	4093      	lslle	r3, r2
 80102c2:	bfd8      	it	le
 80102c4:	ea03 0b01 	andle.w	fp, r3, r1
 80102c8:	2200      	movs	r2, #0
 80102ca:	2300      	movs	r3, #0
 80102cc:	4650      	mov	r0, sl
 80102ce:	4659      	mov	r1, fp
 80102d0:	f7f0 fc0e 	bl	8000af0 <__aeabi_dcmpeq>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d1a6      	bne.n	8010226 <_strtod_l+0x566>
 80102d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102da:	463a      	mov	r2, r7
 80102dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	462b      	mov	r3, r5
 80102e2:	9805      	ldr	r0, [sp, #20]
 80102e4:	f7ff f8ba 	bl	800f45c <__s2b>
 80102e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80102ea:	2800      	cmp	r0, #0
 80102ec:	f43f af05 	beq.w	80100fa <_strtod_l+0x43a>
 80102f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102f2:	eba9 0308 	sub.w	r3, r9, r8
 80102f6:	2400      	movs	r4, #0
 80102f8:	2a00      	cmp	r2, #0
 80102fa:	46a0      	mov	r8, r4
 80102fc:	bfa8      	it	ge
 80102fe:	2300      	movge	r3, #0
 8010300:	9312      	str	r3, [sp, #72]	@ 0x48
 8010302:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010306:	9316      	str	r3, [sp, #88]	@ 0x58
 8010308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801030a:	9805      	ldr	r0, [sp, #20]
 801030c:	6859      	ldr	r1, [r3, #4]
 801030e:	f7fe fffb 	bl	800f308 <_Balloc>
 8010312:	4681      	mov	r9, r0
 8010314:	2800      	cmp	r0, #0
 8010316:	f43f aef4 	beq.w	8010102 <_strtod_l+0x442>
 801031a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801031c:	300c      	adds	r0, #12
 801031e:	691a      	ldr	r2, [r3, #16]
 8010320:	f103 010c 	add.w	r1, r3, #12
 8010324:	3202      	adds	r2, #2
 8010326:	0092      	lsls	r2, r2, #2
 8010328:	f7fe f889 	bl	800e43e <memcpy>
 801032c:	aa1c      	add	r2, sp, #112	@ 0x70
 801032e:	a91b      	add	r1, sp, #108	@ 0x6c
 8010330:	9805      	ldr	r0, [sp, #20]
 8010332:	ec4b ab10 	vmov	d0, sl, fp
 8010336:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801033a:	f7ff fbd3 	bl	800fae4 <__d2b>
 801033e:	901a      	str	r0, [sp, #104]	@ 0x68
 8010340:	2800      	cmp	r0, #0
 8010342:	f43f aede 	beq.w	8010102 <_strtod_l+0x442>
 8010346:	2101      	movs	r1, #1
 8010348:	9805      	ldr	r0, [sp, #20]
 801034a:	f7ff f91d 	bl	800f588 <__i2b>
 801034e:	4680      	mov	r8, r0
 8010350:	b948      	cbnz	r0, 8010366 <_strtod_l+0x6a6>
 8010352:	f04f 0800 	mov.w	r8, #0
 8010356:	e6d4      	b.n	8010102 <_strtod_l+0x442>
 8010358:	f04f 32ff 	mov.w	r2, #4294967295
 801035c:	fa02 f303 	lsl.w	r3, r2, r3
 8010360:	ea03 0a0a 	and.w	sl, r3, sl
 8010364:	e7b0      	b.n	80102c8 <_strtod_l+0x608>
 8010366:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010368:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801036a:	2d00      	cmp	r5, #0
 801036c:	bfa9      	itett	ge
 801036e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010370:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010372:	18ef      	addge	r7, r5, r3
 8010374:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010376:	bfb8      	it	lt
 8010378:	1b5e      	sublt	r6, r3, r5
 801037a:	9b08      	ldr	r3, [sp, #32]
 801037c:	bfb8      	it	lt
 801037e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010380:	1aed      	subs	r5, r5, r3
 8010382:	4b66      	ldr	r3, [pc, #408]	@ (801051c <_strtod_l+0x85c>)
 8010384:	4415      	add	r5, r2
 8010386:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801038a:	3d01      	subs	r5, #1
 801038c:	429d      	cmp	r5, r3
 801038e:	da4f      	bge.n	8010430 <_strtod_l+0x770>
 8010390:	1b5b      	subs	r3, r3, r5
 8010392:	2101      	movs	r1, #1
 8010394:	2b1f      	cmp	r3, #31
 8010396:	eba2 0203 	sub.w	r2, r2, r3
 801039a:	dc3d      	bgt.n	8010418 <_strtod_l+0x758>
 801039c:	fa01 f303 	lsl.w	r3, r1, r3
 80103a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103a2:	2300      	movs	r3, #0
 80103a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80103a6:	18bd      	adds	r5, r7, r2
 80103a8:	9b08      	ldr	r3, [sp, #32]
 80103aa:	4416      	add	r6, r2
 80103ac:	42af      	cmp	r7, r5
 80103ae:	441e      	add	r6, r3
 80103b0:	463b      	mov	r3, r7
 80103b2:	bfa8      	it	ge
 80103b4:	462b      	movge	r3, r5
 80103b6:	42b3      	cmp	r3, r6
 80103b8:	bfa8      	it	ge
 80103ba:	4633      	movge	r3, r6
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bfc2      	ittt	gt
 80103c0:	1aed      	subgt	r5, r5, r3
 80103c2:	1af6      	subgt	r6, r6, r3
 80103c4:	1aff      	subgt	r7, r7, r3
 80103c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	dd16      	ble.n	80103fa <_strtod_l+0x73a>
 80103cc:	4641      	mov	r1, r8
 80103ce:	461a      	mov	r2, r3
 80103d0:	9805      	ldr	r0, [sp, #20]
 80103d2:	f7ff f999 	bl	800f708 <__pow5mult>
 80103d6:	4680      	mov	r8, r0
 80103d8:	2800      	cmp	r0, #0
 80103da:	d0ba      	beq.n	8010352 <_strtod_l+0x692>
 80103dc:	4601      	mov	r1, r0
 80103de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103e0:	9805      	ldr	r0, [sp, #20]
 80103e2:	f7ff f8e7 	bl	800f5b4 <__multiply>
 80103e6:	900e      	str	r0, [sp, #56]	@ 0x38
 80103e8:	2800      	cmp	r0, #0
 80103ea:	f43f ae8a 	beq.w	8010102 <_strtod_l+0x442>
 80103ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103f0:	9805      	ldr	r0, [sp, #20]
 80103f2:	f7fe ffc9 	bl	800f388 <_Bfree>
 80103f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	dc1d      	bgt.n	801043a <_strtod_l+0x77a>
 80103fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010400:	2b00      	cmp	r3, #0
 8010402:	dd23      	ble.n	801044c <_strtod_l+0x78c>
 8010404:	4649      	mov	r1, r9
 8010406:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010408:	9805      	ldr	r0, [sp, #20]
 801040a:	f7ff f97d 	bl	800f708 <__pow5mult>
 801040e:	4681      	mov	r9, r0
 8010410:	b9e0      	cbnz	r0, 801044c <_strtod_l+0x78c>
 8010412:	f04f 0900 	mov.w	r9, #0
 8010416:	e674      	b.n	8010102 <_strtod_l+0x442>
 8010418:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801041c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801041e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010422:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010426:	35e2      	adds	r5, #226	@ 0xe2
 8010428:	fa01 f305 	lsl.w	r3, r1, r5
 801042c:	9310      	str	r3, [sp, #64]	@ 0x40
 801042e:	e7ba      	b.n	80103a6 <_strtod_l+0x6e6>
 8010430:	2300      	movs	r3, #0
 8010432:	9310      	str	r3, [sp, #64]	@ 0x40
 8010434:	2301      	movs	r3, #1
 8010436:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010438:	e7b5      	b.n	80103a6 <_strtod_l+0x6e6>
 801043a:	462a      	mov	r2, r5
 801043c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801043e:	9805      	ldr	r0, [sp, #20]
 8010440:	f7ff f9bc 	bl	800f7bc <__lshift>
 8010444:	901a      	str	r0, [sp, #104]	@ 0x68
 8010446:	2800      	cmp	r0, #0
 8010448:	d1d9      	bne.n	80103fe <_strtod_l+0x73e>
 801044a:	e65a      	b.n	8010102 <_strtod_l+0x442>
 801044c:	2e00      	cmp	r6, #0
 801044e:	dd07      	ble.n	8010460 <_strtod_l+0x7a0>
 8010450:	4649      	mov	r1, r9
 8010452:	4632      	mov	r2, r6
 8010454:	9805      	ldr	r0, [sp, #20]
 8010456:	f7ff f9b1 	bl	800f7bc <__lshift>
 801045a:	4681      	mov	r9, r0
 801045c:	2800      	cmp	r0, #0
 801045e:	d0d8      	beq.n	8010412 <_strtod_l+0x752>
 8010460:	2f00      	cmp	r7, #0
 8010462:	dd08      	ble.n	8010476 <_strtod_l+0x7b6>
 8010464:	4641      	mov	r1, r8
 8010466:	463a      	mov	r2, r7
 8010468:	9805      	ldr	r0, [sp, #20]
 801046a:	f7ff f9a7 	bl	800f7bc <__lshift>
 801046e:	4680      	mov	r8, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	f43f ae46 	beq.w	8010102 <_strtod_l+0x442>
 8010476:	464a      	mov	r2, r9
 8010478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801047a:	9805      	ldr	r0, [sp, #20]
 801047c:	f7ff fa26 	bl	800f8cc <__mdiff>
 8010480:	4604      	mov	r4, r0
 8010482:	2800      	cmp	r0, #0
 8010484:	f43f ae3d 	beq.w	8010102 <_strtod_l+0x442>
 8010488:	68c3      	ldr	r3, [r0, #12]
 801048a:	4641      	mov	r1, r8
 801048c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801048e:	2300      	movs	r3, #0
 8010490:	60c3      	str	r3, [r0, #12]
 8010492:	f7ff f9ff 	bl	800f894 <__mcmp>
 8010496:	2800      	cmp	r0, #0
 8010498:	da46      	bge.n	8010528 <_strtod_l+0x868>
 801049a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801049c:	ea53 030a 	orrs.w	r3, r3, sl
 80104a0:	d16c      	bne.n	801057c <_strtod_l+0x8bc>
 80104a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d168      	bne.n	801057c <_strtod_l+0x8bc>
 80104aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104ae:	0d1b      	lsrs	r3, r3, #20
 80104b0:	051b      	lsls	r3, r3, #20
 80104b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104b6:	d961      	bls.n	801057c <_strtod_l+0x8bc>
 80104b8:	6963      	ldr	r3, [r4, #20]
 80104ba:	b913      	cbnz	r3, 80104c2 <_strtod_l+0x802>
 80104bc:	6923      	ldr	r3, [r4, #16]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	dd5c      	ble.n	801057c <_strtod_l+0x8bc>
 80104c2:	4621      	mov	r1, r4
 80104c4:	2201      	movs	r2, #1
 80104c6:	9805      	ldr	r0, [sp, #20]
 80104c8:	f7ff f978 	bl	800f7bc <__lshift>
 80104cc:	4641      	mov	r1, r8
 80104ce:	4604      	mov	r4, r0
 80104d0:	f7ff f9e0 	bl	800f894 <__mcmp>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	dd51      	ble.n	801057c <_strtod_l+0x8bc>
 80104d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	0d1b      	lsrs	r3, r3, #20
 80104e0:	051b      	lsls	r3, r3, #20
 80104e2:	2a00      	cmp	r2, #0
 80104e4:	d06b      	beq.n	80105be <_strtod_l+0x8fe>
 80104e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80104ea:	d868      	bhi.n	80105be <_strtod_l+0x8fe>
 80104ec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80104f0:	f67f ae9d 	bls.w	801022e <_strtod_l+0x56e>
 80104f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010520 <_strtod_l+0x860>)
 80104f6:	4650      	mov	r0, sl
 80104f8:	4659      	mov	r1, fp
 80104fa:	2200      	movs	r2, #0
 80104fc:	f7f0 f890 	bl	8000620 <__aeabi_dmul>
 8010500:	4b08      	ldr	r3, [pc, #32]	@ (8010524 <_strtod_l+0x864>)
 8010502:	4682      	mov	sl, r0
 8010504:	468b      	mov	fp, r1
 8010506:	400b      	ands	r3, r1
 8010508:	2b00      	cmp	r3, #0
 801050a:	f47f ae05 	bne.w	8010118 <_strtod_l+0x458>
 801050e:	2322      	movs	r3, #34	@ 0x22
 8010510:	9a05      	ldr	r2, [sp, #20]
 8010512:	6013      	str	r3, [r2, #0]
 8010514:	e600      	b.n	8010118 <_strtod_l+0x458>
 8010516:	bf00      	nop
 8010518:	08014858 	.word	0x08014858
 801051c:	fffffc02 	.word	0xfffffc02
 8010520:	39500000 	.word	0x39500000
 8010524:	7ff00000 	.word	0x7ff00000
 8010528:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801052c:	d165      	bne.n	80105fa <_strtod_l+0x93a>
 801052e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010534:	b35a      	cbz	r2, 801058e <_strtod_l+0x8ce>
 8010536:	4a9e      	ldr	r2, [pc, #632]	@ (80107b0 <_strtod_l+0xaf0>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d12b      	bne.n	8010594 <_strtod_l+0x8d4>
 801053c:	9b08      	ldr	r3, [sp, #32]
 801053e:	4651      	mov	r1, sl
 8010540:	b303      	cbz	r3, 8010584 <_strtod_l+0x8c4>
 8010542:	465a      	mov	r2, fp
 8010544:	4b9b      	ldr	r3, [pc, #620]	@ (80107b4 <_strtod_l+0xaf4>)
 8010546:	4013      	ands	r3, r2
 8010548:	f04f 32ff 	mov.w	r2, #4294967295
 801054c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010550:	d81b      	bhi.n	801058a <_strtod_l+0x8ca>
 8010552:	0d1b      	lsrs	r3, r3, #20
 8010554:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010558:	fa02 f303 	lsl.w	r3, r2, r3
 801055c:	4299      	cmp	r1, r3
 801055e:	d119      	bne.n	8010594 <_strtod_l+0x8d4>
 8010560:	4b95      	ldr	r3, [pc, #596]	@ (80107b8 <_strtod_l+0xaf8>)
 8010562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010564:	429a      	cmp	r2, r3
 8010566:	d102      	bne.n	801056e <_strtod_l+0x8ae>
 8010568:	3101      	adds	r1, #1
 801056a:	f43f adca 	beq.w	8010102 <_strtod_l+0x442>
 801056e:	4b91      	ldr	r3, [pc, #580]	@ (80107b4 <_strtod_l+0xaf4>)
 8010570:	f04f 0a00 	mov.w	sl, #0
 8010574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010576:	401a      	ands	r2, r3
 8010578:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801057c:	9b08      	ldr	r3, [sp, #32]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1b8      	bne.n	80104f4 <_strtod_l+0x834>
 8010582:	e5c9      	b.n	8010118 <_strtod_l+0x458>
 8010584:	f04f 33ff 	mov.w	r3, #4294967295
 8010588:	e7e8      	b.n	801055c <_strtod_l+0x89c>
 801058a:	4613      	mov	r3, r2
 801058c:	e7e6      	b.n	801055c <_strtod_l+0x89c>
 801058e:	ea53 030a 	orrs.w	r3, r3, sl
 8010592:	d0a1      	beq.n	80104d8 <_strtod_l+0x818>
 8010594:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010596:	b1db      	cbz	r3, 80105d0 <_strtod_l+0x910>
 8010598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801059a:	4213      	tst	r3, r2
 801059c:	d0ee      	beq.n	801057c <_strtod_l+0x8bc>
 801059e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105a0:	4650      	mov	r0, sl
 80105a2:	9a08      	ldr	r2, [sp, #32]
 80105a4:	4659      	mov	r1, fp
 80105a6:	b1bb      	cbz	r3, 80105d8 <_strtod_l+0x918>
 80105a8:	f7ff fb6a 	bl	800fc80 <sulp>
 80105ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105b0:	ec53 2b10 	vmov	r2, r3, d0
 80105b4:	f7ef fe7e 	bl	80002b4 <__adddf3>
 80105b8:	4682      	mov	sl, r0
 80105ba:	468b      	mov	fp, r1
 80105bc:	e7de      	b.n	801057c <_strtod_l+0x8bc>
 80105be:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80105c2:	f04f 3aff 	mov.w	sl, #4294967295
 80105c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105ce:	e7d5      	b.n	801057c <_strtod_l+0x8bc>
 80105d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105d2:	ea13 0f0a 	tst.w	r3, sl
 80105d6:	e7e1      	b.n	801059c <_strtod_l+0x8dc>
 80105d8:	f7ff fb52 	bl	800fc80 <sulp>
 80105dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105e0:	ec53 2b10 	vmov	r2, r3, d0
 80105e4:	f7ef fe64 	bl	80002b0 <__aeabi_dsub>
 80105e8:	2200      	movs	r2, #0
 80105ea:	2300      	movs	r3, #0
 80105ec:	4682      	mov	sl, r0
 80105ee:	468b      	mov	fp, r1
 80105f0:	f7f0 fa7e 	bl	8000af0 <__aeabi_dcmpeq>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d0c1      	beq.n	801057c <_strtod_l+0x8bc>
 80105f8:	e619      	b.n	801022e <_strtod_l+0x56e>
 80105fa:	4641      	mov	r1, r8
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7ff fac9 	bl	800fb94 <__ratio>
 8010602:	2200      	movs	r2, #0
 8010604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010608:	ec57 6b10 	vmov	r6, r7, d0
 801060c:	4630      	mov	r0, r6
 801060e:	4639      	mov	r1, r7
 8010610:	f7f0 fa82 	bl	8000b18 <__aeabi_dcmple>
 8010614:	2800      	cmp	r0, #0
 8010616:	d06f      	beq.n	80106f8 <_strtod_l+0xa38>
 8010618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801061a:	2b00      	cmp	r3, #0
 801061c:	d17a      	bne.n	8010714 <_strtod_l+0xa54>
 801061e:	f1ba 0f00 	cmp.w	sl, #0
 8010622:	d158      	bne.n	80106d6 <_strtod_l+0xa16>
 8010624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801062a:	2b00      	cmp	r3, #0
 801062c:	d15a      	bne.n	80106e4 <_strtod_l+0xa24>
 801062e:	2200      	movs	r2, #0
 8010630:	4b62      	ldr	r3, [pc, #392]	@ (80107bc <_strtod_l+0xafc>)
 8010632:	4630      	mov	r0, r6
 8010634:	4639      	mov	r1, r7
 8010636:	f7f0 fa65 	bl	8000b04 <__aeabi_dcmplt>
 801063a:	2800      	cmp	r0, #0
 801063c:	d159      	bne.n	80106f2 <_strtod_l+0xa32>
 801063e:	4630      	mov	r0, r6
 8010640:	4639      	mov	r1, r7
 8010642:	2200      	movs	r2, #0
 8010644:	4b5e      	ldr	r3, [pc, #376]	@ (80107c0 <_strtod_l+0xb00>)
 8010646:	f7ef ffeb 	bl	8000620 <__aeabi_dmul>
 801064a:	4606      	mov	r6, r0
 801064c:	460f      	mov	r7, r1
 801064e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010652:	9606      	str	r6, [sp, #24]
 8010654:	9307      	str	r3, [sp, #28]
 8010656:	4d57      	ldr	r5, [pc, #348]	@ (80107b4 <_strtod_l+0xaf4>)
 8010658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801065c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010662:	401d      	ands	r5, r3
 8010664:	4b57      	ldr	r3, [pc, #348]	@ (80107c4 <_strtod_l+0xb04>)
 8010666:	429d      	cmp	r5, r3
 8010668:	f040 80b0 	bne.w	80107cc <_strtod_l+0xb0c>
 801066c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801066e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010672:	ec4b ab10 	vmov	d0, sl, fp
 8010676:	f7ff f9c1 	bl	800f9fc <__ulp>
 801067a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801067e:	ec51 0b10 	vmov	r0, r1, d0
 8010682:	f7ef ffcd 	bl	8000620 <__aeabi_dmul>
 8010686:	4652      	mov	r2, sl
 8010688:	465b      	mov	r3, fp
 801068a:	f7ef fe13 	bl	80002b4 <__adddf3>
 801068e:	460b      	mov	r3, r1
 8010690:	4948      	ldr	r1, [pc, #288]	@ (80107b4 <_strtod_l+0xaf4>)
 8010692:	4682      	mov	sl, r0
 8010694:	4a4c      	ldr	r2, [pc, #304]	@ (80107c8 <_strtod_l+0xb08>)
 8010696:	4019      	ands	r1, r3
 8010698:	4291      	cmp	r1, r2
 801069a:	d942      	bls.n	8010722 <_strtod_l+0xa62>
 801069c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801069e:	4b46      	ldr	r3, [pc, #280]	@ (80107b8 <_strtod_l+0xaf8>)
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d103      	bne.n	80106ac <_strtod_l+0x9ec>
 80106a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106a6:	3301      	adds	r3, #1
 80106a8:	f43f ad2b 	beq.w	8010102 <_strtod_l+0x442>
 80106ac:	f8df b108 	ldr.w	fp, [pc, #264]	@ 80107b8 <_strtod_l+0xaf8>
 80106b0:	f04f 3aff 	mov.w	sl, #4294967295
 80106b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106b6:	9805      	ldr	r0, [sp, #20]
 80106b8:	f7fe fe66 	bl	800f388 <_Bfree>
 80106bc:	4649      	mov	r1, r9
 80106be:	9805      	ldr	r0, [sp, #20]
 80106c0:	f7fe fe62 	bl	800f388 <_Bfree>
 80106c4:	4641      	mov	r1, r8
 80106c6:	9805      	ldr	r0, [sp, #20]
 80106c8:	f7fe fe5e 	bl	800f388 <_Bfree>
 80106cc:	4621      	mov	r1, r4
 80106ce:	9805      	ldr	r0, [sp, #20]
 80106d0:	f7fe fe5a 	bl	800f388 <_Bfree>
 80106d4:	e618      	b.n	8010308 <_strtod_l+0x648>
 80106d6:	f1ba 0f01 	cmp.w	sl, #1
 80106da:	d103      	bne.n	80106e4 <_strtod_l+0xa24>
 80106dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f43f ada5 	beq.w	801022e <_strtod_l+0x56e>
 80106e4:	2600      	movs	r6, #0
 80106e6:	4f35      	ldr	r7, [pc, #212]	@ (80107bc <_strtod_l+0xafc>)
 80106e8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8010790 <_strtod_l+0xad0>
 80106ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106f0:	e7b1      	b.n	8010656 <_strtod_l+0x996>
 80106f2:	2600      	movs	r6, #0
 80106f4:	4f32      	ldr	r7, [pc, #200]	@ (80107c0 <_strtod_l+0xb00>)
 80106f6:	e7aa      	b.n	801064e <_strtod_l+0x98e>
 80106f8:	4b31      	ldr	r3, [pc, #196]	@ (80107c0 <_strtod_l+0xb00>)
 80106fa:	4630      	mov	r0, r6
 80106fc:	4639      	mov	r1, r7
 80106fe:	2200      	movs	r2, #0
 8010700:	f7ef ff8e 	bl	8000620 <__aeabi_dmul>
 8010704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010706:	4606      	mov	r6, r0
 8010708:	460f      	mov	r7, r1
 801070a:	2b00      	cmp	r3, #0
 801070c:	d09f      	beq.n	801064e <_strtod_l+0x98e>
 801070e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010712:	e7a0      	b.n	8010656 <_strtod_l+0x996>
 8010714:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8010798 <_strtod_l+0xad8>
 8010718:	ec57 6b17 	vmov	r6, r7, d7
 801071c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010720:	e799      	b.n	8010656 <_strtod_l+0x996>
 8010722:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010726:	9b08      	ldr	r3, [sp, #32]
 8010728:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1c1      	bne.n	80106b4 <_strtod_l+0x9f4>
 8010730:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010734:	0d1b      	lsrs	r3, r3, #20
 8010736:	051b      	lsls	r3, r3, #20
 8010738:	429d      	cmp	r5, r3
 801073a:	d1bb      	bne.n	80106b4 <_strtod_l+0x9f4>
 801073c:	4630      	mov	r0, r6
 801073e:	4639      	mov	r1, r7
 8010740:	f7f0 face 	bl	8000ce0 <__aeabi_d2lz>
 8010744:	f7ef ff3e 	bl	80005c4 <__aeabi_l2d>
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	4630      	mov	r0, r6
 801074e:	4639      	mov	r1, r7
 8010750:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010754:	f7ef fdac 	bl	80002b0 <__aeabi_dsub>
 8010758:	460b      	mov	r3, r1
 801075a:	4602      	mov	r2, r0
 801075c:	ea46 060a 	orr.w	r6, r6, sl
 8010760:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010766:	431e      	orrs	r6, r3
 8010768:	d06d      	beq.n	8010846 <_strtod_l+0xb86>
 801076a:	a30d      	add	r3, pc, #52	@ (adr r3, 80107a0 <_strtod_l+0xae0>)
 801076c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010770:	f7f0 f9c8 	bl	8000b04 <__aeabi_dcmplt>
 8010774:	2800      	cmp	r0, #0
 8010776:	f47f accf 	bne.w	8010118 <_strtod_l+0x458>
 801077a:	a30b      	add	r3, pc, #44	@ (adr r3, 80107a8 <_strtod_l+0xae8>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010784:	f7f0 f9dc 	bl	8000b40 <__aeabi_dcmpgt>
 8010788:	2800      	cmp	r0, #0
 801078a:	d093      	beq.n	80106b4 <_strtod_l+0x9f4>
 801078c:	e4c4      	b.n	8010118 <_strtod_l+0x458>
 801078e:	bf00      	nop
 8010790:	00000000 	.word	0x00000000
 8010794:	bff00000 	.word	0xbff00000
 8010798:	00000000 	.word	0x00000000
 801079c:	3ff00000 	.word	0x3ff00000
 80107a0:	94a03595 	.word	0x94a03595
 80107a4:	3fdfffff 	.word	0x3fdfffff
 80107a8:	35afe535 	.word	0x35afe535
 80107ac:	3fe00000 	.word	0x3fe00000
 80107b0:	000fffff 	.word	0x000fffff
 80107b4:	7ff00000 	.word	0x7ff00000
 80107b8:	7fefffff 	.word	0x7fefffff
 80107bc:	3ff00000 	.word	0x3ff00000
 80107c0:	3fe00000 	.word	0x3fe00000
 80107c4:	7fe00000 	.word	0x7fe00000
 80107c8:	7c9fffff 	.word	0x7c9fffff
 80107cc:	9b08      	ldr	r3, [sp, #32]
 80107ce:	b323      	cbz	r3, 801081a <_strtod_l+0xb5a>
 80107d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80107d4:	d821      	bhi.n	801081a <_strtod_l+0xb5a>
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	a327      	add	r3, pc, #156	@ (adr r3, 8010878 <_strtod_l+0xbb8>)
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	f7f0 f99a 	bl	8000b18 <__aeabi_dcmple>
 80107e4:	b1a0      	cbz	r0, 8010810 <_strtod_l+0xb50>
 80107e6:	4639      	mov	r1, r7
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7f0 f9f1 	bl	8000bd0 <__aeabi_d2uiz>
 80107ee:	2801      	cmp	r0, #1
 80107f0:	bf38      	it	cc
 80107f2:	2001      	movcc	r0, #1
 80107f4:	f7ef fe9a 	bl	800052c <__aeabi_ui2d>
 80107f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107fa:	4606      	mov	r6, r0
 80107fc:	460f      	mov	r7, r1
 80107fe:	b9fb      	cbnz	r3, 8010840 <_strtod_l+0xb80>
 8010800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010804:	9014      	str	r0, [sp, #80]	@ 0x50
 8010806:	9315      	str	r3, [sp, #84]	@ 0x54
 8010808:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801080c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010812:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010816:	1b5b      	subs	r3, r3, r5
 8010818:	9311      	str	r3, [sp, #68]	@ 0x44
 801081a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801081e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010822:	f7ff f8eb 	bl	800f9fc <__ulp>
 8010826:	4650      	mov	r0, sl
 8010828:	4659      	mov	r1, fp
 801082a:	ec53 2b10 	vmov	r2, r3, d0
 801082e:	f7ef fef7 	bl	8000620 <__aeabi_dmul>
 8010832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010836:	f7ef fd3d 	bl	80002b4 <__adddf3>
 801083a:	4682      	mov	sl, r0
 801083c:	468b      	mov	fp, r1
 801083e:	e772      	b.n	8010726 <_strtod_l+0xa66>
 8010840:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010844:	e7e0      	b.n	8010808 <_strtod_l+0xb48>
 8010846:	a30e      	add	r3, pc, #56	@ (adr r3, 8010880 <_strtod_l+0xbc0>)
 8010848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084c:	f7f0 f95a 	bl	8000b04 <__aeabi_dcmplt>
 8010850:	e79a      	b.n	8010788 <_strtod_l+0xac8>
 8010852:	2300      	movs	r3, #0
 8010854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010858:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801085a:	6013      	str	r3, [r2, #0]
 801085c:	f7ff ba6d 	b.w	800fd3a <_strtod_l+0x7a>
 8010860:	2a65      	cmp	r2, #101	@ 0x65
 8010862:	f43f ab67 	beq.w	800ff34 <_strtod_l+0x274>
 8010866:	2a45      	cmp	r2, #69	@ 0x45
 8010868:	f43f ab64 	beq.w	800ff34 <_strtod_l+0x274>
 801086c:	2301      	movs	r3, #1
 801086e:	f7ff bba0 	b.w	800ffb2 <_strtod_l+0x2f2>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
 8010878:	ffc00000 	.word	0xffc00000
 801087c:	41dfffff 	.word	0x41dfffff
 8010880:	94a03595 	.word	0x94a03595
 8010884:	3fcfffff 	.word	0x3fcfffff

08010888 <_strtod_r>:
 8010888:	4b01      	ldr	r3, [pc, #4]	@ (8010890 <_strtod_r+0x8>)
 801088a:	f7ff ba19 	b.w	800fcc0 <_strtod_l>
 801088e:	bf00      	nop
 8010890:	20000084 	.word	0x20000084

08010894 <__ssputs_r>:
 8010894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010898:	461f      	mov	r7, r3
 801089a:	688e      	ldr	r6, [r1, #8]
 801089c:	4682      	mov	sl, r0
 801089e:	460c      	mov	r4, r1
 80108a0:	42be      	cmp	r6, r7
 80108a2:	4690      	mov	r8, r2
 80108a4:	680b      	ldr	r3, [r1, #0]
 80108a6:	d82d      	bhi.n	8010904 <__ssputs_r+0x70>
 80108a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80108b0:	d026      	beq.n	8010900 <__ssputs_r+0x6c>
 80108b2:	6965      	ldr	r5, [r4, #20]
 80108b4:	6909      	ldr	r1, [r1, #16]
 80108b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108ba:	eba3 0901 	sub.w	r9, r3, r1
 80108be:	1c7b      	adds	r3, r7, #1
 80108c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108c4:	444b      	add	r3, r9
 80108c6:	106d      	asrs	r5, r5, #1
 80108c8:	429d      	cmp	r5, r3
 80108ca:	bf38      	it	cc
 80108cc:	461d      	movcc	r5, r3
 80108ce:	0553      	lsls	r3, r2, #21
 80108d0:	d527      	bpl.n	8010922 <__ssputs_r+0x8e>
 80108d2:	4629      	mov	r1, r5
 80108d4:	f7fe fc8c 	bl	800f1f0 <_malloc_r>
 80108d8:	4606      	mov	r6, r0
 80108da:	b360      	cbz	r0, 8010936 <__ssputs_r+0xa2>
 80108dc:	464a      	mov	r2, r9
 80108de:	6921      	ldr	r1, [r4, #16]
 80108e0:	f7fd fdad 	bl	800e43e <memcpy>
 80108e4:	89a3      	ldrh	r3, [r4, #12]
 80108e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80108ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	6126      	str	r6, [r4, #16]
 80108f2:	444e      	add	r6, r9
 80108f4:	6165      	str	r5, [r4, #20]
 80108f6:	eba5 0509 	sub.w	r5, r5, r9
 80108fa:	6026      	str	r6, [r4, #0]
 80108fc:	463e      	mov	r6, r7
 80108fe:	60a5      	str	r5, [r4, #8]
 8010900:	42be      	cmp	r6, r7
 8010902:	d900      	bls.n	8010906 <__ssputs_r+0x72>
 8010904:	463e      	mov	r6, r7
 8010906:	4632      	mov	r2, r6
 8010908:	4641      	mov	r1, r8
 801090a:	6820      	ldr	r0, [r4, #0]
 801090c:	f000 f9c6 	bl	8010c9c <memmove>
 8010910:	68a3      	ldr	r3, [r4, #8]
 8010912:	2000      	movs	r0, #0
 8010914:	1b9b      	subs	r3, r3, r6
 8010916:	60a3      	str	r3, [r4, #8]
 8010918:	6823      	ldr	r3, [r4, #0]
 801091a:	4433      	add	r3, r6
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010922:	462a      	mov	r2, r5
 8010924:	f000 fd79 	bl	801141a <_realloc_r>
 8010928:	4606      	mov	r6, r0
 801092a:	2800      	cmp	r0, #0
 801092c:	d1e0      	bne.n	80108f0 <__ssputs_r+0x5c>
 801092e:	6921      	ldr	r1, [r4, #16]
 8010930:	4650      	mov	r0, sl
 8010932:	f7fe fbe9 	bl	800f108 <_free_r>
 8010936:	230c      	movs	r3, #12
 8010938:	f04f 30ff 	mov.w	r0, #4294967295
 801093c:	f8ca 3000 	str.w	r3, [sl]
 8010940:	89a3      	ldrh	r3, [r4, #12]
 8010942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010946:	81a3      	strh	r3, [r4, #12]
 8010948:	e7e9      	b.n	801091e <__ssputs_r+0x8a>
	...

0801094c <_svfiprintf_r>:
 801094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010950:	4698      	mov	r8, r3
 8010952:	898b      	ldrh	r3, [r1, #12]
 8010954:	b09d      	sub	sp, #116	@ 0x74
 8010956:	4607      	mov	r7, r0
 8010958:	061b      	lsls	r3, r3, #24
 801095a:	460d      	mov	r5, r1
 801095c:	4614      	mov	r4, r2
 801095e:	d510      	bpl.n	8010982 <_svfiprintf_r+0x36>
 8010960:	690b      	ldr	r3, [r1, #16]
 8010962:	b973      	cbnz	r3, 8010982 <_svfiprintf_r+0x36>
 8010964:	2140      	movs	r1, #64	@ 0x40
 8010966:	f7fe fc43 	bl	800f1f0 <_malloc_r>
 801096a:	6028      	str	r0, [r5, #0]
 801096c:	6128      	str	r0, [r5, #16]
 801096e:	b930      	cbnz	r0, 801097e <_svfiprintf_r+0x32>
 8010970:	230c      	movs	r3, #12
 8010972:	603b      	str	r3, [r7, #0]
 8010974:	f04f 30ff 	mov.w	r0, #4294967295
 8010978:	b01d      	add	sp, #116	@ 0x74
 801097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097e:	2340      	movs	r3, #64	@ 0x40
 8010980:	616b      	str	r3, [r5, #20]
 8010982:	2300      	movs	r3, #0
 8010984:	f8cd 800c 	str.w	r8, [sp, #12]
 8010988:	f04f 0901 	mov.w	r9, #1
 801098c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010b30 <_svfiprintf_r+0x1e4>
 8010990:	9309      	str	r3, [sp, #36]	@ 0x24
 8010992:	2320      	movs	r3, #32
 8010994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010998:	2330      	movs	r3, #48	@ 0x30
 801099a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801099e:	4623      	mov	r3, r4
 80109a0:	469a      	mov	sl, r3
 80109a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109a6:	b10a      	cbz	r2, 80109ac <_svfiprintf_r+0x60>
 80109a8:	2a25      	cmp	r2, #37	@ 0x25
 80109aa:	d1f9      	bne.n	80109a0 <_svfiprintf_r+0x54>
 80109ac:	ebba 0b04 	subs.w	fp, sl, r4
 80109b0:	d00b      	beq.n	80109ca <_svfiprintf_r+0x7e>
 80109b2:	465b      	mov	r3, fp
 80109b4:	4622      	mov	r2, r4
 80109b6:	4629      	mov	r1, r5
 80109b8:	4638      	mov	r0, r7
 80109ba:	f7ff ff6b 	bl	8010894 <__ssputs_r>
 80109be:	3001      	adds	r0, #1
 80109c0:	f000 80a7 	beq.w	8010b12 <_svfiprintf_r+0x1c6>
 80109c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109c6:	445a      	add	r2, fp
 80109c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80109ca:	f89a 3000 	ldrb.w	r3, [sl]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f000 809f 	beq.w	8010b12 <_svfiprintf_r+0x1c6>
 80109d4:	2300      	movs	r3, #0
 80109d6:	f04f 32ff 	mov.w	r2, #4294967295
 80109da:	f10a 0a01 	add.w	sl, sl, #1
 80109de:	9304      	str	r3, [sp, #16]
 80109e0:	9307      	str	r3, [sp, #28]
 80109e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80109e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ec:	4654      	mov	r4, sl
 80109ee:	2205      	movs	r2, #5
 80109f0:	484f      	ldr	r0, [pc, #316]	@ (8010b30 <_svfiprintf_r+0x1e4>)
 80109f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f6:	f7fd fd14 	bl	800e422 <memchr>
 80109fa:	9a04      	ldr	r2, [sp, #16]
 80109fc:	b9d8      	cbnz	r0, 8010a36 <_svfiprintf_r+0xea>
 80109fe:	06d0      	lsls	r0, r2, #27
 8010a00:	bf44      	itt	mi
 8010a02:	2320      	movmi	r3, #32
 8010a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a08:	0711      	lsls	r1, r2, #28
 8010a0a:	bf44      	itt	mi
 8010a0c:	232b      	movmi	r3, #43	@ 0x2b
 8010a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a12:	f89a 3000 	ldrb.w	r3, [sl]
 8010a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a18:	d015      	beq.n	8010a46 <_svfiprintf_r+0xfa>
 8010a1a:	9a07      	ldr	r2, [sp, #28]
 8010a1c:	4654      	mov	r4, sl
 8010a1e:	2000      	movs	r0, #0
 8010a20:	f04f 0c0a 	mov.w	ip, #10
 8010a24:	4621      	mov	r1, r4
 8010a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a2a:	3b30      	subs	r3, #48	@ 0x30
 8010a2c:	2b09      	cmp	r3, #9
 8010a2e:	d94b      	bls.n	8010ac8 <_svfiprintf_r+0x17c>
 8010a30:	b1b0      	cbz	r0, 8010a60 <_svfiprintf_r+0x114>
 8010a32:	9207      	str	r2, [sp, #28]
 8010a34:	e014      	b.n	8010a60 <_svfiprintf_r+0x114>
 8010a36:	eba0 0308 	sub.w	r3, r0, r8
 8010a3a:	46a2      	mov	sl, r4
 8010a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a40:	4313      	orrs	r3, r2
 8010a42:	9304      	str	r3, [sp, #16]
 8010a44:	e7d2      	b.n	80109ec <_svfiprintf_r+0xa0>
 8010a46:	9b03      	ldr	r3, [sp, #12]
 8010a48:	1d19      	adds	r1, r3, #4
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	9103      	str	r1, [sp, #12]
 8010a50:	bfbb      	ittet	lt
 8010a52:	425b      	neglt	r3, r3
 8010a54:	f042 0202 	orrlt.w	r2, r2, #2
 8010a58:	9307      	strge	r3, [sp, #28]
 8010a5a:	9307      	strlt	r3, [sp, #28]
 8010a5c:	bfb8      	it	lt
 8010a5e:	9204      	strlt	r2, [sp, #16]
 8010a60:	7823      	ldrb	r3, [r4, #0]
 8010a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a64:	d10a      	bne.n	8010a7c <_svfiprintf_r+0x130>
 8010a66:	7863      	ldrb	r3, [r4, #1]
 8010a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a6a:	d132      	bne.n	8010ad2 <_svfiprintf_r+0x186>
 8010a6c:	9b03      	ldr	r3, [sp, #12]
 8010a6e:	3402      	adds	r4, #2
 8010a70:	1d1a      	adds	r2, r3, #4
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a78:	9203      	str	r2, [sp, #12]
 8010a7a:	9305      	str	r3, [sp, #20]
 8010a7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b40 <_svfiprintf_r+0x1f4>
 8010a80:	2203      	movs	r2, #3
 8010a82:	7821      	ldrb	r1, [r4, #0]
 8010a84:	4650      	mov	r0, sl
 8010a86:	f7fd fccc 	bl	800e422 <memchr>
 8010a8a:	b138      	cbz	r0, 8010a9c <_svfiprintf_r+0x150>
 8010a8c:	eba0 000a 	sub.w	r0, r0, sl
 8010a90:	2240      	movs	r2, #64	@ 0x40
 8010a92:	9b04      	ldr	r3, [sp, #16]
 8010a94:	3401      	adds	r4, #1
 8010a96:	4082      	lsls	r2, r0
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	9304      	str	r3, [sp, #16]
 8010a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa0:	2206      	movs	r2, #6
 8010aa2:	4824      	ldr	r0, [pc, #144]	@ (8010b34 <_svfiprintf_r+0x1e8>)
 8010aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010aa8:	f7fd fcbb 	bl	800e422 <memchr>
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d036      	beq.n	8010b1e <_svfiprintf_r+0x1d2>
 8010ab0:	4b21      	ldr	r3, [pc, #132]	@ (8010b38 <_svfiprintf_r+0x1ec>)
 8010ab2:	bb1b      	cbnz	r3, 8010afc <_svfiprintf_r+0x1b0>
 8010ab4:	9b03      	ldr	r3, [sp, #12]
 8010ab6:	3307      	adds	r3, #7
 8010ab8:	f023 0307 	bic.w	r3, r3, #7
 8010abc:	3308      	adds	r3, #8
 8010abe:	9303      	str	r3, [sp, #12]
 8010ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac2:	4433      	add	r3, r6
 8010ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ac6:	e76a      	b.n	801099e <_svfiprintf_r+0x52>
 8010ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010acc:	460c      	mov	r4, r1
 8010ace:	2001      	movs	r0, #1
 8010ad0:	e7a8      	b.n	8010a24 <_svfiprintf_r+0xd8>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	3401      	adds	r4, #1
 8010ad6:	f04f 0c0a 	mov.w	ip, #10
 8010ada:	4619      	mov	r1, r3
 8010adc:	9305      	str	r3, [sp, #20]
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ae4:	3a30      	subs	r2, #48	@ 0x30
 8010ae6:	2a09      	cmp	r2, #9
 8010ae8:	d903      	bls.n	8010af2 <_svfiprintf_r+0x1a6>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0c6      	beq.n	8010a7c <_svfiprintf_r+0x130>
 8010aee:	9105      	str	r1, [sp, #20]
 8010af0:	e7c4      	b.n	8010a7c <_svfiprintf_r+0x130>
 8010af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010af6:	4604      	mov	r4, r0
 8010af8:	2301      	movs	r3, #1
 8010afa:	e7f0      	b.n	8010ade <_svfiprintf_r+0x192>
 8010afc:	ab03      	add	r3, sp, #12
 8010afe:	462a      	mov	r2, r5
 8010b00:	a904      	add	r1, sp, #16
 8010b02:	4638      	mov	r0, r7
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	4b0d      	ldr	r3, [pc, #52]	@ (8010b3c <_svfiprintf_r+0x1f0>)
 8010b08:	f7fc fd18 	bl	800d53c <_printf_float>
 8010b0c:	1c42      	adds	r2, r0, #1
 8010b0e:	4606      	mov	r6, r0
 8010b10:	d1d6      	bne.n	8010ac0 <_svfiprintf_r+0x174>
 8010b12:	89ab      	ldrh	r3, [r5, #12]
 8010b14:	065b      	lsls	r3, r3, #25
 8010b16:	f53f af2d 	bmi.w	8010974 <_svfiprintf_r+0x28>
 8010b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b1c:	e72c      	b.n	8010978 <_svfiprintf_r+0x2c>
 8010b1e:	ab03      	add	r3, sp, #12
 8010b20:	462a      	mov	r2, r5
 8010b22:	a904      	add	r1, sp, #16
 8010b24:	4638      	mov	r0, r7
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	4b04      	ldr	r3, [pc, #16]	@ (8010b3c <_svfiprintf_r+0x1f0>)
 8010b2a:	f7fc ffa3 	bl	800da74 <_printf_i>
 8010b2e:	e7ed      	b.n	8010b0c <_svfiprintf_r+0x1c0>
 8010b30:	08014880 	.word	0x08014880
 8010b34:	0801488a 	.word	0x0801488a
 8010b38:	0800d53d 	.word	0x0800d53d
 8010b3c:	08010895 	.word	0x08010895
 8010b40:	08014886 	.word	0x08014886

08010b44 <__sflush_r>:
 8010b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4c:	0716      	lsls	r6, r2, #28
 8010b4e:	4605      	mov	r5, r0
 8010b50:	460c      	mov	r4, r1
 8010b52:	d454      	bmi.n	8010bfe <__sflush_r+0xba>
 8010b54:	684b      	ldr	r3, [r1, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	dc02      	bgt.n	8010b60 <__sflush_r+0x1c>
 8010b5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	dd48      	ble.n	8010bf2 <__sflush_r+0xae>
 8010b60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b62:	2e00      	cmp	r6, #0
 8010b64:	d045      	beq.n	8010bf2 <__sflush_r+0xae>
 8010b66:	2300      	movs	r3, #0
 8010b68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b6c:	682f      	ldr	r7, [r5, #0]
 8010b6e:	6a21      	ldr	r1, [r4, #32]
 8010b70:	602b      	str	r3, [r5, #0]
 8010b72:	d030      	beq.n	8010bd6 <__sflush_r+0x92>
 8010b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	0759      	lsls	r1, r3, #29
 8010b7a:	d505      	bpl.n	8010b88 <__sflush_r+0x44>
 8010b7c:	6863      	ldr	r3, [r4, #4]
 8010b7e:	1ad2      	subs	r2, r2, r3
 8010b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b82:	b10b      	cbz	r3, 8010b88 <__sflush_r+0x44>
 8010b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b86:	1ad2      	subs	r2, r2, r3
 8010b88:	2300      	movs	r3, #0
 8010b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b8c:	6a21      	ldr	r1, [r4, #32]
 8010b8e:	4628      	mov	r0, r5
 8010b90:	47b0      	blx	r6
 8010b92:	1c43      	adds	r3, r0, #1
 8010b94:	89a3      	ldrh	r3, [r4, #12]
 8010b96:	d106      	bne.n	8010ba6 <__sflush_r+0x62>
 8010b98:	6829      	ldr	r1, [r5, #0]
 8010b9a:	291d      	cmp	r1, #29
 8010b9c:	d82b      	bhi.n	8010bf6 <__sflush_r+0xb2>
 8010b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8010c48 <__sflush_r+0x104>)
 8010ba0:	410a      	asrs	r2, r1
 8010ba2:	07d6      	lsls	r6, r2, #31
 8010ba4:	d427      	bmi.n	8010bf6 <__sflush_r+0xb2>
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	04d9      	lsls	r1, r3, #19
 8010baa:	6062      	str	r2, [r4, #4]
 8010bac:	6922      	ldr	r2, [r4, #16]
 8010bae:	6022      	str	r2, [r4, #0]
 8010bb0:	d504      	bpl.n	8010bbc <__sflush_r+0x78>
 8010bb2:	1c42      	adds	r2, r0, #1
 8010bb4:	d101      	bne.n	8010bba <__sflush_r+0x76>
 8010bb6:	682b      	ldr	r3, [r5, #0]
 8010bb8:	b903      	cbnz	r3, 8010bbc <__sflush_r+0x78>
 8010bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bbe:	602f      	str	r7, [r5, #0]
 8010bc0:	b1b9      	cbz	r1, 8010bf2 <__sflush_r+0xae>
 8010bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bc6:	4299      	cmp	r1, r3
 8010bc8:	d002      	beq.n	8010bd0 <__sflush_r+0x8c>
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f7fe fa9c 	bl	800f108 <_free_r>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bd4:	e00d      	b.n	8010bf2 <__sflush_r+0xae>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	4628      	mov	r0, r5
 8010bda:	47b0      	blx	r6
 8010bdc:	4602      	mov	r2, r0
 8010bde:	1c50      	adds	r0, r2, #1
 8010be0:	d1c9      	bne.n	8010b76 <__sflush_r+0x32>
 8010be2:	682b      	ldr	r3, [r5, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d0c6      	beq.n	8010b76 <__sflush_r+0x32>
 8010be8:	2b1d      	cmp	r3, #29
 8010bea:	d001      	beq.n	8010bf0 <__sflush_r+0xac>
 8010bec:	2b16      	cmp	r3, #22
 8010bee:	d11d      	bne.n	8010c2c <__sflush_r+0xe8>
 8010bf0:	602f      	str	r7, [r5, #0]
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e021      	b.n	8010c3a <__sflush_r+0xf6>
 8010bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bfa:	b21b      	sxth	r3, r3
 8010bfc:	e01a      	b.n	8010c34 <__sflush_r+0xf0>
 8010bfe:	690f      	ldr	r7, [r1, #16]
 8010c00:	2f00      	cmp	r7, #0
 8010c02:	d0f6      	beq.n	8010bf2 <__sflush_r+0xae>
 8010c04:	0793      	lsls	r3, r2, #30
 8010c06:	680e      	ldr	r6, [r1, #0]
 8010c08:	600f      	str	r7, [r1, #0]
 8010c0a:	bf0c      	ite	eq
 8010c0c:	694b      	ldreq	r3, [r1, #20]
 8010c0e:	2300      	movne	r3, #0
 8010c10:	eba6 0807 	sub.w	r8, r6, r7
 8010c14:	608b      	str	r3, [r1, #8]
 8010c16:	f1b8 0f00 	cmp.w	r8, #0
 8010c1a:	ddea      	ble.n	8010bf2 <__sflush_r+0xae>
 8010c1c:	4643      	mov	r3, r8
 8010c1e:	463a      	mov	r2, r7
 8010c20:	6a21      	ldr	r1, [r4, #32]
 8010c22:	4628      	mov	r0, r5
 8010c24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c26:	47b0      	blx	r6
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	dc08      	bgt.n	8010c3e <__sflush_r+0xfa>
 8010c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c34:	f04f 30ff 	mov.w	r0, #4294967295
 8010c38:	81a3      	strh	r3, [r4, #12]
 8010c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3e:	4407      	add	r7, r0
 8010c40:	eba8 0800 	sub.w	r8, r8, r0
 8010c44:	e7e7      	b.n	8010c16 <__sflush_r+0xd2>
 8010c46:	bf00      	nop
 8010c48:	dfbffffe 	.word	0xdfbffffe

08010c4c <_fflush_r>:
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	690b      	ldr	r3, [r1, #16]
 8010c50:	4605      	mov	r5, r0
 8010c52:	460c      	mov	r4, r1
 8010c54:	b913      	cbnz	r3, 8010c5c <_fflush_r+0x10>
 8010c56:	2500      	movs	r5, #0
 8010c58:	4628      	mov	r0, r5
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	b118      	cbz	r0, 8010c66 <_fflush_r+0x1a>
 8010c5e:	6a03      	ldr	r3, [r0, #32]
 8010c60:	b90b      	cbnz	r3, 8010c66 <_fflush_r+0x1a>
 8010c62:	f7fd fac5 	bl	800e1f0 <__sinit>
 8010c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d0f3      	beq.n	8010c56 <_fflush_r+0xa>
 8010c6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c70:	07d0      	lsls	r0, r2, #31
 8010c72:	d404      	bmi.n	8010c7e <_fflush_r+0x32>
 8010c74:	0599      	lsls	r1, r3, #22
 8010c76:	d402      	bmi.n	8010c7e <_fflush_r+0x32>
 8010c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c7a:	f7fd fbd0 	bl	800e41e <__retarget_lock_acquire_recursive>
 8010c7e:	4628      	mov	r0, r5
 8010c80:	4621      	mov	r1, r4
 8010c82:	f7ff ff5f 	bl	8010b44 <__sflush_r>
 8010c86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c88:	4605      	mov	r5, r0
 8010c8a:	07da      	lsls	r2, r3, #31
 8010c8c:	d4e4      	bmi.n	8010c58 <_fflush_r+0xc>
 8010c8e:	89a3      	ldrh	r3, [r4, #12]
 8010c90:	059b      	lsls	r3, r3, #22
 8010c92:	d4e1      	bmi.n	8010c58 <_fflush_r+0xc>
 8010c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c96:	f7fd fbc3 	bl	800e420 <__retarget_lock_release_recursive>
 8010c9a:	e7dd      	b.n	8010c58 <_fflush_r+0xc>

08010c9c <memmove>:
 8010c9c:	4288      	cmp	r0, r1
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	eb01 0402 	add.w	r4, r1, r2
 8010ca4:	d902      	bls.n	8010cac <memmove+0x10>
 8010ca6:	4284      	cmp	r4, r0
 8010ca8:	4623      	mov	r3, r4
 8010caa:	d807      	bhi.n	8010cbc <memmove+0x20>
 8010cac:	1e43      	subs	r3, r0, #1
 8010cae:	42a1      	cmp	r1, r4
 8010cb0:	d008      	beq.n	8010cc4 <memmove+0x28>
 8010cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cba:	e7f8      	b.n	8010cae <memmove+0x12>
 8010cbc:	4402      	add	r2, r0
 8010cbe:	4601      	mov	r1, r0
 8010cc0:	428a      	cmp	r2, r1
 8010cc2:	d100      	bne.n	8010cc6 <memmove+0x2a>
 8010cc4:	bd10      	pop	{r4, pc}
 8010cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cce:	e7f7      	b.n	8010cc0 <memmove+0x24>

08010cd0 <strncmp>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	b16a      	cbz	r2, 8010cf0 <strncmp+0x20>
 8010cd4:	3901      	subs	r1, #1
 8010cd6:	1884      	adds	r4, r0, r2
 8010cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d103      	bne.n	8010cec <strncmp+0x1c>
 8010ce4:	42a0      	cmp	r0, r4
 8010ce6:	d001      	beq.n	8010cec <strncmp+0x1c>
 8010ce8:	2a00      	cmp	r2, #0
 8010cea:	d1f5      	bne.n	8010cd8 <strncmp+0x8>
 8010cec:	1ad0      	subs	r0, r2, r3
 8010cee:	bd10      	pop	{r4, pc}
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	e7fc      	b.n	8010cee <strncmp+0x1e>

08010cf4 <_sbrk_r>:
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	4d05      	ldr	r5, [pc, #20]	@ (8010d10 <_sbrk_r+0x1c>)
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	4608      	mov	r0, r1
 8010cfe:	602b      	str	r3, [r5, #0]
 8010d00:	f7f4 f952 	bl	8004fa8 <_sbrk>
 8010d04:	1c43      	adds	r3, r0, #1
 8010d06:	d102      	bne.n	8010d0e <_sbrk_r+0x1a>
 8010d08:	682b      	ldr	r3, [r5, #0]
 8010d0a:	b103      	cbz	r3, 8010d0e <_sbrk_r+0x1a>
 8010d0c:	6023      	str	r3, [r4, #0]
 8010d0e:	bd38      	pop	{r3, r4, r5, pc}
 8010d10:	2003b3b4 	.word	0x2003b3b4
 8010d14:	00000000 	.word	0x00000000

08010d18 <nan>:
 8010d18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d20 <nan+0x8>
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	00000000 	.word	0x00000000
 8010d24:	7ff80000 	.word	0x7ff80000

08010d28 <__assert_func>:
 8010d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d2a:	4614      	mov	r4, r2
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	4b09      	ldr	r3, [pc, #36]	@ (8010d54 <__assert_func+0x2c>)
 8010d30:	4605      	mov	r5, r0
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	68d8      	ldr	r0, [r3, #12]
 8010d36:	b954      	cbnz	r4, 8010d4e <__assert_func+0x26>
 8010d38:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <__assert_func+0x30>)
 8010d3a:	461c      	mov	r4, r3
 8010d3c:	9100      	str	r1, [sp, #0]
 8010d3e:	4907      	ldr	r1, [pc, #28]	@ (8010d5c <__assert_func+0x34>)
 8010d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d44:	462b      	mov	r3, r5
 8010d46:	f000 fba3 	bl	8011490 <fiprintf>
 8010d4a:	f000 fbb3 	bl	80114b4 <abort>
 8010d4e:	4b04      	ldr	r3, [pc, #16]	@ (8010d60 <__assert_func+0x38>)
 8010d50:	e7f4      	b.n	8010d3c <__assert_func+0x14>
 8010d52:	bf00      	nop
 8010d54:	20000034 	.word	0x20000034
 8010d58:	080148d4 	.word	0x080148d4
 8010d5c:	080148a6 	.word	0x080148a6
 8010d60:	08014899 	.word	0x08014899

08010d64 <_calloc_r>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	fba1 5402 	umull	r5, r4, r1, r2
 8010d6a:	b93c      	cbnz	r4, 8010d7c <_calloc_r+0x18>
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7fe fa3f 	bl	800f1f0 <_malloc_r>
 8010d72:	4606      	mov	r6, r0
 8010d74:	b928      	cbnz	r0, 8010d82 <_calloc_r+0x1e>
 8010d76:	2600      	movs	r6, #0
 8010d78:	4630      	mov	r0, r6
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	220c      	movs	r2, #12
 8010d7e:	6002      	str	r2, [r0, #0]
 8010d80:	e7f9      	b.n	8010d76 <_calloc_r+0x12>
 8010d82:	462a      	mov	r2, r5
 8010d84:	4621      	mov	r1, r4
 8010d86:	f7fd facc 	bl	800e322 <memset>
 8010d8a:	e7f5      	b.n	8010d78 <_calloc_r+0x14>

08010d8c <rshift>:
 8010d8c:	6903      	ldr	r3, [r0, #16]
 8010d8e:	114a      	asrs	r2, r1, #5
 8010d90:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d98:	f100 0414 	add.w	r4, r0, #20
 8010d9c:	dd45      	ble.n	8010e2a <rshift+0x9e>
 8010d9e:	f011 011f 	ands.w	r1, r1, #31
 8010da2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010da6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010daa:	d10c      	bne.n	8010dc6 <rshift+0x3a>
 8010dac:	f100 0710 	add.w	r7, r0, #16
 8010db0:	4629      	mov	r1, r5
 8010db2:	42b1      	cmp	r1, r6
 8010db4:	d334      	bcc.n	8010e20 <rshift+0x94>
 8010db6:	1a9b      	subs	r3, r3, r2
 8010db8:	1eea      	subs	r2, r5, #3
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	4296      	cmp	r6, r2
 8010dbe:	bf38      	it	cc
 8010dc0:	2300      	movcc	r3, #0
 8010dc2:	4423      	add	r3, r4
 8010dc4:	e015      	b.n	8010df2 <rshift+0x66>
 8010dc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010dca:	f1c1 0820 	rsb	r8, r1, #32
 8010dce:	f105 0e04 	add.w	lr, r5, #4
 8010dd2:	46a1      	mov	r9, r4
 8010dd4:	40cf      	lsrs	r7, r1
 8010dd6:	4576      	cmp	r6, lr
 8010dd8:	46f4      	mov	ip, lr
 8010dda:	d815      	bhi.n	8010e08 <rshift+0x7c>
 8010ddc:	1a9a      	subs	r2, r3, r2
 8010dde:	3501      	adds	r5, #1
 8010de0:	0092      	lsls	r2, r2, #2
 8010de2:	3a04      	subs	r2, #4
 8010de4:	42ae      	cmp	r6, r5
 8010de6:	bf38      	it	cc
 8010de8:	2200      	movcc	r2, #0
 8010dea:	18a3      	adds	r3, r4, r2
 8010dec:	50a7      	str	r7, [r4, r2]
 8010dee:	b107      	cbz	r7, 8010df2 <rshift+0x66>
 8010df0:	3304      	adds	r3, #4
 8010df2:	1b1a      	subs	r2, r3, r4
 8010df4:	42a3      	cmp	r3, r4
 8010df6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010dfa:	bf08      	it	eq
 8010dfc:	2300      	moveq	r3, #0
 8010dfe:	6102      	str	r2, [r0, #16]
 8010e00:	bf08      	it	eq
 8010e02:	6143      	streq	r3, [r0, #20]
 8010e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e08:	f8dc c000 	ldr.w	ip, [ip]
 8010e0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e10:	ea4c 0707 	orr.w	r7, ip, r7
 8010e14:	f849 7b04 	str.w	r7, [r9], #4
 8010e18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e1c:	40cf      	lsrs	r7, r1
 8010e1e:	e7da      	b.n	8010dd6 <rshift+0x4a>
 8010e20:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e24:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e28:	e7c3      	b.n	8010db2 <rshift+0x26>
 8010e2a:	4623      	mov	r3, r4
 8010e2c:	e7e1      	b.n	8010df2 <rshift+0x66>

08010e2e <__hexdig_fun>:
 8010e2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e32:	2b09      	cmp	r3, #9
 8010e34:	d802      	bhi.n	8010e3c <__hexdig_fun+0xe>
 8010e36:	3820      	subs	r0, #32
 8010e38:	b2c0      	uxtb	r0, r0
 8010e3a:	4770      	bx	lr
 8010e3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010e40:	2b05      	cmp	r3, #5
 8010e42:	d801      	bhi.n	8010e48 <__hexdig_fun+0x1a>
 8010e44:	3847      	subs	r0, #71	@ 0x47
 8010e46:	e7f7      	b.n	8010e38 <__hexdig_fun+0xa>
 8010e48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010e4c:	2b05      	cmp	r3, #5
 8010e4e:	d801      	bhi.n	8010e54 <__hexdig_fun+0x26>
 8010e50:	3827      	subs	r0, #39	@ 0x27
 8010e52:	e7f1      	b.n	8010e38 <__hexdig_fun+0xa>
 8010e54:	2000      	movs	r0, #0
 8010e56:	4770      	bx	lr

08010e58 <__gethex>:
 8010e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	468a      	mov	sl, r1
 8010e60:	4690      	mov	r8, r2
 8010e62:	9302      	str	r3, [sp, #8]
 8010e64:	680b      	ldr	r3, [r1, #0]
 8010e66:	9001      	str	r0, [sp, #4]
 8010e68:	1c9c      	adds	r4, r3, #2
 8010e6a:	46a1      	mov	r9, r4
 8010e6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010e70:	2830      	cmp	r0, #48	@ 0x30
 8010e72:	d0fa      	beq.n	8010e6a <__gethex+0x12>
 8010e74:	eba9 0303 	sub.w	r3, r9, r3
 8010e78:	f1a3 0b02 	sub.w	fp, r3, #2
 8010e7c:	f7ff ffd7 	bl	8010e2e <__hexdig_fun>
 8010e80:	4605      	mov	r5, r0
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d166      	bne.n	8010f54 <__gethex+0xfc>
 8010e86:	2201      	movs	r2, #1
 8010e88:	499e      	ldr	r1, [pc, #632]	@ (8011104 <__gethex+0x2ac>)
 8010e8a:	4648      	mov	r0, r9
 8010e8c:	f7ff ff20 	bl	8010cd0 <strncmp>
 8010e90:	4607      	mov	r7, r0
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d165      	bne.n	8010f62 <__gethex+0x10a>
 8010e96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010e9a:	4626      	mov	r6, r4
 8010e9c:	f7ff ffc7 	bl	8010e2e <__hexdig_fun>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d060      	beq.n	8010f66 <__gethex+0x10e>
 8010ea4:	4623      	mov	r3, r4
 8010ea6:	7818      	ldrb	r0, [r3, #0]
 8010ea8:	4699      	mov	r9, r3
 8010eaa:	3301      	adds	r3, #1
 8010eac:	2830      	cmp	r0, #48	@ 0x30
 8010eae:	d0fa      	beq.n	8010ea6 <__gethex+0x4e>
 8010eb0:	f7ff ffbd 	bl	8010e2e <__hexdig_fun>
 8010eb4:	fab0 f580 	clz	r5, r0
 8010eb8:	f04f 0b01 	mov.w	fp, #1
 8010ebc:	096d      	lsrs	r5, r5, #5
 8010ebe:	464a      	mov	r2, r9
 8010ec0:	4616      	mov	r6, r2
 8010ec2:	3201      	adds	r2, #1
 8010ec4:	7830      	ldrb	r0, [r6, #0]
 8010ec6:	f7ff ffb2 	bl	8010e2e <__hexdig_fun>
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d1f8      	bne.n	8010ec0 <__gethex+0x68>
 8010ece:	2201      	movs	r2, #1
 8010ed0:	498c      	ldr	r1, [pc, #560]	@ (8011104 <__gethex+0x2ac>)
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f7ff fefc 	bl	8010cd0 <strncmp>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d13e      	bne.n	8010f5a <__gethex+0x102>
 8010edc:	b944      	cbnz	r4, 8010ef0 <__gethex+0x98>
 8010ede:	1c74      	adds	r4, r6, #1
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	4616      	mov	r6, r2
 8010ee4:	3201      	adds	r2, #1
 8010ee6:	7830      	ldrb	r0, [r6, #0]
 8010ee8:	f7ff ffa1 	bl	8010e2e <__hexdig_fun>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d1f8      	bne.n	8010ee2 <__gethex+0x8a>
 8010ef0:	1ba4      	subs	r4, r4, r6
 8010ef2:	00a7      	lsls	r7, r4, #2
 8010ef4:	7833      	ldrb	r3, [r6, #0]
 8010ef6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010efa:	2b50      	cmp	r3, #80	@ 0x50
 8010efc:	d13d      	bne.n	8010f7a <__gethex+0x122>
 8010efe:	7873      	ldrb	r3, [r6, #1]
 8010f00:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f02:	d032      	beq.n	8010f6a <__gethex+0x112>
 8010f04:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f06:	d033      	beq.n	8010f70 <__gethex+0x118>
 8010f08:	1c71      	adds	r1, r6, #1
 8010f0a:	2400      	movs	r4, #0
 8010f0c:	7808      	ldrb	r0, [r1, #0]
 8010f0e:	f7ff ff8e 	bl	8010e2e <__hexdig_fun>
 8010f12:	1e43      	subs	r3, r0, #1
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	2b18      	cmp	r3, #24
 8010f18:	d82f      	bhi.n	8010f7a <__gethex+0x122>
 8010f1a:	f1a0 0210 	sub.w	r2, r0, #16
 8010f1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f22:	f7ff ff84 	bl	8010e2e <__hexdig_fun>
 8010f26:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f2a:	230a      	movs	r3, #10
 8010f2c:	fa5f fc8c 	uxtb.w	ip, ip
 8010f30:	f1bc 0f18 	cmp.w	ip, #24
 8010f34:	d91e      	bls.n	8010f74 <__gethex+0x11c>
 8010f36:	b104      	cbz	r4, 8010f3a <__gethex+0xe2>
 8010f38:	4252      	negs	r2, r2
 8010f3a:	4417      	add	r7, r2
 8010f3c:	f8ca 1000 	str.w	r1, [sl]
 8010f40:	b1ed      	cbz	r5, 8010f7e <__gethex+0x126>
 8010f42:	f1bb 0f00 	cmp.w	fp, #0
 8010f46:	bf0c      	ite	eq
 8010f48:	2506      	moveq	r5, #6
 8010f4a:	2500      	movne	r5, #0
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	b005      	add	sp, #20
 8010f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f54:	2500      	movs	r5, #0
 8010f56:	462c      	mov	r4, r5
 8010f58:	e7b1      	b.n	8010ebe <__gethex+0x66>
 8010f5a:	2c00      	cmp	r4, #0
 8010f5c:	d1c8      	bne.n	8010ef0 <__gethex+0x98>
 8010f5e:	4627      	mov	r7, r4
 8010f60:	e7c8      	b.n	8010ef4 <__gethex+0x9c>
 8010f62:	464e      	mov	r6, r9
 8010f64:	462f      	mov	r7, r5
 8010f66:	2501      	movs	r5, #1
 8010f68:	e7c4      	b.n	8010ef4 <__gethex+0x9c>
 8010f6a:	2400      	movs	r4, #0
 8010f6c:	1cb1      	adds	r1, r6, #2
 8010f6e:	e7cd      	b.n	8010f0c <__gethex+0xb4>
 8010f70:	2401      	movs	r4, #1
 8010f72:	e7fb      	b.n	8010f6c <__gethex+0x114>
 8010f74:	fb03 0002 	mla	r0, r3, r2, r0
 8010f78:	e7cf      	b.n	8010f1a <__gethex+0xc2>
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	e7de      	b.n	8010f3c <__gethex+0xe4>
 8010f7e:	eba6 0309 	sub.w	r3, r6, r9
 8010f82:	4629      	mov	r1, r5
 8010f84:	3b01      	subs	r3, #1
 8010f86:	2b07      	cmp	r3, #7
 8010f88:	dc0a      	bgt.n	8010fa0 <__gethex+0x148>
 8010f8a:	9801      	ldr	r0, [sp, #4]
 8010f8c:	f7fe f9bc 	bl	800f308 <_Balloc>
 8010f90:	4604      	mov	r4, r0
 8010f92:	b940      	cbnz	r0, 8010fa6 <__gethex+0x14e>
 8010f94:	4b5c      	ldr	r3, [pc, #368]	@ (8011108 <__gethex+0x2b0>)
 8010f96:	4602      	mov	r2, r0
 8010f98:	21e4      	movs	r1, #228	@ 0xe4
 8010f9a:	485c      	ldr	r0, [pc, #368]	@ (801110c <__gethex+0x2b4>)
 8010f9c:	f7ff fec4 	bl	8010d28 <__assert_func>
 8010fa0:	3101      	adds	r1, #1
 8010fa2:	105b      	asrs	r3, r3, #1
 8010fa4:	e7ef      	b.n	8010f86 <__gethex+0x12e>
 8010fa6:	f100 0a14 	add.w	sl, r0, #20
 8010faa:	2300      	movs	r3, #0
 8010fac:	4655      	mov	r5, sl
 8010fae:	469b      	mov	fp, r3
 8010fb0:	45b1      	cmp	r9, r6
 8010fb2:	d337      	bcc.n	8011024 <__gethex+0x1cc>
 8010fb4:	f845 bb04 	str.w	fp, [r5], #4
 8010fb8:	eba5 050a 	sub.w	r5, r5, sl
 8010fbc:	4658      	mov	r0, fp
 8010fbe:	10ad      	asrs	r5, r5, #2
 8010fc0:	6125      	str	r5, [r4, #16]
 8010fc2:	016d      	lsls	r5, r5, #5
 8010fc4:	f7fe fa94 	bl	800f4f0 <__hi0bits>
 8010fc8:	f8d8 6000 	ldr.w	r6, [r8]
 8010fcc:	1a2d      	subs	r5, r5, r0
 8010fce:	42b5      	cmp	r5, r6
 8010fd0:	dd54      	ble.n	801107c <__gethex+0x224>
 8010fd2:	1bad      	subs	r5, r5, r6
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	f7fe fe31 	bl	800fc3e <__any_on>
 8010fdc:	4681      	mov	r9, r0
 8010fde:	b178      	cbz	r0, 8011000 <__gethex+0x1a8>
 8010fe0:	1e6b      	subs	r3, r5, #1
 8010fe2:	f04f 0901 	mov.w	r9, #1
 8010fe6:	1159      	asrs	r1, r3, #5
 8010fe8:	f003 021f 	and.w	r2, r3, #31
 8010fec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010ff0:	fa09 f202 	lsl.w	r2, r9, r2
 8010ff4:	420a      	tst	r2, r1
 8010ff6:	d003      	beq.n	8011000 <__gethex+0x1a8>
 8010ff8:	454b      	cmp	r3, r9
 8010ffa:	dc36      	bgt.n	801106a <__gethex+0x212>
 8010ffc:	f04f 0902 	mov.w	r9, #2
 8011000:	442f      	add	r7, r5
 8011002:	4629      	mov	r1, r5
 8011004:	4620      	mov	r0, r4
 8011006:	f7ff fec1 	bl	8010d8c <rshift>
 801100a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801100e:	42bb      	cmp	r3, r7
 8011010:	da42      	bge.n	8011098 <__gethex+0x240>
 8011012:	4621      	mov	r1, r4
 8011014:	9801      	ldr	r0, [sp, #4]
 8011016:	f7fe f9b7 	bl	800f388 <_Bfree>
 801101a:	2300      	movs	r3, #0
 801101c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801101e:	25a3      	movs	r5, #163	@ 0xa3
 8011020:	6013      	str	r3, [r2, #0]
 8011022:	e793      	b.n	8010f4c <__gethex+0xf4>
 8011024:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011028:	2a2e      	cmp	r2, #46	@ 0x2e
 801102a:	d012      	beq.n	8011052 <__gethex+0x1fa>
 801102c:	2b20      	cmp	r3, #32
 801102e:	d104      	bne.n	801103a <__gethex+0x1e2>
 8011030:	f845 bb04 	str.w	fp, [r5], #4
 8011034:	f04f 0b00 	mov.w	fp, #0
 8011038:	465b      	mov	r3, fp
 801103a:	7830      	ldrb	r0, [r6, #0]
 801103c:	9303      	str	r3, [sp, #12]
 801103e:	f7ff fef6 	bl	8010e2e <__hexdig_fun>
 8011042:	9b03      	ldr	r3, [sp, #12]
 8011044:	f000 000f 	and.w	r0, r0, #15
 8011048:	4098      	lsls	r0, r3
 801104a:	3304      	adds	r3, #4
 801104c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011050:	e7ae      	b.n	8010fb0 <__gethex+0x158>
 8011052:	45b1      	cmp	r9, r6
 8011054:	d8ea      	bhi.n	801102c <__gethex+0x1d4>
 8011056:	2201      	movs	r2, #1
 8011058:	492a      	ldr	r1, [pc, #168]	@ (8011104 <__gethex+0x2ac>)
 801105a:	4630      	mov	r0, r6
 801105c:	9303      	str	r3, [sp, #12]
 801105e:	f7ff fe37 	bl	8010cd0 <strncmp>
 8011062:	9b03      	ldr	r3, [sp, #12]
 8011064:	2800      	cmp	r0, #0
 8011066:	d1e1      	bne.n	801102c <__gethex+0x1d4>
 8011068:	e7a2      	b.n	8010fb0 <__gethex+0x158>
 801106a:	1ea9      	subs	r1, r5, #2
 801106c:	4620      	mov	r0, r4
 801106e:	f7fe fde6 	bl	800fc3e <__any_on>
 8011072:	2800      	cmp	r0, #0
 8011074:	d0c2      	beq.n	8010ffc <__gethex+0x1a4>
 8011076:	f04f 0903 	mov.w	r9, #3
 801107a:	e7c1      	b.n	8011000 <__gethex+0x1a8>
 801107c:	da09      	bge.n	8011092 <__gethex+0x23a>
 801107e:	1b75      	subs	r5, r6, r5
 8011080:	4621      	mov	r1, r4
 8011082:	9801      	ldr	r0, [sp, #4]
 8011084:	462a      	mov	r2, r5
 8011086:	1b7f      	subs	r7, r7, r5
 8011088:	f7fe fb98 	bl	800f7bc <__lshift>
 801108c:	4604      	mov	r4, r0
 801108e:	f100 0a14 	add.w	sl, r0, #20
 8011092:	f04f 0900 	mov.w	r9, #0
 8011096:	e7b8      	b.n	801100a <__gethex+0x1b2>
 8011098:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801109c:	42bd      	cmp	r5, r7
 801109e:	dd6f      	ble.n	8011180 <__gethex+0x328>
 80110a0:	1bed      	subs	r5, r5, r7
 80110a2:	42ae      	cmp	r6, r5
 80110a4:	dc34      	bgt.n	8011110 <__gethex+0x2b8>
 80110a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110aa:	2b02      	cmp	r3, #2
 80110ac:	d022      	beq.n	80110f4 <__gethex+0x29c>
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	d024      	beq.n	80110fc <__gethex+0x2a4>
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d115      	bne.n	80110e2 <__gethex+0x28a>
 80110b6:	42ae      	cmp	r6, r5
 80110b8:	d113      	bne.n	80110e2 <__gethex+0x28a>
 80110ba:	2e01      	cmp	r6, #1
 80110bc:	d10b      	bne.n	80110d6 <__gethex+0x27e>
 80110be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110c2:	2562      	movs	r5, #98	@ 0x62
 80110c4:	9a02      	ldr	r2, [sp, #8]
 80110c6:	6013      	str	r3, [r2, #0]
 80110c8:	2301      	movs	r3, #1
 80110ca:	6123      	str	r3, [r4, #16]
 80110cc:	f8ca 3000 	str.w	r3, [sl]
 80110d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110d2:	601c      	str	r4, [r3, #0]
 80110d4:	e73a      	b.n	8010f4c <__gethex+0xf4>
 80110d6:	1e71      	subs	r1, r6, #1
 80110d8:	4620      	mov	r0, r4
 80110da:	f7fe fdb0 	bl	800fc3e <__any_on>
 80110de:	2800      	cmp	r0, #0
 80110e0:	d1ed      	bne.n	80110be <__gethex+0x266>
 80110e2:	4621      	mov	r1, r4
 80110e4:	9801      	ldr	r0, [sp, #4]
 80110e6:	f7fe f94f 	bl	800f388 <_Bfree>
 80110ea:	2300      	movs	r3, #0
 80110ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110ee:	2550      	movs	r5, #80	@ 0x50
 80110f0:	6013      	str	r3, [r2, #0]
 80110f2:	e72b      	b.n	8010f4c <__gethex+0xf4>
 80110f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1f3      	bne.n	80110e2 <__gethex+0x28a>
 80110fa:	e7e0      	b.n	80110be <__gethex+0x266>
 80110fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1dd      	bne.n	80110be <__gethex+0x266>
 8011102:	e7ee      	b.n	80110e2 <__gethex+0x28a>
 8011104:	08014828 	.word	0x08014828
 8011108:	080146be 	.word	0x080146be
 801110c:	080148d5 	.word	0x080148d5
 8011110:	1e6f      	subs	r7, r5, #1
 8011112:	f1b9 0f00 	cmp.w	r9, #0
 8011116:	d130      	bne.n	801117a <__gethex+0x322>
 8011118:	b127      	cbz	r7, 8011124 <__gethex+0x2cc>
 801111a:	4639      	mov	r1, r7
 801111c:	4620      	mov	r0, r4
 801111e:	f7fe fd8e 	bl	800fc3e <__any_on>
 8011122:	4681      	mov	r9, r0
 8011124:	117a      	asrs	r2, r7, #5
 8011126:	2301      	movs	r3, #1
 8011128:	f007 071f 	and.w	r7, r7, #31
 801112c:	4629      	mov	r1, r5
 801112e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011132:	4620      	mov	r0, r4
 8011134:	40bb      	lsls	r3, r7
 8011136:	1b76      	subs	r6, r6, r5
 8011138:	2502      	movs	r5, #2
 801113a:	4213      	tst	r3, r2
 801113c:	bf18      	it	ne
 801113e:	f049 0902 	orrne.w	r9, r9, #2
 8011142:	f7ff fe23 	bl	8010d8c <rshift>
 8011146:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801114a:	f1b9 0f00 	cmp.w	r9, #0
 801114e:	d047      	beq.n	80111e0 <__gethex+0x388>
 8011150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011154:	2b02      	cmp	r3, #2
 8011156:	d015      	beq.n	8011184 <__gethex+0x32c>
 8011158:	2b03      	cmp	r3, #3
 801115a:	d017      	beq.n	801118c <__gethex+0x334>
 801115c:	2b01      	cmp	r3, #1
 801115e:	d109      	bne.n	8011174 <__gethex+0x31c>
 8011160:	f019 0f02 	tst.w	r9, #2
 8011164:	d006      	beq.n	8011174 <__gethex+0x31c>
 8011166:	f8da 3000 	ldr.w	r3, [sl]
 801116a:	ea49 0903 	orr.w	r9, r9, r3
 801116e:	f019 0f01 	tst.w	r9, #1
 8011172:	d10e      	bne.n	8011192 <__gethex+0x33a>
 8011174:	f045 0510 	orr.w	r5, r5, #16
 8011178:	e032      	b.n	80111e0 <__gethex+0x388>
 801117a:	f04f 0901 	mov.w	r9, #1
 801117e:	e7d1      	b.n	8011124 <__gethex+0x2cc>
 8011180:	2501      	movs	r5, #1
 8011182:	e7e2      	b.n	801114a <__gethex+0x2f2>
 8011184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011186:	f1c3 0301 	rsb	r3, r3, #1
 801118a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801118c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d0f0      	beq.n	8011174 <__gethex+0x31c>
 8011192:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011196:	f104 0314 	add.w	r3, r4, #20
 801119a:	f04f 0c00 	mov.w	ip, #0
 801119e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80111a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80111a6:	4618      	mov	r0, r3
 80111a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80111b0:	d01b      	beq.n	80111ea <__gethex+0x392>
 80111b2:	3201      	adds	r2, #1
 80111b4:	6002      	str	r2, [r0, #0]
 80111b6:	2d02      	cmp	r5, #2
 80111b8:	f104 0314 	add.w	r3, r4, #20
 80111bc:	d13c      	bne.n	8011238 <__gethex+0x3e0>
 80111be:	f8d8 2000 	ldr.w	r2, [r8]
 80111c2:	3a01      	subs	r2, #1
 80111c4:	42b2      	cmp	r2, r6
 80111c6:	d109      	bne.n	80111dc <__gethex+0x384>
 80111c8:	1171      	asrs	r1, r6, #5
 80111ca:	2201      	movs	r2, #1
 80111cc:	f006 061f 	and.w	r6, r6, #31
 80111d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111d4:	fa02 f606 	lsl.w	r6, r2, r6
 80111d8:	421e      	tst	r6, r3
 80111da:	d13a      	bne.n	8011252 <__gethex+0x3fa>
 80111dc:	f045 0520 	orr.w	r5, r5, #32
 80111e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111e2:	601c      	str	r4, [r3, #0]
 80111e4:	9b02      	ldr	r3, [sp, #8]
 80111e6:	601f      	str	r7, [r3, #0]
 80111e8:	e6b0      	b.n	8010f4c <__gethex+0xf4>
 80111ea:	4299      	cmp	r1, r3
 80111ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80111f0:	d8d9      	bhi.n	80111a6 <__gethex+0x34e>
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	459b      	cmp	fp, r3
 80111f6:	db17      	blt.n	8011228 <__gethex+0x3d0>
 80111f8:	6861      	ldr	r1, [r4, #4]
 80111fa:	9801      	ldr	r0, [sp, #4]
 80111fc:	3101      	adds	r1, #1
 80111fe:	f7fe f883 	bl	800f308 <_Balloc>
 8011202:	4681      	mov	r9, r0
 8011204:	b918      	cbnz	r0, 801120e <__gethex+0x3b6>
 8011206:	4b1a      	ldr	r3, [pc, #104]	@ (8011270 <__gethex+0x418>)
 8011208:	4602      	mov	r2, r0
 801120a:	2184      	movs	r1, #132	@ 0x84
 801120c:	e6c5      	b.n	8010f9a <__gethex+0x142>
 801120e:	6922      	ldr	r2, [r4, #16]
 8011210:	f104 010c 	add.w	r1, r4, #12
 8011214:	300c      	adds	r0, #12
 8011216:	3202      	adds	r2, #2
 8011218:	0092      	lsls	r2, r2, #2
 801121a:	f7fd f910 	bl	800e43e <memcpy>
 801121e:	4621      	mov	r1, r4
 8011220:	464c      	mov	r4, r9
 8011222:	9801      	ldr	r0, [sp, #4]
 8011224:	f7fe f8b0 	bl	800f388 <_Bfree>
 8011228:	6923      	ldr	r3, [r4, #16]
 801122a:	1c5a      	adds	r2, r3, #1
 801122c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011230:	6122      	str	r2, [r4, #16]
 8011232:	2201      	movs	r2, #1
 8011234:	615a      	str	r2, [r3, #20]
 8011236:	e7be      	b.n	80111b6 <__gethex+0x35e>
 8011238:	6922      	ldr	r2, [r4, #16]
 801123a:	455a      	cmp	r2, fp
 801123c:	dd0b      	ble.n	8011256 <__gethex+0x3fe>
 801123e:	2101      	movs	r1, #1
 8011240:	4620      	mov	r0, r4
 8011242:	f7ff fda3 	bl	8010d8c <rshift>
 8011246:	3701      	adds	r7, #1
 8011248:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801124c:	42bb      	cmp	r3, r7
 801124e:	f6ff aee0 	blt.w	8011012 <__gethex+0x1ba>
 8011252:	2501      	movs	r5, #1
 8011254:	e7c2      	b.n	80111dc <__gethex+0x384>
 8011256:	f016 061f 	ands.w	r6, r6, #31
 801125a:	d0fa      	beq.n	8011252 <__gethex+0x3fa>
 801125c:	4453      	add	r3, sl
 801125e:	f1c6 0620 	rsb	r6, r6, #32
 8011262:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011266:	f7fe f943 	bl	800f4f0 <__hi0bits>
 801126a:	42b0      	cmp	r0, r6
 801126c:	dbe7      	blt.n	801123e <__gethex+0x3e6>
 801126e:	e7f0      	b.n	8011252 <__gethex+0x3fa>
 8011270:	080146be 	.word	0x080146be

08011274 <L_shift>:
 8011274:	f1c2 0208 	rsb	r2, r2, #8
 8011278:	0092      	lsls	r2, r2, #2
 801127a:	b570      	push	{r4, r5, r6, lr}
 801127c:	f1c2 0620 	rsb	r6, r2, #32
 8011280:	6843      	ldr	r3, [r0, #4]
 8011282:	6804      	ldr	r4, [r0, #0]
 8011284:	fa03 f506 	lsl.w	r5, r3, r6
 8011288:	40d3      	lsrs	r3, r2
 801128a:	432c      	orrs	r4, r5
 801128c:	6004      	str	r4, [r0, #0]
 801128e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011292:	4288      	cmp	r0, r1
 8011294:	d3f4      	bcc.n	8011280 <L_shift+0xc>
 8011296:	bd70      	pop	{r4, r5, r6, pc}

08011298 <__match>:
 8011298:	6803      	ldr	r3, [r0, #0]
 801129a:	3301      	adds	r3, #1
 801129c:	b530      	push	{r4, r5, lr}
 801129e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112a2:	b914      	cbnz	r4, 80112aa <__match+0x12>
 80112a4:	6003      	str	r3, [r0, #0]
 80112a6:	2001      	movs	r0, #1
 80112a8:	bd30      	pop	{r4, r5, pc}
 80112aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80112b2:	2d19      	cmp	r5, #25
 80112b4:	bf98      	it	ls
 80112b6:	3220      	addls	r2, #32
 80112b8:	42a2      	cmp	r2, r4
 80112ba:	d0f0      	beq.n	801129e <__match+0x6>
 80112bc:	2000      	movs	r0, #0
 80112be:	e7f3      	b.n	80112a8 <__match+0x10>

080112c0 <__hexnan>:
 80112c0:	680b      	ldr	r3, [r1, #0]
 80112c2:	6801      	ldr	r1, [r0, #0]
 80112c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c8:	115e      	asrs	r6, r3, #5
 80112ca:	f013 031f 	ands.w	r3, r3, #31
 80112ce:	f04f 0500 	mov.w	r5, #0
 80112d2:	b087      	sub	sp, #28
 80112d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80112d8:	4682      	mov	sl, r0
 80112da:	4690      	mov	r8, r2
 80112dc:	46ab      	mov	fp, r5
 80112de:	bf18      	it	ne
 80112e0:	3604      	addne	r6, #4
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	9502      	str	r5, [sp, #8]
 80112e6:	1f37      	subs	r7, r6, #4
 80112e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80112ec:	46b9      	mov	r9, r7
 80112ee:	463c      	mov	r4, r7
 80112f0:	1c4b      	adds	r3, r1, #1
 80112f2:	784a      	ldrb	r2, [r1, #1]
 80112f4:	9303      	str	r3, [sp, #12]
 80112f6:	b342      	cbz	r2, 801134a <__hexnan+0x8a>
 80112f8:	4610      	mov	r0, r2
 80112fa:	9105      	str	r1, [sp, #20]
 80112fc:	9204      	str	r2, [sp, #16]
 80112fe:	f7ff fd96 	bl	8010e2e <__hexdig_fun>
 8011302:	2800      	cmp	r0, #0
 8011304:	d151      	bne.n	80113aa <__hexnan+0xea>
 8011306:	9a04      	ldr	r2, [sp, #16]
 8011308:	9905      	ldr	r1, [sp, #20]
 801130a:	2a20      	cmp	r2, #32
 801130c:	d818      	bhi.n	8011340 <__hexnan+0x80>
 801130e:	9b02      	ldr	r3, [sp, #8]
 8011310:	459b      	cmp	fp, r3
 8011312:	dd13      	ble.n	801133c <__hexnan+0x7c>
 8011314:	454c      	cmp	r4, r9
 8011316:	d206      	bcs.n	8011326 <__hexnan+0x66>
 8011318:	2d07      	cmp	r5, #7
 801131a:	dc04      	bgt.n	8011326 <__hexnan+0x66>
 801131c:	462a      	mov	r2, r5
 801131e:	4649      	mov	r1, r9
 8011320:	4620      	mov	r0, r4
 8011322:	f7ff ffa7 	bl	8011274 <L_shift>
 8011326:	4544      	cmp	r4, r8
 8011328:	d951      	bls.n	80113ce <__hexnan+0x10e>
 801132a:	2300      	movs	r3, #0
 801132c:	f1a4 0904 	sub.w	r9, r4, #4
 8011330:	f8cd b008 	str.w	fp, [sp, #8]
 8011334:	f844 3c04 	str.w	r3, [r4, #-4]
 8011338:	461d      	mov	r5, r3
 801133a:	464c      	mov	r4, r9
 801133c:	9903      	ldr	r1, [sp, #12]
 801133e:	e7d7      	b.n	80112f0 <__hexnan+0x30>
 8011340:	2a29      	cmp	r2, #41	@ 0x29
 8011342:	d156      	bne.n	80113f2 <__hexnan+0x132>
 8011344:	3102      	adds	r1, #2
 8011346:	f8ca 1000 	str.w	r1, [sl]
 801134a:	f1bb 0f00 	cmp.w	fp, #0
 801134e:	d050      	beq.n	80113f2 <__hexnan+0x132>
 8011350:	454c      	cmp	r4, r9
 8011352:	d206      	bcs.n	8011362 <__hexnan+0xa2>
 8011354:	2d07      	cmp	r5, #7
 8011356:	dc04      	bgt.n	8011362 <__hexnan+0xa2>
 8011358:	462a      	mov	r2, r5
 801135a:	4649      	mov	r1, r9
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff ff89 	bl	8011274 <L_shift>
 8011362:	4544      	cmp	r4, r8
 8011364:	d935      	bls.n	80113d2 <__hexnan+0x112>
 8011366:	f1a8 0204 	sub.w	r2, r8, #4
 801136a:	4623      	mov	r3, r4
 801136c:	f853 1b04 	ldr.w	r1, [r3], #4
 8011370:	429f      	cmp	r7, r3
 8011372:	f842 1f04 	str.w	r1, [r2, #4]!
 8011376:	d2f9      	bcs.n	801136c <__hexnan+0xac>
 8011378:	1b3b      	subs	r3, r7, r4
 801137a:	3e03      	subs	r6, #3
 801137c:	3401      	adds	r4, #1
 801137e:	2200      	movs	r2, #0
 8011380:	f023 0303 	bic.w	r3, r3, #3
 8011384:	3304      	adds	r3, #4
 8011386:	42b4      	cmp	r4, r6
 8011388:	bf88      	it	hi
 801138a:	2304      	movhi	r3, #4
 801138c:	4443      	add	r3, r8
 801138e:	f843 2b04 	str.w	r2, [r3], #4
 8011392:	429f      	cmp	r7, r3
 8011394:	d2fb      	bcs.n	801138e <__hexnan+0xce>
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	b91b      	cbnz	r3, 80113a2 <__hexnan+0xe2>
 801139a:	4547      	cmp	r7, r8
 801139c:	d127      	bne.n	80113ee <__hexnan+0x12e>
 801139e:	2301      	movs	r3, #1
 80113a0:	603b      	str	r3, [r7, #0]
 80113a2:	2005      	movs	r0, #5
 80113a4:	b007      	add	sp, #28
 80113a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113aa:	3501      	adds	r5, #1
 80113ac:	f10b 0b01 	add.w	fp, fp, #1
 80113b0:	2d08      	cmp	r5, #8
 80113b2:	dd05      	ble.n	80113c0 <__hexnan+0x100>
 80113b4:	4544      	cmp	r4, r8
 80113b6:	d9c1      	bls.n	801133c <__hexnan+0x7c>
 80113b8:	2300      	movs	r3, #0
 80113ba:	3c04      	subs	r4, #4
 80113bc:	2501      	movs	r5, #1
 80113be:	6023      	str	r3, [r4, #0]
 80113c0:	6822      	ldr	r2, [r4, #0]
 80113c2:	f000 000f 	and.w	r0, r0, #15
 80113c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80113ca:	6020      	str	r0, [r4, #0]
 80113cc:	e7b6      	b.n	801133c <__hexnan+0x7c>
 80113ce:	2508      	movs	r5, #8
 80113d0:	e7b4      	b.n	801133c <__hexnan+0x7c>
 80113d2:	9b01      	ldr	r3, [sp, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d0de      	beq.n	8011396 <__hexnan+0xd6>
 80113d8:	f1c3 0320 	rsb	r3, r3, #32
 80113dc:	f04f 32ff 	mov.w	r2, #4294967295
 80113e0:	40da      	lsrs	r2, r3
 80113e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80113e6:	4013      	ands	r3, r2
 80113e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80113ec:	e7d3      	b.n	8011396 <__hexnan+0xd6>
 80113ee:	3f04      	subs	r7, #4
 80113f0:	e7d1      	b.n	8011396 <__hexnan+0xd6>
 80113f2:	2004      	movs	r0, #4
 80113f4:	e7d6      	b.n	80113a4 <__hexnan+0xe4>

080113f6 <__ascii_mbtowc>:
 80113f6:	b082      	sub	sp, #8
 80113f8:	b901      	cbnz	r1, 80113fc <__ascii_mbtowc+0x6>
 80113fa:	a901      	add	r1, sp, #4
 80113fc:	b142      	cbz	r2, 8011410 <__ascii_mbtowc+0x1a>
 80113fe:	b14b      	cbz	r3, 8011414 <__ascii_mbtowc+0x1e>
 8011400:	7813      	ldrb	r3, [r2, #0]
 8011402:	600b      	str	r3, [r1, #0]
 8011404:	7812      	ldrb	r2, [r2, #0]
 8011406:	1e10      	subs	r0, r2, #0
 8011408:	bf18      	it	ne
 801140a:	2001      	movne	r0, #1
 801140c:	b002      	add	sp, #8
 801140e:	4770      	bx	lr
 8011410:	4610      	mov	r0, r2
 8011412:	e7fb      	b.n	801140c <__ascii_mbtowc+0x16>
 8011414:	f06f 0001 	mvn.w	r0, #1
 8011418:	e7f8      	b.n	801140c <__ascii_mbtowc+0x16>

0801141a <_realloc_r>:
 801141a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801141e:	4680      	mov	r8, r0
 8011420:	4615      	mov	r5, r2
 8011422:	460c      	mov	r4, r1
 8011424:	b921      	cbnz	r1, 8011430 <_realloc_r+0x16>
 8011426:	4611      	mov	r1, r2
 8011428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801142c:	f7fd bee0 	b.w	800f1f0 <_malloc_r>
 8011430:	b92a      	cbnz	r2, 801143e <_realloc_r+0x24>
 8011432:	f7fd fe69 	bl	800f108 <_free_r>
 8011436:	2400      	movs	r4, #0
 8011438:	4620      	mov	r0, r4
 801143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143e:	f000 f840 	bl	80114c2 <_malloc_usable_size_r>
 8011442:	4285      	cmp	r5, r0
 8011444:	4606      	mov	r6, r0
 8011446:	d802      	bhi.n	801144e <_realloc_r+0x34>
 8011448:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801144c:	d8f4      	bhi.n	8011438 <_realloc_r+0x1e>
 801144e:	4629      	mov	r1, r5
 8011450:	4640      	mov	r0, r8
 8011452:	f7fd fecd 	bl	800f1f0 <_malloc_r>
 8011456:	4607      	mov	r7, r0
 8011458:	2800      	cmp	r0, #0
 801145a:	d0ec      	beq.n	8011436 <_realloc_r+0x1c>
 801145c:	42b5      	cmp	r5, r6
 801145e:	462a      	mov	r2, r5
 8011460:	4621      	mov	r1, r4
 8011462:	bf28      	it	cs
 8011464:	4632      	movcs	r2, r6
 8011466:	f7fc ffea 	bl	800e43e <memcpy>
 801146a:	4621      	mov	r1, r4
 801146c:	4640      	mov	r0, r8
 801146e:	463c      	mov	r4, r7
 8011470:	f7fd fe4a 	bl	800f108 <_free_r>
 8011474:	e7e0      	b.n	8011438 <_realloc_r+0x1e>

08011476 <__ascii_wctomb>:
 8011476:	4603      	mov	r3, r0
 8011478:	4608      	mov	r0, r1
 801147a:	b141      	cbz	r1, 801148e <__ascii_wctomb+0x18>
 801147c:	2aff      	cmp	r2, #255	@ 0xff
 801147e:	d904      	bls.n	801148a <__ascii_wctomb+0x14>
 8011480:	228a      	movs	r2, #138	@ 0x8a
 8011482:	f04f 30ff 	mov.w	r0, #4294967295
 8011486:	601a      	str	r2, [r3, #0]
 8011488:	4770      	bx	lr
 801148a:	2001      	movs	r0, #1
 801148c:	700a      	strb	r2, [r1, #0]
 801148e:	4770      	bx	lr

08011490 <fiprintf>:
 8011490:	b40e      	push	{r1, r2, r3}
 8011492:	b503      	push	{r0, r1, lr}
 8011494:	ab03      	add	r3, sp, #12
 8011496:	4601      	mov	r1, r0
 8011498:	4805      	ldr	r0, [pc, #20]	@ (80114b0 <fiprintf+0x20>)
 801149a:	f853 2b04 	ldr.w	r2, [r3], #4
 801149e:	6800      	ldr	r0, [r0, #0]
 80114a0:	9301      	str	r3, [sp, #4]
 80114a2:	f000 f83f 	bl	8011524 <_vfiprintf_r>
 80114a6:	b002      	add	sp, #8
 80114a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114ac:	b003      	add	sp, #12
 80114ae:	4770      	bx	lr
 80114b0:	20000034 	.word	0x20000034

080114b4 <abort>:
 80114b4:	2006      	movs	r0, #6
 80114b6:	b508      	push	{r3, lr}
 80114b8:	f000 fa08 	bl	80118cc <raise>
 80114bc:	2001      	movs	r0, #1
 80114be:	f7f3 fcfb 	bl	8004eb8 <_exit>

080114c2 <_malloc_usable_size_r>:
 80114c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114c6:	1f18      	subs	r0, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfbc      	itt	lt
 80114cc:	580b      	ldrlt	r3, [r1, r0]
 80114ce:	18c0      	addlt	r0, r0, r3
 80114d0:	4770      	bx	lr

080114d2 <__sfputc_r>:
 80114d2:	6893      	ldr	r3, [r2, #8]
 80114d4:	3b01      	subs	r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	6093      	str	r3, [r2, #8]
 80114da:	b410      	push	{r4}
 80114dc:	da08      	bge.n	80114f0 <__sfputc_r+0x1e>
 80114de:	6994      	ldr	r4, [r2, #24]
 80114e0:	42a3      	cmp	r3, r4
 80114e2:	db01      	blt.n	80114e8 <__sfputc_r+0x16>
 80114e4:	290a      	cmp	r1, #10
 80114e6:	d103      	bne.n	80114f0 <__sfputc_r+0x1e>
 80114e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114ec:	f000 b932 	b.w	8011754 <__swbuf_r>
 80114f0:	6813      	ldr	r3, [r2, #0]
 80114f2:	1c58      	adds	r0, r3, #1
 80114f4:	6010      	str	r0, [r2, #0]
 80114f6:	4608      	mov	r0, r1
 80114f8:	7019      	strb	r1, [r3, #0]
 80114fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114fe:	4770      	bx	lr

08011500 <__sfputs_r>:
 8011500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011502:	4606      	mov	r6, r0
 8011504:	460f      	mov	r7, r1
 8011506:	4614      	mov	r4, r2
 8011508:	18d5      	adds	r5, r2, r3
 801150a:	42ac      	cmp	r4, r5
 801150c:	d101      	bne.n	8011512 <__sfputs_r+0x12>
 801150e:	2000      	movs	r0, #0
 8011510:	e007      	b.n	8011522 <__sfputs_r+0x22>
 8011512:	463a      	mov	r2, r7
 8011514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011518:	4630      	mov	r0, r6
 801151a:	f7ff ffda 	bl	80114d2 <__sfputc_r>
 801151e:	1c43      	adds	r3, r0, #1
 8011520:	d1f3      	bne.n	801150a <__sfputs_r+0xa>
 8011522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011524 <_vfiprintf_r>:
 8011524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011528:	460d      	mov	r5, r1
 801152a:	b09d      	sub	sp, #116	@ 0x74
 801152c:	4614      	mov	r4, r2
 801152e:	4698      	mov	r8, r3
 8011530:	4606      	mov	r6, r0
 8011532:	b118      	cbz	r0, 801153c <_vfiprintf_r+0x18>
 8011534:	6a03      	ldr	r3, [r0, #32]
 8011536:	b90b      	cbnz	r3, 801153c <_vfiprintf_r+0x18>
 8011538:	f7fc fe5a 	bl	800e1f0 <__sinit>
 801153c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801153e:	07d9      	lsls	r1, r3, #31
 8011540:	d405      	bmi.n	801154e <_vfiprintf_r+0x2a>
 8011542:	89ab      	ldrh	r3, [r5, #12]
 8011544:	059a      	lsls	r2, r3, #22
 8011546:	d402      	bmi.n	801154e <_vfiprintf_r+0x2a>
 8011548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801154a:	f7fc ff68 	bl	800e41e <__retarget_lock_acquire_recursive>
 801154e:	89ab      	ldrh	r3, [r5, #12]
 8011550:	071b      	lsls	r3, r3, #28
 8011552:	d501      	bpl.n	8011558 <_vfiprintf_r+0x34>
 8011554:	692b      	ldr	r3, [r5, #16]
 8011556:	b99b      	cbnz	r3, 8011580 <_vfiprintf_r+0x5c>
 8011558:	4629      	mov	r1, r5
 801155a:	4630      	mov	r0, r6
 801155c:	f000 f938 	bl	80117d0 <__swsetup_r>
 8011560:	b170      	cbz	r0, 8011580 <_vfiprintf_r+0x5c>
 8011562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011564:	07dc      	lsls	r4, r3, #31
 8011566:	d504      	bpl.n	8011572 <_vfiprintf_r+0x4e>
 8011568:	f04f 30ff 	mov.w	r0, #4294967295
 801156c:	b01d      	add	sp, #116	@ 0x74
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	89ab      	ldrh	r3, [r5, #12]
 8011574:	0598      	lsls	r0, r3, #22
 8011576:	d4f7      	bmi.n	8011568 <_vfiprintf_r+0x44>
 8011578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801157a:	f7fc ff51 	bl	800e420 <__retarget_lock_release_recursive>
 801157e:	e7f3      	b.n	8011568 <_vfiprintf_r+0x44>
 8011580:	2300      	movs	r3, #0
 8011582:	f8cd 800c 	str.w	r8, [sp, #12]
 8011586:	f04f 0901 	mov.w	r9, #1
 801158a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011740 <_vfiprintf_r+0x21c>
 801158e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011590:	2320      	movs	r3, #32
 8011592:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011596:	2330      	movs	r3, #48	@ 0x30
 8011598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801159c:	4623      	mov	r3, r4
 801159e:	469a      	mov	sl, r3
 80115a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115a4:	b10a      	cbz	r2, 80115aa <_vfiprintf_r+0x86>
 80115a6:	2a25      	cmp	r2, #37	@ 0x25
 80115a8:	d1f9      	bne.n	801159e <_vfiprintf_r+0x7a>
 80115aa:	ebba 0b04 	subs.w	fp, sl, r4
 80115ae:	d00b      	beq.n	80115c8 <_vfiprintf_r+0xa4>
 80115b0:	465b      	mov	r3, fp
 80115b2:	4622      	mov	r2, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7ff ffa2 	bl	8011500 <__sfputs_r>
 80115bc:	3001      	adds	r0, #1
 80115be:	f000 80a7 	beq.w	8011710 <_vfiprintf_r+0x1ec>
 80115c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115c4:	445a      	add	r2, fp
 80115c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80115c8:	f89a 3000 	ldrb.w	r3, [sl]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f000 809f 	beq.w	8011710 <_vfiprintf_r+0x1ec>
 80115d2:	2300      	movs	r3, #0
 80115d4:	f04f 32ff 	mov.w	r2, #4294967295
 80115d8:	f10a 0a01 	add.w	sl, sl, #1
 80115dc:	9304      	str	r3, [sp, #16]
 80115de:	9307      	str	r3, [sp, #28]
 80115e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80115e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115ea:	4654      	mov	r4, sl
 80115ec:	2205      	movs	r2, #5
 80115ee:	4854      	ldr	r0, [pc, #336]	@ (8011740 <_vfiprintf_r+0x21c>)
 80115f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f4:	f7fc ff15 	bl	800e422 <memchr>
 80115f8:	9a04      	ldr	r2, [sp, #16]
 80115fa:	b9d8      	cbnz	r0, 8011634 <_vfiprintf_r+0x110>
 80115fc:	06d1      	lsls	r1, r2, #27
 80115fe:	bf44      	itt	mi
 8011600:	2320      	movmi	r3, #32
 8011602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011606:	0713      	lsls	r3, r2, #28
 8011608:	bf44      	itt	mi
 801160a:	232b      	movmi	r3, #43	@ 0x2b
 801160c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011610:	f89a 3000 	ldrb.w	r3, [sl]
 8011614:	2b2a      	cmp	r3, #42	@ 0x2a
 8011616:	d015      	beq.n	8011644 <_vfiprintf_r+0x120>
 8011618:	9a07      	ldr	r2, [sp, #28]
 801161a:	4654      	mov	r4, sl
 801161c:	2000      	movs	r0, #0
 801161e:	f04f 0c0a 	mov.w	ip, #10
 8011622:	4621      	mov	r1, r4
 8011624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011628:	3b30      	subs	r3, #48	@ 0x30
 801162a:	2b09      	cmp	r3, #9
 801162c:	d94b      	bls.n	80116c6 <_vfiprintf_r+0x1a2>
 801162e:	b1b0      	cbz	r0, 801165e <_vfiprintf_r+0x13a>
 8011630:	9207      	str	r2, [sp, #28]
 8011632:	e014      	b.n	801165e <_vfiprintf_r+0x13a>
 8011634:	eba0 0308 	sub.w	r3, r0, r8
 8011638:	46a2      	mov	sl, r4
 801163a:	fa09 f303 	lsl.w	r3, r9, r3
 801163e:	4313      	orrs	r3, r2
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	e7d2      	b.n	80115ea <_vfiprintf_r+0xc6>
 8011644:	9b03      	ldr	r3, [sp, #12]
 8011646:	1d19      	adds	r1, r3, #4
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	9103      	str	r1, [sp, #12]
 801164e:	bfbb      	ittet	lt
 8011650:	425b      	neglt	r3, r3
 8011652:	f042 0202 	orrlt.w	r2, r2, #2
 8011656:	9307      	strge	r3, [sp, #28]
 8011658:	9307      	strlt	r3, [sp, #28]
 801165a:	bfb8      	it	lt
 801165c:	9204      	strlt	r2, [sp, #16]
 801165e:	7823      	ldrb	r3, [r4, #0]
 8011660:	2b2e      	cmp	r3, #46	@ 0x2e
 8011662:	d10a      	bne.n	801167a <_vfiprintf_r+0x156>
 8011664:	7863      	ldrb	r3, [r4, #1]
 8011666:	2b2a      	cmp	r3, #42	@ 0x2a
 8011668:	d132      	bne.n	80116d0 <_vfiprintf_r+0x1ac>
 801166a:	9b03      	ldr	r3, [sp, #12]
 801166c:	3402      	adds	r4, #2
 801166e:	1d1a      	adds	r2, r3, #4
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011676:	9203      	str	r2, [sp, #12]
 8011678:	9305      	str	r3, [sp, #20]
 801167a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011750 <_vfiprintf_r+0x22c>
 801167e:	2203      	movs	r2, #3
 8011680:	7821      	ldrb	r1, [r4, #0]
 8011682:	4650      	mov	r0, sl
 8011684:	f7fc fecd 	bl	800e422 <memchr>
 8011688:	b138      	cbz	r0, 801169a <_vfiprintf_r+0x176>
 801168a:	eba0 000a 	sub.w	r0, r0, sl
 801168e:	2240      	movs	r2, #64	@ 0x40
 8011690:	9b04      	ldr	r3, [sp, #16]
 8011692:	3401      	adds	r4, #1
 8011694:	4082      	lsls	r2, r0
 8011696:	4313      	orrs	r3, r2
 8011698:	9304      	str	r3, [sp, #16]
 801169a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169e:	2206      	movs	r2, #6
 80116a0:	4828      	ldr	r0, [pc, #160]	@ (8011744 <_vfiprintf_r+0x220>)
 80116a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116a6:	f7fc febc 	bl	800e422 <memchr>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d03f      	beq.n	801172e <_vfiprintf_r+0x20a>
 80116ae:	4b26      	ldr	r3, [pc, #152]	@ (8011748 <_vfiprintf_r+0x224>)
 80116b0:	bb1b      	cbnz	r3, 80116fa <_vfiprintf_r+0x1d6>
 80116b2:	9b03      	ldr	r3, [sp, #12]
 80116b4:	3307      	adds	r3, #7
 80116b6:	f023 0307 	bic.w	r3, r3, #7
 80116ba:	3308      	adds	r3, #8
 80116bc:	9303      	str	r3, [sp, #12]
 80116be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c0:	443b      	add	r3, r7
 80116c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80116c4:	e76a      	b.n	801159c <_vfiprintf_r+0x78>
 80116c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116ca:	460c      	mov	r4, r1
 80116cc:	2001      	movs	r0, #1
 80116ce:	e7a8      	b.n	8011622 <_vfiprintf_r+0xfe>
 80116d0:	2300      	movs	r3, #0
 80116d2:	3401      	adds	r4, #1
 80116d4:	f04f 0c0a 	mov.w	ip, #10
 80116d8:	4619      	mov	r1, r3
 80116da:	9305      	str	r3, [sp, #20]
 80116dc:	4620      	mov	r0, r4
 80116de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116e2:	3a30      	subs	r2, #48	@ 0x30
 80116e4:	2a09      	cmp	r2, #9
 80116e6:	d903      	bls.n	80116f0 <_vfiprintf_r+0x1cc>
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d0c6      	beq.n	801167a <_vfiprintf_r+0x156>
 80116ec:	9105      	str	r1, [sp, #20]
 80116ee:	e7c4      	b.n	801167a <_vfiprintf_r+0x156>
 80116f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80116f4:	4604      	mov	r4, r0
 80116f6:	2301      	movs	r3, #1
 80116f8:	e7f0      	b.n	80116dc <_vfiprintf_r+0x1b8>
 80116fa:	ab03      	add	r3, sp, #12
 80116fc:	462a      	mov	r2, r5
 80116fe:	a904      	add	r1, sp, #16
 8011700:	4630      	mov	r0, r6
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	4b11      	ldr	r3, [pc, #68]	@ (801174c <_vfiprintf_r+0x228>)
 8011706:	f7fb ff19 	bl	800d53c <_printf_float>
 801170a:	4607      	mov	r7, r0
 801170c:	1c78      	adds	r0, r7, #1
 801170e:	d1d6      	bne.n	80116be <_vfiprintf_r+0x19a>
 8011710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011712:	07d9      	lsls	r1, r3, #31
 8011714:	d405      	bmi.n	8011722 <_vfiprintf_r+0x1fe>
 8011716:	89ab      	ldrh	r3, [r5, #12]
 8011718:	059a      	lsls	r2, r3, #22
 801171a:	d402      	bmi.n	8011722 <_vfiprintf_r+0x1fe>
 801171c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801171e:	f7fc fe7f 	bl	800e420 <__retarget_lock_release_recursive>
 8011722:	89ab      	ldrh	r3, [r5, #12]
 8011724:	065b      	lsls	r3, r3, #25
 8011726:	f53f af1f 	bmi.w	8011568 <_vfiprintf_r+0x44>
 801172a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801172c:	e71e      	b.n	801156c <_vfiprintf_r+0x48>
 801172e:	ab03      	add	r3, sp, #12
 8011730:	462a      	mov	r2, r5
 8011732:	a904      	add	r1, sp, #16
 8011734:	4630      	mov	r0, r6
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	4b04      	ldr	r3, [pc, #16]	@ (801174c <_vfiprintf_r+0x228>)
 801173a:	f7fc f99b 	bl	800da74 <_printf_i>
 801173e:	e7e4      	b.n	801170a <_vfiprintf_r+0x1e6>
 8011740:	08014880 	.word	0x08014880
 8011744:	0801488a 	.word	0x0801488a
 8011748:	0800d53d 	.word	0x0800d53d
 801174c:	08011501 	.word	0x08011501
 8011750:	08014886 	.word	0x08014886

08011754 <__swbuf_r>:
 8011754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011756:	460e      	mov	r6, r1
 8011758:	4614      	mov	r4, r2
 801175a:	4605      	mov	r5, r0
 801175c:	b118      	cbz	r0, 8011766 <__swbuf_r+0x12>
 801175e:	6a03      	ldr	r3, [r0, #32]
 8011760:	b90b      	cbnz	r3, 8011766 <__swbuf_r+0x12>
 8011762:	f7fc fd45 	bl	800e1f0 <__sinit>
 8011766:	69a3      	ldr	r3, [r4, #24]
 8011768:	60a3      	str	r3, [r4, #8]
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	071a      	lsls	r2, r3, #28
 801176e:	d501      	bpl.n	8011774 <__swbuf_r+0x20>
 8011770:	6923      	ldr	r3, [r4, #16]
 8011772:	b943      	cbnz	r3, 8011786 <__swbuf_r+0x32>
 8011774:	4621      	mov	r1, r4
 8011776:	4628      	mov	r0, r5
 8011778:	f000 f82a 	bl	80117d0 <__swsetup_r>
 801177c:	b118      	cbz	r0, 8011786 <__swbuf_r+0x32>
 801177e:	f04f 37ff 	mov.w	r7, #4294967295
 8011782:	4638      	mov	r0, r7
 8011784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	b2f6      	uxtb	r6, r6
 801178a:	6922      	ldr	r2, [r4, #16]
 801178c:	4637      	mov	r7, r6
 801178e:	1a98      	subs	r0, r3, r2
 8011790:	6963      	ldr	r3, [r4, #20]
 8011792:	4283      	cmp	r3, r0
 8011794:	dc05      	bgt.n	80117a2 <__swbuf_r+0x4e>
 8011796:	4621      	mov	r1, r4
 8011798:	4628      	mov	r0, r5
 801179a:	f7ff fa57 	bl	8010c4c <_fflush_r>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d1ed      	bne.n	801177e <__swbuf_r+0x2a>
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	60a3      	str	r3, [r4, #8]
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	6022      	str	r2, [r4, #0]
 80117ae:	701e      	strb	r6, [r3, #0]
 80117b0:	1c43      	adds	r3, r0, #1
 80117b2:	6962      	ldr	r2, [r4, #20]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d004      	beq.n	80117c2 <__swbuf_r+0x6e>
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	07db      	lsls	r3, r3, #31
 80117bc:	d5e1      	bpl.n	8011782 <__swbuf_r+0x2e>
 80117be:	2e0a      	cmp	r6, #10
 80117c0:	d1df      	bne.n	8011782 <__swbuf_r+0x2e>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4628      	mov	r0, r5
 80117c6:	f7ff fa41 	bl	8010c4c <_fflush_r>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d0d9      	beq.n	8011782 <__swbuf_r+0x2e>
 80117ce:	e7d6      	b.n	801177e <__swbuf_r+0x2a>

080117d0 <__swsetup_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	4b29      	ldr	r3, [pc, #164]	@ (8011878 <__swsetup_r+0xa8>)
 80117d4:	4605      	mov	r5, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	b118      	cbz	r0, 80117e4 <__swsetup_r+0x14>
 80117dc:	6a03      	ldr	r3, [r0, #32]
 80117de:	b90b      	cbnz	r3, 80117e4 <__swsetup_r+0x14>
 80117e0:	f7fc fd06 	bl	800e1f0 <__sinit>
 80117e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117e8:	0719      	lsls	r1, r3, #28
 80117ea:	d422      	bmi.n	8011832 <__swsetup_r+0x62>
 80117ec:	06da      	lsls	r2, r3, #27
 80117ee:	d407      	bmi.n	8011800 <__swsetup_r+0x30>
 80117f0:	2209      	movs	r2, #9
 80117f2:	602a      	str	r2, [r5, #0]
 80117f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117f8:	f04f 30ff 	mov.w	r0, #4294967295
 80117fc:	81a3      	strh	r3, [r4, #12]
 80117fe:	e033      	b.n	8011868 <__swsetup_r+0x98>
 8011800:	0758      	lsls	r0, r3, #29
 8011802:	d512      	bpl.n	801182a <__swsetup_r+0x5a>
 8011804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011806:	b141      	cbz	r1, 801181a <__swsetup_r+0x4a>
 8011808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801180c:	4299      	cmp	r1, r3
 801180e:	d002      	beq.n	8011816 <__swsetup_r+0x46>
 8011810:	4628      	mov	r0, r5
 8011812:	f7fd fc79 	bl	800f108 <_free_r>
 8011816:	2300      	movs	r3, #0
 8011818:	6363      	str	r3, [r4, #52]	@ 0x34
 801181a:	89a3      	ldrh	r3, [r4, #12]
 801181c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011820:	81a3      	strh	r3, [r4, #12]
 8011822:	2300      	movs	r3, #0
 8011824:	6063      	str	r3, [r4, #4]
 8011826:	6923      	ldr	r3, [r4, #16]
 8011828:	6023      	str	r3, [r4, #0]
 801182a:	89a3      	ldrh	r3, [r4, #12]
 801182c:	f043 0308 	orr.w	r3, r3, #8
 8011830:	81a3      	strh	r3, [r4, #12]
 8011832:	6923      	ldr	r3, [r4, #16]
 8011834:	b94b      	cbnz	r3, 801184a <__swsetup_r+0x7a>
 8011836:	89a3      	ldrh	r3, [r4, #12]
 8011838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801183c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011840:	d003      	beq.n	801184a <__swsetup_r+0x7a>
 8011842:	4621      	mov	r1, r4
 8011844:	4628      	mov	r0, r5
 8011846:	f000 f882 	bl	801194e <__smakebuf_r>
 801184a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801184e:	f013 0201 	ands.w	r2, r3, #1
 8011852:	d00a      	beq.n	801186a <__swsetup_r+0x9a>
 8011854:	2200      	movs	r2, #0
 8011856:	60a2      	str	r2, [r4, #8]
 8011858:	6962      	ldr	r2, [r4, #20]
 801185a:	4252      	negs	r2, r2
 801185c:	61a2      	str	r2, [r4, #24]
 801185e:	6922      	ldr	r2, [r4, #16]
 8011860:	b942      	cbnz	r2, 8011874 <__swsetup_r+0xa4>
 8011862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011866:	d1c5      	bne.n	80117f4 <__swsetup_r+0x24>
 8011868:	bd38      	pop	{r3, r4, r5, pc}
 801186a:	0799      	lsls	r1, r3, #30
 801186c:	bf58      	it	pl
 801186e:	6962      	ldrpl	r2, [r4, #20]
 8011870:	60a2      	str	r2, [r4, #8]
 8011872:	e7f4      	b.n	801185e <__swsetup_r+0x8e>
 8011874:	2000      	movs	r0, #0
 8011876:	e7f7      	b.n	8011868 <__swsetup_r+0x98>
 8011878:	20000034 	.word	0x20000034

0801187c <_raise_r>:
 801187c:	291f      	cmp	r1, #31
 801187e:	b538      	push	{r3, r4, r5, lr}
 8011880:	4605      	mov	r5, r0
 8011882:	460c      	mov	r4, r1
 8011884:	d904      	bls.n	8011890 <_raise_r+0x14>
 8011886:	2316      	movs	r3, #22
 8011888:	6003      	str	r3, [r0, #0]
 801188a:	f04f 30ff 	mov.w	r0, #4294967295
 801188e:	bd38      	pop	{r3, r4, r5, pc}
 8011890:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011892:	b112      	cbz	r2, 801189a <_raise_r+0x1e>
 8011894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011898:	b94b      	cbnz	r3, 80118ae <_raise_r+0x32>
 801189a:	4628      	mov	r0, r5
 801189c:	f000 f830 	bl	8011900 <_getpid_r>
 80118a0:	4622      	mov	r2, r4
 80118a2:	4601      	mov	r1, r0
 80118a4:	4628      	mov	r0, r5
 80118a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118aa:	f000 b817 	b.w	80118dc <_kill_r>
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d00a      	beq.n	80118c8 <_raise_r+0x4c>
 80118b2:	1c59      	adds	r1, r3, #1
 80118b4:	d103      	bne.n	80118be <_raise_r+0x42>
 80118b6:	2316      	movs	r3, #22
 80118b8:	6003      	str	r3, [r0, #0]
 80118ba:	2001      	movs	r0, #1
 80118bc:	e7e7      	b.n	801188e <_raise_r+0x12>
 80118be:	2100      	movs	r1, #0
 80118c0:	4620      	mov	r0, r4
 80118c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80118c6:	4798      	blx	r3
 80118c8:	2000      	movs	r0, #0
 80118ca:	e7e0      	b.n	801188e <_raise_r+0x12>

080118cc <raise>:
 80118cc:	4b02      	ldr	r3, [pc, #8]	@ (80118d8 <raise+0xc>)
 80118ce:	4601      	mov	r1, r0
 80118d0:	6818      	ldr	r0, [r3, #0]
 80118d2:	f7ff bfd3 	b.w	801187c <_raise_r>
 80118d6:	bf00      	nop
 80118d8:	20000034 	.word	0x20000034

080118dc <_kill_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	2300      	movs	r3, #0
 80118e0:	4d06      	ldr	r5, [pc, #24]	@ (80118fc <_kill_r+0x20>)
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	4611      	mov	r1, r2
 80118e8:	602b      	str	r3, [r5, #0]
 80118ea:	f7f3 fad5 	bl	8004e98 <_kill>
 80118ee:	1c43      	adds	r3, r0, #1
 80118f0:	d102      	bne.n	80118f8 <_kill_r+0x1c>
 80118f2:	682b      	ldr	r3, [r5, #0]
 80118f4:	b103      	cbz	r3, 80118f8 <_kill_r+0x1c>
 80118f6:	6023      	str	r3, [r4, #0]
 80118f8:	bd38      	pop	{r3, r4, r5, pc}
 80118fa:	bf00      	nop
 80118fc:	2003b3b4 	.word	0x2003b3b4

08011900 <_getpid_r>:
 8011900:	f7f3 bac2 	b.w	8004e88 <_getpid>

08011904 <__swhatbuf_r>:
 8011904:	b570      	push	{r4, r5, r6, lr}
 8011906:	460c      	mov	r4, r1
 8011908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801190c:	b096      	sub	sp, #88	@ 0x58
 801190e:	4615      	mov	r5, r2
 8011910:	2900      	cmp	r1, #0
 8011912:	461e      	mov	r6, r3
 8011914:	da0c      	bge.n	8011930 <__swhatbuf_r+0x2c>
 8011916:	89a3      	ldrh	r3, [r4, #12]
 8011918:	2100      	movs	r1, #0
 801191a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801191e:	bf14      	ite	ne
 8011920:	2340      	movne	r3, #64	@ 0x40
 8011922:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011926:	2000      	movs	r0, #0
 8011928:	6031      	str	r1, [r6, #0]
 801192a:	602b      	str	r3, [r5, #0]
 801192c:	b016      	add	sp, #88	@ 0x58
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	466a      	mov	r2, sp
 8011932:	f000 f849 	bl	80119c8 <_fstat_r>
 8011936:	2800      	cmp	r0, #0
 8011938:	dbed      	blt.n	8011916 <__swhatbuf_r+0x12>
 801193a:	9901      	ldr	r1, [sp, #4]
 801193c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011940:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011944:	4259      	negs	r1, r3
 8011946:	4159      	adcs	r1, r3
 8011948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801194c:	e7eb      	b.n	8011926 <__swhatbuf_r+0x22>

0801194e <__smakebuf_r>:
 801194e:	898b      	ldrh	r3, [r1, #12]
 8011950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011952:	079d      	lsls	r5, r3, #30
 8011954:	4606      	mov	r6, r0
 8011956:	460c      	mov	r4, r1
 8011958:	d507      	bpl.n	801196a <__smakebuf_r+0x1c>
 801195a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801195e:	6023      	str	r3, [r4, #0]
 8011960:	6123      	str	r3, [r4, #16]
 8011962:	2301      	movs	r3, #1
 8011964:	6163      	str	r3, [r4, #20]
 8011966:	b003      	add	sp, #12
 8011968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801196a:	ab01      	add	r3, sp, #4
 801196c:	466a      	mov	r2, sp
 801196e:	f7ff ffc9 	bl	8011904 <__swhatbuf_r>
 8011972:	9f00      	ldr	r7, [sp, #0]
 8011974:	4605      	mov	r5, r0
 8011976:	4630      	mov	r0, r6
 8011978:	4639      	mov	r1, r7
 801197a:	f7fd fc39 	bl	800f1f0 <_malloc_r>
 801197e:	b948      	cbnz	r0, 8011994 <__smakebuf_r+0x46>
 8011980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011984:	059a      	lsls	r2, r3, #22
 8011986:	d4ee      	bmi.n	8011966 <__smakebuf_r+0x18>
 8011988:	f023 0303 	bic.w	r3, r3, #3
 801198c:	f043 0302 	orr.w	r3, r3, #2
 8011990:	81a3      	strh	r3, [r4, #12]
 8011992:	e7e2      	b.n	801195a <__smakebuf_r+0xc>
 8011994:	89a3      	ldrh	r3, [r4, #12]
 8011996:	6020      	str	r0, [r4, #0]
 8011998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801199c:	81a3      	strh	r3, [r4, #12]
 801199e:	9b01      	ldr	r3, [sp, #4]
 80119a0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80119a4:	b15b      	cbz	r3, 80119be <__smakebuf_r+0x70>
 80119a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119aa:	4630      	mov	r0, r6
 80119ac:	f000 f81e 	bl	80119ec <_isatty_r>
 80119b0:	b128      	cbz	r0, 80119be <__smakebuf_r+0x70>
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	f023 0303 	bic.w	r3, r3, #3
 80119b8:	f043 0301 	orr.w	r3, r3, #1
 80119bc:	81a3      	strh	r3, [r4, #12]
 80119be:	89a3      	ldrh	r3, [r4, #12]
 80119c0:	431d      	orrs	r5, r3
 80119c2:	81a5      	strh	r5, [r4, #12]
 80119c4:	e7cf      	b.n	8011966 <__smakebuf_r+0x18>
	...

080119c8 <_fstat_r>:
 80119c8:	b538      	push	{r3, r4, r5, lr}
 80119ca:	2300      	movs	r3, #0
 80119cc:	4d06      	ldr	r5, [pc, #24]	@ (80119e8 <_fstat_r+0x20>)
 80119ce:	4604      	mov	r4, r0
 80119d0:	4608      	mov	r0, r1
 80119d2:	4611      	mov	r1, r2
 80119d4:	602b      	str	r3, [r5, #0]
 80119d6:	f7f3 fabf 	bl	8004f58 <_fstat>
 80119da:	1c43      	adds	r3, r0, #1
 80119dc:	d102      	bne.n	80119e4 <_fstat_r+0x1c>
 80119de:	682b      	ldr	r3, [r5, #0]
 80119e0:	b103      	cbz	r3, 80119e4 <_fstat_r+0x1c>
 80119e2:	6023      	str	r3, [r4, #0]
 80119e4:	bd38      	pop	{r3, r4, r5, pc}
 80119e6:	bf00      	nop
 80119e8:	2003b3b4 	.word	0x2003b3b4

080119ec <_isatty_r>:
 80119ec:	b538      	push	{r3, r4, r5, lr}
 80119ee:	2300      	movs	r3, #0
 80119f0:	4d05      	ldr	r5, [pc, #20]	@ (8011a08 <_isatty_r+0x1c>)
 80119f2:	4604      	mov	r4, r0
 80119f4:	4608      	mov	r0, r1
 80119f6:	602b      	str	r3, [r5, #0]
 80119f8:	f7f3 fabe 	bl	8004f78 <_isatty>
 80119fc:	1c43      	adds	r3, r0, #1
 80119fe:	d102      	bne.n	8011a06 <_isatty_r+0x1a>
 8011a00:	682b      	ldr	r3, [r5, #0]
 8011a02:	b103      	cbz	r3, 8011a06 <_isatty_r+0x1a>
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	bd38      	pop	{r3, r4, r5, pc}
 8011a08:	2003b3b4 	.word	0x2003b3b4

08011a0c <atan2>:
 8011a0c:	f000 bbb4 	b.w	8012178 <__ieee754_atan2>

08011a10 <pow>:
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	ec55 4b11 	vmov	r4, r5, d1
 8011a16:	ed2d 8b02 	vpush	{d8}
 8011a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8011a1e:	eef0 8a60 	vmov.f32	s17, s1
 8011a22:	f000 fc71 	bl	8012308 <__ieee754_pow>
 8011a26:	4622      	mov	r2, r4
 8011a28:	462b      	mov	r3, r5
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	ec57 6b10 	vmov	r6, r7, d0
 8011a32:	f7ef f88f 	bl	8000b54 <__aeabi_dcmpun>
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d13b      	bne.n	8011ab2 <pow+0xa2>
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	ec51 0b18 	vmov	r0, r1, d8
 8011a42:	f7ef f855 	bl	8000af0 <__aeabi_dcmpeq>
 8011a46:	b1b8      	cbz	r0, 8011a78 <pow+0x68>
 8011a48:	2200      	movs	r2, #0
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ef f84e 	bl	8000af0 <__aeabi_dcmpeq>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d146      	bne.n	8011ae6 <pow+0xd6>
 8011a58:	ec45 4b10 	vmov	d0, r4, r5
 8011a5c:	f000 f91c 	bl	8011c98 <finite>
 8011a60:	b338      	cbz	r0, 8011ab2 <pow+0xa2>
 8011a62:	2200      	movs	r2, #0
 8011a64:	2300      	movs	r3, #0
 8011a66:	4620      	mov	r0, r4
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f7ef f84b 	bl	8000b04 <__aeabi_dcmplt>
 8011a6e:	b300      	cbz	r0, 8011ab2 <pow+0xa2>
 8011a70:	f7fc fcaa 	bl	800e3c8 <__errno>
 8011a74:	2322      	movs	r3, #34	@ 0x22
 8011a76:	e01b      	b.n	8011ab0 <pow+0xa0>
 8011a78:	ec47 6b10 	vmov	d0, r6, r7
 8011a7c:	f000 f90c 	bl	8011c98 <finite>
 8011a80:	b9e0      	cbnz	r0, 8011abc <pow+0xac>
 8011a82:	eeb0 0a48 	vmov.f32	s0, s16
 8011a86:	eef0 0a68 	vmov.f32	s1, s17
 8011a8a:	f000 f905 	bl	8011c98 <finite>
 8011a8e:	b1a8      	cbz	r0, 8011abc <pow+0xac>
 8011a90:	ec45 4b10 	vmov	d0, r4, r5
 8011a94:	f000 f900 	bl	8011c98 <finite>
 8011a98:	b180      	cbz	r0, 8011abc <pow+0xac>
 8011a9a:	4632      	mov	r2, r6
 8011a9c:	463b      	mov	r3, r7
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4639      	mov	r1, r7
 8011aa2:	f7ef f857 	bl	8000b54 <__aeabi_dcmpun>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d0e2      	beq.n	8011a70 <pow+0x60>
 8011aaa:	f7fc fc8d 	bl	800e3c8 <__errno>
 8011aae:	2321      	movs	r3, #33	@ 0x21
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	ecbd 8b02 	vpop	{d8}
 8011ab6:	ec47 6b10 	vmov	d0, r6, r7
 8011aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011abc:	2200      	movs	r2, #0
 8011abe:	2300      	movs	r3, #0
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ef f814 	bl	8000af0 <__aeabi_dcmpeq>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d0f2      	beq.n	8011ab2 <pow+0xa2>
 8011acc:	eeb0 0a48 	vmov.f32	s0, s16
 8011ad0:	eef0 0a68 	vmov.f32	s1, s17
 8011ad4:	f000 f8e0 	bl	8011c98 <finite>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d0ea      	beq.n	8011ab2 <pow+0xa2>
 8011adc:	ec45 4b10 	vmov	d0, r4, r5
 8011ae0:	f000 f8da 	bl	8011c98 <finite>
 8011ae4:	e7c3      	b.n	8011a6e <pow+0x5e>
 8011ae6:	2600      	movs	r6, #0
 8011ae8:	4f00      	ldr	r7, [pc, #0]	@ (8011aec <pow+0xdc>)
 8011aea:	e7e2      	b.n	8011ab2 <pow+0xa2>
 8011aec:	3ff00000 	.word	0x3ff00000

08011af0 <sqrt>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	ec55 4b10 	vmov	r4, r5, d0
 8011af6:	ed2d 8b02 	vpush	{d8}
 8011afa:	f000 f8d9 	bl	8011cb0 <__ieee754_sqrt>
 8011afe:	4622      	mov	r2, r4
 8011b00:	462b      	mov	r3, r5
 8011b02:	4620      	mov	r0, r4
 8011b04:	4629      	mov	r1, r5
 8011b06:	eeb0 8a40 	vmov.f32	s16, s0
 8011b0a:	eef0 8a60 	vmov.f32	s17, s1
 8011b0e:	f7ef f821 	bl	8000b54 <__aeabi_dcmpun>
 8011b12:	b990      	cbnz	r0, 8011b3a <sqrt+0x4a>
 8011b14:	2200      	movs	r2, #0
 8011b16:	2300      	movs	r3, #0
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f7ee fff2 	bl	8000b04 <__aeabi_dcmplt>
 8011b20:	b158      	cbz	r0, 8011b3a <sqrt+0x4a>
 8011b22:	f7fc fc51 	bl	800e3c8 <__errno>
 8011b26:	2321      	movs	r3, #33	@ 0x21
 8011b28:	2200      	movs	r2, #0
 8011b2a:	6003      	str	r3, [r0, #0]
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	4610      	mov	r0, r2
 8011b30:	4619      	mov	r1, r3
 8011b32:	f7ee fe9f 	bl	8000874 <__aeabi_ddiv>
 8011b36:	ec41 0b18 	vmov	d8, r0, r1
 8011b3a:	eeb0 0a48 	vmov.f32	s0, s16
 8011b3e:	eef0 0a68 	vmov.f32	s1, s17
 8011b42:	ecbd 8b02 	vpop	{d8}
 8011b46:	bd38      	pop	{r3, r4, r5, pc}

08011b48 <cos>:
 8011b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b4a:	ec53 2b10 	vmov	r2, r3, d0
 8011b4e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011b52:	4825      	ldr	r0, [pc, #148]	@ (8011be8 <cos+0xa0>)
 8011b54:	4281      	cmp	r1, r0
 8011b56:	d806      	bhi.n	8011b66 <cos+0x1e>
 8011b58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011be0 <cos+0x98>
 8011b5c:	b005      	add	sp, #20
 8011b5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b62:	f000 b985 	b.w	8011e70 <__kernel_cos>
 8011b66:	4821      	ldr	r0, [pc, #132]	@ (8011bec <cos+0xa4>)
 8011b68:	4281      	cmp	r1, r0
 8011b6a:	d908      	bls.n	8011b7e <cos+0x36>
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	4619      	mov	r1, r3
 8011b70:	f7ee fb9e 	bl	80002b0 <__aeabi_dsub>
 8011b74:	ec41 0b10 	vmov	d0, r0, r1
 8011b78:	b005      	add	sp, #20
 8011b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b7e:	4668      	mov	r0, sp
 8011b80:	f001 f902 	bl	8012d88 <__ieee754_rem_pio2>
 8011b84:	f000 0003 	and.w	r0, r0, #3
 8011b88:	2801      	cmp	r0, #1
 8011b8a:	d00b      	beq.n	8011ba4 <cos+0x5c>
 8011b8c:	2802      	cmp	r0, #2
 8011b8e:	d015      	beq.n	8011bbc <cos+0x74>
 8011b90:	b9d8      	cbnz	r0, 8011bca <cos+0x82>
 8011b92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b96:	ed9d 0b00 	vldr	d0, [sp]
 8011b9a:	f000 f969 	bl	8011e70 <__kernel_cos>
 8011b9e:	ec51 0b10 	vmov	r0, r1, d0
 8011ba2:	e7e7      	b.n	8011b74 <cos+0x2c>
 8011ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ba8:	ed9d 0b00 	vldr	d0, [sp]
 8011bac:	f000 fa28 	bl	8012000 <__kernel_sin>
 8011bb0:	ec53 2b10 	vmov	r2, r3, d0
 8011bb4:	4610      	mov	r0, r2
 8011bb6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011bba:	e7db      	b.n	8011b74 <cos+0x2c>
 8011bbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bc0:	ed9d 0b00 	vldr	d0, [sp]
 8011bc4:	f000 f954 	bl	8011e70 <__kernel_cos>
 8011bc8:	e7f2      	b.n	8011bb0 <cos+0x68>
 8011bca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bce:	ed9d 0b00 	vldr	d0, [sp]
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	f000 fa14 	bl	8012000 <__kernel_sin>
 8011bd8:	e7e1      	b.n	8011b9e <cos+0x56>
 8011bda:	bf00      	nop
 8011bdc:	f3af 8000 	nop.w
	...
 8011be8:	3fe921fb 	.word	0x3fe921fb
 8011bec:	7fefffff 	.word	0x7fefffff

08011bf0 <sin>:
 8011bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bf2:	ec53 2b10 	vmov	r2, r3, d0
 8011bf6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011bfa:	4825      	ldr	r0, [pc, #148]	@ (8011c90 <sin+0xa0>)
 8011bfc:	4281      	cmp	r1, r0
 8011bfe:	d807      	bhi.n	8011c10 <sin+0x20>
 8011c00:	2000      	movs	r0, #0
 8011c02:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011c88 <sin+0x98>
 8011c06:	b005      	add	sp, #20
 8011c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c0c:	f000 b9f8 	b.w	8012000 <__kernel_sin>
 8011c10:	4820      	ldr	r0, [pc, #128]	@ (8011c94 <sin+0xa4>)
 8011c12:	4281      	cmp	r1, r0
 8011c14:	d908      	bls.n	8011c28 <sin+0x38>
 8011c16:	4610      	mov	r0, r2
 8011c18:	4619      	mov	r1, r3
 8011c1a:	f7ee fb49 	bl	80002b0 <__aeabi_dsub>
 8011c1e:	ec41 0b10 	vmov	d0, r0, r1
 8011c22:	b005      	add	sp, #20
 8011c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c28:	4668      	mov	r0, sp
 8011c2a:	f001 f8ad 	bl	8012d88 <__ieee754_rem_pio2>
 8011c2e:	f000 0003 	and.w	r0, r0, #3
 8011c32:	2801      	cmp	r0, #1
 8011c34:	d00c      	beq.n	8011c50 <sin+0x60>
 8011c36:	2802      	cmp	r0, #2
 8011c38:	d011      	beq.n	8011c5e <sin+0x6e>
 8011c3a:	b9e8      	cbnz	r0, 8011c78 <sin+0x88>
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c42:	ed9d 0b00 	vldr	d0, [sp]
 8011c46:	f000 f9db 	bl	8012000 <__kernel_sin>
 8011c4a:	ec51 0b10 	vmov	r0, r1, d0
 8011c4e:	e7e6      	b.n	8011c1e <sin+0x2e>
 8011c50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c54:	ed9d 0b00 	vldr	d0, [sp]
 8011c58:	f000 f90a 	bl	8011e70 <__kernel_cos>
 8011c5c:	e7f5      	b.n	8011c4a <sin+0x5a>
 8011c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c62:	ed9d 0b00 	vldr	d0, [sp]
 8011c66:	2001      	movs	r0, #1
 8011c68:	f000 f9ca 	bl	8012000 <__kernel_sin>
 8011c6c:	ec53 2b10 	vmov	r2, r3, d0
 8011c70:	4610      	mov	r0, r2
 8011c72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011c76:	e7d2      	b.n	8011c1e <sin+0x2e>
 8011c78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c7c:	ed9d 0b00 	vldr	d0, [sp]
 8011c80:	f000 f8f6 	bl	8011e70 <__kernel_cos>
 8011c84:	e7f2      	b.n	8011c6c <sin+0x7c>
 8011c86:	bf00      	nop
	...
 8011c90:	3fe921fb 	.word	0x3fe921fb
 8011c94:	7fefffff 	.word	0x7fefffff

08011c98 <finite>:
 8011c98:	b082      	sub	sp, #8
 8011c9a:	ed8d 0b00 	vstr	d0, [sp]
 8011c9e:	9801      	ldr	r0, [sp, #4]
 8011ca0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011ca4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011ca8:	0fc0      	lsrs	r0, r0, #31
 8011caa:	b002      	add	sp, #8
 8011cac:	4770      	bx	lr
	...

08011cb0 <__ieee754_sqrt>:
 8011cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8011e60 <__ieee754_sqrt+0x1b0>)
 8011cb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb6:	ec55 4b10 	vmov	r4, r5, d0
 8011cba:	43aa      	bics	r2, r5
 8011cbc:	462b      	mov	r3, r5
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	d110      	bne.n	8011ce4 <__ieee754_sqrt+0x34>
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	f7ee fcaa 	bl	8000620 <__aeabi_dmul>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	f7ee faee 	bl	80002b4 <__adddf3>
 8011cd8:	4604      	mov	r4, r0
 8011cda:	460d      	mov	r5, r1
 8011cdc:	ec45 4b10 	vmov	d0, r4, r5
 8011ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce4:	2d00      	cmp	r5, #0
 8011ce6:	dc0e      	bgt.n	8011d06 <__ieee754_sqrt+0x56>
 8011ce8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011cec:	4322      	orrs	r2, r4
 8011cee:	d0f5      	beq.n	8011cdc <__ieee754_sqrt+0x2c>
 8011cf0:	b19d      	cbz	r5, 8011d1a <__ieee754_sqrt+0x6a>
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	f7ee fada 	bl	80002b0 <__aeabi_dsub>
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	460b      	mov	r3, r1
 8011d00:	f7ee fdb8 	bl	8000874 <__aeabi_ddiv>
 8011d04:	e7e8      	b.n	8011cd8 <__ieee754_sqrt+0x28>
 8011d06:	152a      	asrs	r2, r5, #20
 8011d08:	d115      	bne.n	8011d36 <__ieee754_sqrt+0x86>
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e009      	b.n	8011d22 <__ieee754_sqrt+0x72>
 8011d0e:	0acb      	lsrs	r3, r1, #11
 8011d10:	3a15      	subs	r2, #21
 8011d12:	0549      	lsls	r1, r1, #21
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d0fa      	beq.n	8011d0e <__ieee754_sqrt+0x5e>
 8011d18:	e7f7      	b.n	8011d0a <__ieee754_sqrt+0x5a>
 8011d1a:	462a      	mov	r2, r5
 8011d1c:	e7fa      	b.n	8011d14 <__ieee754_sqrt+0x64>
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	3001      	adds	r0, #1
 8011d22:	02dc      	lsls	r4, r3, #11
 8011d24:	d5fb      	bpl.n	8011d1e <__ieee754_sqrt+0x6e>
 8011d26:	1e44      	subs	r4, r0, #1
 8011d28:	1b12      	subs	r2, r2, r4
 8011d2a:	f1c0 0420 	rsb	r4, r0, #32
 8011d2e:	fa21 f404 	lsr.w	r4, r1, r4
 8011d32:	4081      	lsls	r1, r0
 8011d34:	4323      	orrs	r3, r4
 8011d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d3a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011d3e:	07d2      	lsls	r2, r2, #31
 8011d40:	f04f 0600 	mov.w	r6, #0
 8011d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d48:	ea4f 0565 	mov.w	r5, r5, asr #1
 8011d4c:	f04f 0016 	mov.w	r0, #22
 8011d50:	4632      	mov	r2, r6
 8011d52:	bf58      	it	pl
 8011d54:	005b      	lslpl	r3, r3, #1
 8011d56:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011d5a:	bf5c      	itt	pl
 8011d5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011d60:	0049      	lslpl	r1, r1, #1
 8011d62:	005b      	lsls	r3, r3, #1
 8011d64:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011d68:	0049      	lsls	r1, r1, #1
 8011d6a:	1917      	adds	r7, r2, r4
 8011d6c:	429f      	cmp	r7, r3
 8011d6e:	bfde      	ittt	le
 8011d70:	193a      	addle	r2, r7, r4
 8011d72:	1bdb      	suble	r3, r3, r7
 8011d74:	1936      	addle	r6, r6, r4
 8011d76:	0fcf      	lsrs	r7, r1, #31
 8011d78:	3801      	subs	r0, #1
 8011d7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011d82:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011d86:	d1f0      	bne.n	8011d6a <__ieee754_sqrt+0xba>
 8011d88:	4604      	mov	r4, r0
 8011d8a:	2720      	movs	r7, #32
 8011d8c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011d90:	429a      	cmp	r2, r3
 8011d92:	eb00 0e0c 	add.w	lr, r0, ip
 8011d96:	db02      	blt.n	8011d9e <__ieee754_sqrt+0xee>
 8011d98:	d113      	bne.n	8011dc2 <__ieee754_sqrt+0x112>
 8011d9a:	458e      	cmp	lr, r1
 8011d9c:	d811      	bhi.n	8011dc2 <__ieee754_sqrt+0x112>
 8011d9e:	f1be 0f00 	cmp.w	lr, #0
 8011da2:	eb0e 000c 	add.w	r0, lr, ip
 8011da6:	da43      	bge.n	8011e30 <__ieee754_sqrt+0x180>
 8011da8:	2800      	cmp	r0, #0
 8011daa:	db41      	blt.n	8011e30 <__ieee754_sqrt+0x180>
 8011dac:	f102 0801 	add.w	r8, r2, #1
 8011db0:	1a9b      	subs	r3, r3, r2
 8011db2:	458e      	cmp	lr, r1
 8011db4:	4464      	add	r4, ip
 8011db6:	eba1 010e 	sub.w	r1, r1, lr
 8011dba:	bf88      	it	hi
 8011dbc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011dc6:	3f01      	subs	r7, #1
 8011dc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011dcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011dd0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011dd4:	d1dc      	bne.n	8011d90 <__ieee754_sqrt+0xe0>
 8011dd6:	4319      	orrs	r1, r3
 8011dd8:	d01b      	beq.n	8011e12 <__ieee754_sqrt+0x162>
 8011dda:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8011e64 <__ieee754_sqrt+0x1b4>
 8011dde:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8011e68 <__ieee754_sqrt+0x1b8>
 8011de2:	e9da 0100 	ldrd	r0, r1, [sl]
 8011de6:	e9db 2300 	ldrd	r2, r3, [fp]
 8011dea:	e9da 8900 	ldrd	r8, r9, [sl]
 8011dee:	f7ee fa5f 	bl	80002b0 <__aeabi_dsub>
 8011df2:	4602      	mov	r2, r0
 8011df4:	460b      	mov	r3, r1
 8011df6:	4640      	mov	r0, r8
 8011df8:	4649      	mov	r1, r9
 8011dfa:	f7ee fe8d 	bl	8000b18 <__aeabi_dcmple>
 8011dfe:	b140      	cbz	r0, 8011e12 <__ieee754_sqrt+0x162>
 8011e00:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011e04:	e9da 0100 	ldrd	r0, r1, [sl]
 8011e08:	e9db 2300 	ldrd	r2, r3, [fp]
 8011e0c:	d112      	bne.n	8011e34 <__ieee754_sqrt+0x184>
 8011e0e:	3601      	adds	r6, #1
 8011e10:	463c      	mov	r4, r7
 8011e12:	1072      	asrs	r2, r6, #1
 8011e14:	07f1      	lsls	r1, r6, #31
 8011e16:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8011e1a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011e1e:	bf48      	it	mi
 8011e20:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011e24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011e28:	4618      	mov	r0, r3
 8011e2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011e2e:	e753      	b.n	8011cd8 <__ieee754_sqrt+0x28>
 8011e30:	4690      	mov	r8, r2
 8011e32:	e7bd      	b.n	8011db0 <__ieee754_sqrt+0x100>
 8011e34:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e38:	f7ee fa3c 	bl	80002b4 <__adddf3>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	460b      	mov	r3, r1
 8011e40:	4640      	mov	r0, r8
 8011e42:	4649      	mov	r1, r9
 8011e44:	f7ee fe5e 	bl	8000b04 <__aeabi_dcmplt>
 8011e48:	b128      	cbz	r0, 8011e56 <__ieee754_sqrt+0x1a6>
 8011e4a:	1ca0      	adds	r0, r4, #2
 8011e4c:	f104 0402 	add.w	r4, r4, #2
 8011e50:	bf08      	it	eq
 8011e52:	3601      	addeq	r6, #1
 8011e54:	e7dd      	b.n	8011e12 <__ieee754_sqrt+0x162>
 8011e56:	1c63      	adds	r3, r4, #1
 8011e58:	f023 0401 	bic.w	r4, r3, #1
 8011e5c:	e7d9      	b.n	8011e12 <__ieee754_sqrt+0x162>
 8011e5e:	bf00      	nop
 8011e60:	7ff00000 	.word	0x7ff00000
 8011e64:	200001f8 	.word	0x200001f8
 8011e68:	200001f0 	.word	0x200001f0
 8011e6c:	00000000 	.word	0x00000000

08011e70 <__kernel_cos>:
 8011e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	ec57 6b10 	vmov	r6, r7, d0
 8011e78:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011e7c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011e80:	ed8d 1b00 	vstr	d1, [sp]
 8011e84:	d206      	bcs.n	8011e94 <__kernel_cos+0x24>
 8011e86:	4630      	mov	r0, r6
 8011e88:	4639      	mov	r1, r7
 8011e8a:	f7ee fe79 	bl	8000b80 <__aeabi_d2iz>
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	f000 8088 	beq.w	8011fa4 <__kernel_cos+0x134>
 8011e94:	4632      	mov	r2, r6
 8011e96:	463b      	mov	r3, r7
 8011e98:	4630      	mov	r0, r6
 8011e9a:	4639      	mov	r1, r7
 8011e9c:	f7ee fbc0 	bl	8000620 <__aeabi_dmul>
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	460d      	mov	r5, r1
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	4b50      	ldr	r3, [pc, #320]	@ (8011fe8 <__kernel_cos+0x178>)
 8011ea8:	f7ee fbba 	bl	8000620 <__aeabi_dmul>
 8011eac:	4682      	mov	sl, r0
 8011eae:	468b      	mov	fp, r1
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	4629      	mov	r1, r5
 8011eb4:	a33e      	add	r3, pc, #248	@ (adr r3, 8011fb0 <__kernel_cos+0x140>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	f7ee fbb1 	bl	8000620 <__aeabi_dmul>
 8011ebe:	a33e      	add	r3, pc, #248	@ (adr r3, 8011fb8 <__kernel_cos+0x148>)
 8011ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec4:	f7ee f9f6 	bl	80002b4 <__adddf3>
 8011ec8:	4622      	mov	r2, r4
 8011eca:	462b      	mov	r3, r5
 8011ecc:	f7ee fba8 	bl	8000620 <__aeabi_dmul>
 8011ed0:	a33b      	add	r3, pc, #236	@ (adr r3, 8011fc0 <__kernel_cos+0x150>)
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	f7ee f9eb 	bl	80002b0 <__aeabi_dsub>
 8011eda:	4622      	mov	r2, r4
 8011edc:	462b      	mov	r3, r5
 8011ede:	f7ee fb9f 	bl	8000620 <__aeabi_dmul>
 8011ee2:	a339      	add	r3, pc, #228	@ (adr r3, 8011fc8 <__kernel_cos+0x158>)
 8011ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee8:	f7ee f9e4 	bl	80002b4 <__adddf3>
 8011eec:	4622      	mov	r2, r4
 8011eee:	462b      	mov	r3, r5
 8011ef0:	f7ee fb96 	bl	8000620 <__aeabi_dmul>
 8011ef4:	a336      	add	r3, pc, #216	@ (adr r3, 8011fd0 <__kernel_cos+0x160>)
 8011ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efa:	f7ee f9d9 	bl	80002b0 <__aeabi_dsub>
 8011efe:	4622      	mov	r2, r4
 8011f00:	462b      	mov	r3, r5
 8011f02:	f7ee fb8d 	bl	8000620 <__aeabi_dmul>
 8011f06:	a334      	add	r3, pc, #208	@ (adr r3, 8011fd8 <__kernel_cos+0x168>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	f7ee f9d2 	bl	80002b4 <__adddf3>
 8011f10:	4622      	mov	r2, r4
 8011f12:	462b      	mov	r3, r5
 8011f14:	f7ee fb84 	bl	8000620 <__aeabi_dmul>
 8011f18:	4622      	mov	r2, r4
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f7ee fb80 	bl	8000620 <__aeabi_dmul>
 8011f20:	4604      	mov	r4, r0
 8011f22:	460d      	mov	r5, r1
 8011f24:	4630      	mov	r0, r6
 8011f26:	4639      	mov	r1, r7
 8011f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f2c:	f7ee fb78 	bl	8000620 <__aeabi_dmul>
 8011f30:	460b      	mov	r3, r1
 8011f32:	4602      	mov	r2, r0
 8011f34:	4629      	mov	r1, r5
 8011f36:	4620      	mov	r0, r4
 8011f38:	f7ee f9ba 	bl	80002b0 <__aeabi_dsub>
 8011f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8011fec <__kernel_cos+0x17c>)
 8011f3e:	4606      	mov	r6, r0
 8011f40:	460f      	mov	r7, r1
 8011f42:	4598      	cmp	r8, r3
 8011f44:	d810      	bhi.n	8011f68 <__kernel_cos+0xf8>
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	4650      	mov	r0, sl
 8011f4c:	4659      	mov	r1, fp
 8011f4e:	f7ee f9af 	bl	80002b0 <__aeabi_dsub>
 8011f52:	4602      	mov	r2, r0
 8011f54:	460b      	mov	r3, r1
 8011f56:	2000      	movs	r0, #0
 8011f58:	4925      	ldr	r1, [pc, #148]	@ (8011ff0 <__kernel_cos+0x180>)
 8011f5a:	f7ee f9a9 	bl	80002b0 <__aeabi_dsub>
 8011f5e:	ec41 0b10 	vmov	d0, r0, r1
 8011f62:	b003      	add	sp, #12
 8011f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	4b22      	ldr	r3, [pc, #136]	@ (8011ff4 <__kernel_cos+0x184>)
 8011f6a:	2400      	movs	r4, #0
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	4920      	ldr	r1, [pc, #128]	@ (8011ff0 <__kernel_cos+0x180>)
 8011f70:	4598      	cmp	r8, r3
 8011f72:	4622      	mov	r2, r4
 8011f74:	bf94      	ite	ls
 8011f76:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011f7a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8011ff8 <__kernel_cos+0x188>)
 8011f7c:	462b      	mov	r3, r5
 8011f7e:	f7ee f997 	bl	80002b0 <__aeabi_dsub>
 8011f82:	4622      	mov	r2, r4
 8011f84:	4680      	mov	r8, r0
 8011f86:	4689      	mov	r9, r1
 8011f88:	462b      	mov	r3, r5
 8011f8a:	4650      	mov	r0, sl
 8011f8c:	4659      	mov	r1, fp
 8011f8e:	f7ee f98f 	bl	80002b0 <__aeabi_dsub>
 8011f92:	4632      	mov	r2, r6
 8011f94:	463b      	mov	r3, r7
 8011f96:	f7ee f98b 	bl	80002b0 <__aeabi_dsub>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4640      	mov	r0, r8
 8011fa0:	4649      	mov	r1, r9
 8011fa2:	e7da      	b.n	8011f5a <__kernel_cos+0xea>
 8011fa4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011fe0 <__kernel_cos+0x170>
 8011fa8:	e7db      	b.n	8011f62 <__kernel_cos+0xf2>
 8011faa:	bf00      	nop
 8011fac:	f3af 8000 	nop.w
 8011fb0:	be8838d4 	.word	0xbe8838d4
 8011fb4:	bda8fae9 	.word	0xbda8fae9
 8011fb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011fbc:	3e21ee9e 	.word	0x3e21ee9e
 8011fc0:	809c52ad 	.word	0x809c52ad
 8011fc4:	3e927e4f 	.word	0x3e927e4f
 8011fc8:	19cb1590 	.word	0x19cb1590
 8011fcc:	3efa01a0 	.word	0x3efa01a0
 8011fd0:	16c15177 	.word	0x16c15177
 8011fd4:	3f56c16c 	.word	0x3f56c16c
 8011fd8:	5555554c 	.word	0x5555554c
 8011fdc:	3fa55555 	.word	0x3fa55555
 8011fe0:	00000000 	.word	0x00000000
 8011fe4:	3ff00000 	.word	0x3ff00000
 8011fe8:	3fe00000 	.word	0x3fe00000
 8011fec:	3fd33332 	.word	0x3fd33332
 8011ff0:	3ff00000 	.word	0x3ff00000
 8011ff4:	3fe90000 	.word	0x3fe90000
 8011ff8:	3fd20000 	.word	0x3fd20000
 8011ffc:	00000000 	.word	0x00000000

08012000 <__kernel_sin>:
 8012000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012004:	ec55 4b10 	vmov	r4, r5, d0
 8012008:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801200c:	b085      	sub	sp, #20
 801200e:	4680      	mov	r8, r0
 8012010:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012014:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012018:	d205      	bcs.n	8012026 <__kernel_sin+0x26>
 801201a:	4620      	mov	r0, r4
 801201c:	4629      	mov	r1, r5
 801201e:	f7ee fdaf 	bl	8000b80 <__aeabi_d2iz>
 8012022:	2800      	cmp	r0, #0
 8012024:	d052      	beq.n	80120cc <__kernel_sin+0xcc>
 8012026:	4622      	mov	r2, r4
 8012028:	462b      	mov	r3, r5
 801202a:	4620      	mov	r0, r4
 801202c:	4629      	mov	r1, r5
 801202e:	f7ee faf7 	bl	8000620 <__aeabi_dmul>
 8012032:	4682      	mov	sl, r0
 8012034:	468b      	mov	fp, r1
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4620      	mov	r0, r4
 801203c:	4629      	mov	r1, r5
 801203e:	f7ee faef 	bl	8000620 <__aeabi_dmul>
 8012042:	a342      	add	r3, pc, #264	@ (adr r3, 801214c <__kernel_sin+0x14c>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	e9cd 0100 	strd	r0, r1, [sp]
 801204c:	4650      	mov	r0, sl
 801204e:	4659      	mov	r1, fp
 8012050:	f7ee fae6 	bl	8000620 <__aeabi_dmul>
 8012054:	a33f      	add	r3, pc, #252	@ (adr r3, 8012154 <__kernel_sin+0x154>)
 8012056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205a:	f7ee f929 	bl	80002b0 <__aeabi_dsub>
 801205e:	4652      	mov	r2, sl
 8012060:	465b      	mov	r3, fp
 8012062:	f7ee fadd 	bl	8000620 <__aeabi_dmul>
 8012066:	a33d      	add	r3, pc, #244	@ (adr r3, 801215c <__kernel_sin+0x15c>)
 8012068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206c:	f7ee f922 	bl	80002b4 <__adddf3>
 8012070:	4652      	mov	r2, sl
 8012072:	465b      	mov	r3, fp
 8012074:	f7ee fad4 	bl	8000620 <__aeabi_dmul>
 8012078:	a33a      	add	r3, pc, #232	@ (adr r3, 8012164 <__kernel_sin+0x164>)
 801207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207e:	f7ee f917 	bl	80002b0 <__aeabi_dsub>
 8012082:	4652      	mov	r2, sl
 8012084:	465b      	mov	r3, fp
 8012086:	f7ee facb 	bl	8000620 <__aeabi_dmul>
 801208a:	a338      	add	r3, pc, #224	@ (adr r3, 801216c <__kernel_sin+0x16c>)
 801208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012090:	f7ee f910 	bl	80002b4 <__adddf3>
 8012094:	4606      	mov	r6, r0
 8012096:	460f      	mov	r7, r1
 8012098:	f1b8 0f00 	cmp.w	r8, #0
 801209c:	d11b      	bne.n	80120d6 <__kernel_sin+0xd6>
 801209e:	4602      	mov	r2, r0
 80120a0:	460b      	mov	r3, r1
 80120a2:	4650      	mov	r0, sl
 80120a4:	4659      	mov	r1, fp
 80120a6:	f7ee fabb 	bl	8000620 <__aeabi_dmul>
 80120aa:	a325      	add	r3, pc, #148	@ (adr r3, 8012140 <__kernel_sin+0x140>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee f8fe 	bl	80002b0 <__aeabi_dsub>
 80120b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120b8:	f7ee fab2 	bl	8000620 <__aeabi_dmul>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	4620      	mov	r0, r4
 80120c2:	4629      	mov	r1, r5
 80120c4:	f7ee f8f6 	bl	80002b4 <__adddf3>
 80120c8:	4604      	mov	r4, r0
 80120ca:	460d      	mov	r5, r1
 80120cc:	ec45 4b10 	vmov	d0, r4, r5
 80120d0:	b005      	add	sp, #20
 80120d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d6:	2200      	movs	r2, #0
 80120d8:	4b1b      	ldr	r3, [pc, #108]	@ (8012148 <__kernel_sin+0x148>)
 80120da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120de:	f7ee fa9f 	bl	8000620 <__aeabi_dmul>
 80120e2:	4680      	mov	r8, r0
 80120e4:	4689      	mov	r9, r1
 80120e6:	4632      	mov	r2, r6
 80120e8:	463b      	mov	r3, r7
 80120ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120ee:	f7ee fa97 	bl	8000620 <__aeabi_dmul>
 80120f2:	4602      	mov	r2, r0
 80120f4:	460b      	mov	r3, r1
 80120f6:	4640      	mov	r0, r8
 80120f8:	4649      	mov	r1, r9
 80120fa:	f7ee f8d9 	bl	80002b0 <__aeabi_dsub>
 80120fe:	4652      	mov	r2, sl
 8012100:	465b      	mov	r3, fp
 8012102:	f7ee fa8d 	bl	8000620 <__aeabi_dmul>
 8012106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801210a:	f7ee f8d1 	bl	80002b0 <__aeabi_dsub>
 801210e:	4606      	mov	r6, r0
 8012110:	460f      	mov	r7, r1
 8012112:	a30b      	add	r3, pc, #44	@ (adr r3, 8012140 <__kernel_sin+0x140>)
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801211c:	f7ee fa80 	bl	8000620 <__aeabi_dmul>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	4630      	mov	r0, r6
 8012126:	4639      	mov	r1, r7
 8012128:	f7ee f8c4 	bl	80002b4 <__adddf3>
 801212c:	4602      	mov	r2, r0
 801212e:	460b      	mov	r3, r1
 8012130:	4620      	mov	r0, r4
 8012132:	4629      	mov	r1, r5
 8012134:	f7ee f8bc 	bl	80002b0 <__aeabi_dsub>
 8012138:	e7c6      	b.n	80120c8 <__kernel_sin+0xc8>
 801213a:	bf00      	nop
 801213c:	f3af 8000 	nop.w
 8012140:	55555549 	.word	0x55555549
 8012144:	3fc55555 	.word	0x3fc55555
 8012148:	3fe00000 	.word	0x3fe00000
 801214c:	5acfd57c 	.word	0x5acfd57c
 8012150:	3de5d93a 	.word	0x3de5d93a
 8012154:	8a2b9ceb 	.word	0x8a2b9ceb
 8012158:	3e5ae5e6 	.word	0x3e5ae5e6
 801215c:	57b1fe7d 	.word	0x57b1fe7d
 8012160:	3ec71de3 	.word	0x3ec71de3
 8012164:	19c161d5 	.word	0x19c161d5
 8012168:	3f2a01a0 	.word	0x3f2a01a0
 801216c:	1110f8a6 	.word	0x1110f8a6
 8012170:	3f811111 	.word	0x3f811111
 8012174:	00000000 	.word	0x00000000

08012178 <__ieee754_atan2>:
 8012178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801217c:	ec57 6b11 	vmov	r6, r7, d1
 8012180:	4273      	negs	r3, r6
 8012182:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8012186:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 8012300 <__ieee754_atan2+0x188>
 801218a:	4635      	mov	r5, r6
 801218c:	4333      	orrs	r3, r6
 801218e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012192:	4543      	cmp	r3, r8
 8012194:	ec51 0b10 	vmov	r0, r1, d0
 8012198:	d809      	bhi.n	80121ae <__ieee754_atan2+0x36>
 801219a:	4244      	negs	r4, r0
 801219c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80121a0:	468e      	mov	lr, r1
 80121a2:	4681      	mov	r9, r0
 80121a4:	4304      	orrs	r4, r0
 80121a6:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80121aa:	4544      	cmp	r4, r8
 80121ac:	d907      	bls.n	80121be <__ieee754_atan2+0x46>
 80121ae:	4632      	mov	r2, r6
 80121b0:	463b      	mov	r3, r7
 80121b2:	f7ee f87f 	bl	80002b4 <__adddf3>
 80121b6:	ec41 0b10 	vmov	d0, r0, r1
 80121ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80121c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80121c6:	4334      	orrs	r4, r6
 80121c8:	d103      	bne.n	80121d2 <__ieee754_atan2+0x5a>
 80121ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ce:	f000 bfd7 	b.w	8013180 <atan>
 80121d2:	17bc      	asrs	r4, r7, #30
 80121d4:	ea53 0909 	orrs.w	r9, r3, r9
 80121d8:	f004 0402 	and.w	r4, r4, #2
 80121dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80121e0:	d107      	bne.n	80121f2 <__ieee754_atan2+0x7a>
 80121e2:	2c02      	cmp	r4, #2
 80121e4:	d05f      	beq.n	80122a6 <__ieee754_atan2+0x12e>
 80121e6:	2c03      	cmp	r4, #3
 80121e8:	d1e5      	bne.n	80121b6 <__ieee754_atan2+0x3e>
 80121ea:	a141      	add	r1, pc, #260	@ (adr r1, 80122f0 <__ieee754_atan2+0x178>)
 80121ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121f0:	e7e1      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80121f2:	4315      	orrs	r5, r2
 80121f4:	d106      	bne.n	8012204 <__ieee754_atan2+0x8c>
 80121f6:	f1be 0f00 	cmp.w	lr, #0
 80121fa:	da5f      	bge.n	80122bc <__ieee754_atan2+0x144>
 80121fc:	a13e      	add	r1, pc, #248	@ (adr r1, 80122f8 <__ieee754_atan2+0x180>)
 80121fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012202:	e7d8      	b.n	80121b6 <__ieee754_atan2+0x3e>
 8012204:	4542      	cmp	r2, r8
 8012206:	d10f      	bne.n	8012228 <__ieee754_atan2+0xb0>
 8012208:	4293      	cmp	r3, r2
 801220a:	f104 34ff 	add.w	r4, r4, #4294967295
 801220e:	d107      	bne.n	8012220 <__ieee754_atan2+0xa8>
 8012210:	2c02      	cmp	r4, #2
 8012212:	d84c      	bhi.n	80122ae <__ieee754_atan2+0x136>
 8012214:	4b34      	ldr	r3, [pc, #208]	@ (80122e8 <__ieee754_atan2+0x170>)
 8012216:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801221a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801221e:	e7ca      	b.n	80121b6 <__ieee754_atan2+0x3e>
 8012220:	2c02      	cmp	r4, #2
 8012222:	d848      	bhi.n	80122b6 <__ieee754_atan2+0x13e>
 8012224:	4b31      	ldr	r3, [pc, #196]	@ (80122ec <__ieee754_atan2+0x174>)
 8012226:	e7f6      	b.n	8012216 <__ieee754_atan2+0x9e>
 8012228:	4543      	cmp	r3, r8
 801222a:	d0e4      	beq.n	80121f6 <__ieee754_atan2+0x7e>
 801222c:	1a9b      	subs	r3, r3, r2
 801222e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012232:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012236:	da1e      	bge.n	8012276 <__ieee754_atan2+0xfe>
 8012238:	2f00      	cmp	r7, #0
 801223a:	da01      	bge.n	8012240 <__ieee754_atan2+0xc8>
 801223c:	323c      	adds	r2, #60	@ 0x3c
 801223e:	db1e      	blt.n	801227e <__ieee754_atan2+0x106>
 8012240:	4632      	mov	r2, r6
 8012242:	463b      	mov	r3, r7
 8012244:	f7ee fb16 	bl	8000874 <__aeabi_ddiv>
 8012248:	ec41 0b10 	vmov	d0, r0, r1
 801224c:	f001 f930 	bl	80134b0 <fabs>
 8012250:	f000 ff96 	bl	8013180 <atan>
 8012254:	ec51 0b10 	vmov	r0, r1, d0
 8012258:	2c01      	cmp	r4, #1
 801225a:	d013      	beq.n	8012284 <__ieee754_atan2+0x10c>
 801225c:	2c02      	cmp	r4, #2
 801225e:	d015      	beq.n	801228c <__ieee754_atan2+0x114>
 8012260:	2c00      	cmp	r4, #0
 8012262:	d0a8      	beq.n	80121b6 <__ieee754_atan2+0x3e>
 8012264:	a318      	add	r3, pc, #96	@ (adr r3, 80122c8 <__ieee754_atan2+0x150>)
 8012266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226a:	f7ee f821 	bl	80002b0 <__aeabi_dsub>
 801226e:	a318      	add	r3, pc, #96	@ (adr r3, 80122d0 <__ieee754_atan2+0x158>)
 8012270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012274:	e014      	b.n	80122a0 <__ieee754_atan2+0x128>
 8012276:	a118      	add	r1, pc, #96	@ (adr r1, 80122d8 <__ieee754_atan2+0x160>)
 8012278:	e9d1 0100 	ldrd	r0, r1, [r1]
 801227c:	e7ec      	b.n	8012258 <__ieee754_atan2+0xe0>
 801227e:	2000      	movs	r0, #0
 8012280:	2100      	movs	r1, #0
 8012282:	e7e9      	b.n	8012258 <__ieee754_atan2+0xe0>
 8012284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012288:	4619      	mov	r1, r3
 801228a:	e794      	b.n	80121b6 <__ieee754_atan2+0x3e>
 801228c:	a30e      	add	r3, pc, #56	@ (adr r3, 80122c8 <__ieee754_atan2+0x150>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	f7ee f80d 	bl	80002b0 <__aeabi_dsub>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	a10d      	add	r1, pc, #52	@ (adr r1, 80122d0 <__ieee754_atan2+0x158>)
 801229c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122a0:	f7ee f806 	bl	80002b0 <__aeabi_dsub>
 80122a4:	e787      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80122a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80122d0 <__ieee754_atan2+0x158>)
 80122a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122ac:	e783      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80122ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80122e0 <__ieee754_atan2+0x168>)
 80122b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122b4:	e77f      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80122b6:	2000      	movs	r0, #0
 80122b8:	2100      	movs	r1, #0
 80122ba:	e77c      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80122bc:	a106      	add	r1, pc, #24	@ (adr r1, 80122d8 <__ieee754_atan2+0x160>)
 80122be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122c2:	e778      	b.n	80121b6 <__ieee754_atan2+0x3e>
 80122c4:	f3af 8000 	nop.w
 80122c8:	33145c07 	.word	0x33145c07
 80122cc:	3ca1a626 	.word	0x3ca1a626
 80122d0:	54442d18 	.word	0x54442d18
 80122d4:	400921fb 	.word	0x400921fb
 80122d8:	54442d18 	.word	0x54442d18
 80122dc:	3ff921fb 	.word	0x3ff921fb
 80122e0:	54442d18 	.word	0x54442d18
 80122e4:	3fe921fb 	.word	0x3fe921fb
 80122e8:	08014950 	.word	0x08014950
 80122ec:	08014938 	.word	0x08014938
 80122f0:	54442d18 	.word	0x54442d18
 80122f4:	c00921fb 	.word	0xc00921fb
 80122f8:	54442d18 	.word	0x54442d18
 80122fc:	bff921fb 	.word	0xbff921fb
 8012300:	7ff00000 	.word	0x7ff00000
 8012304:	00000000 	.word	0x00000000

08012308 <__ieee754_pow>:
 8012308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	b091      	sub	sp, #68	@ 0x44
 801230e:	ed8d 1b00 	vstr	d1, [sp]
 8012312:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012316:	ec57 6b10 	vmov	r6, r7, d0
 801231a:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801231e:	ea5a 0001 	orrs.w	r0, sl, r1
 8012322:	d113      	bne.n	801234c <__ieee754_pow+0x44>
 8012324:	19b3      	adds	r3, r6, r6
 8012326:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801232a:	4152      	adcs	r2, r2
 801232c:	4298      	cmp	r0, r3
 801232e:	4b96      	ldr	r3, [pc, #600]	@ (8012588 <__ieee754_pow+0x280>)
 8012330:	4193      	sbcs	r3, r2
 8012332:	f080 84e7 	bcs.w	8012d04 <__ieee754_pow+0x9fc>
 8012336:	4630      	mov	r0, r6
 8012338:	4639      	mov	r1, r7
 801233a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801233e:	f7ed ffb9 	bl	80002b4 <__adddf3>
 8012342:	ec41 0b10 	vmov	d0, r0, r1
 8012346:	b011      	add	sp, #68	@ 0x44
 8012348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012350:	4a8e      	ldr	r2, [pc, #568]	@ (801258c <__ieee754_pow+0x284>)
 8012352:	463d      	mov	r5, r7
 8012354:	4633      	mov	r3, r6
 8012356:	4590      	cmp	r8, r2
 8012358:	d806      	bhi.n	8012368 <__ieee754_pow+0x60>
 801235a:	d101      	bne.n	8012360 <__ieee754_pow+0x58>
 801235c:	2e00      	cmp	r6, #0
 801235e:	d1ea      	bne.n	8012336 <__ieee754_pow+0x2e>
 8012360:	4592      	cmp	sl, r2
 8012362:	d801      	bhi.n	8012368 <__ieee754_pow+0x60>
 8012364:	d10e      	bne.n	8012384 <__ieee754_pow+0x7c>
 8012366:	b169      	cbz	r1, 8012384 <__ieee754_pow+0x7c>
 8012368:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801236c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012370:	431d      	orrs	r5, r3
 8012372:	d1e0      	bne.n	8012336 <__ieee754_pow+0x2e>
 8012374:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012378:	18db      	adds	r3, r3, r3
 801237a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801237e:	4152      	adcs	r2, r2
 8012380:	429d      	cmp	r5, r3
 8012382:	e7d4      	b.n	801232e <__ieee754_pow+0x26>
 8012384:	2d00      	cmp	r5, #0
 8012386:	46c3      	mov	fp, r8
 8012388:	da3a      	bge.n	8012400 <__ieee754_pow+0xf8>
 801238a:	4a81      	ldr	r2, [pc, #516]	@ (8012590 <__ieee754_pow+0x288>)
 801238c:	4592      	cmp	sl, r2
 801238e:	d84d      	bhi.n	801242c <__ieee754_pow+0x124>
 8012390:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012394:	4592      	cmp	sl, r2
 8012396:	f240 84c4 	bls.w	8012d22 <__ieee754_pow+0xa1a>
 801239a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801239e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80123a2:	2a14      	cmp	r2, #20
 80123a4:	dd0f      	ble.n	80123c6 <__ieee754_pow+0xbe>
 80123a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80123aa:	fa21 f402 	lsr.w	r4, r1, r2
 80123ae:	fa04 f202 	lsl.w	r2, r4, r2
 80123b2:	428a      	cmp	r2, r1
 80123b4:	f040 84b5 	bne.w	8012d22 <__ieee754_pow+0xa1a>
 80123b8:	f004 0401 	and.w	r4, r4, #1
 80123bc:	f1c4 0402 	rsb	r4, r4, #2
 80123c0:	2900      	cmp	r1, #0
 80123c2:	d158      	bne.n	8012476 <__ieee754_pow+0x16e>
 80123c4:	e00e      	b.n	80123e4 <__ieee754_pow+0xdc>
 80123c6:	2900      	cmp	r1, #0
 80123c8:	d154      	bne.n	8012474 <__ieee754_pow+0x16c>
 80123ca:	f1c2 0214 	rsb	r2, r2, #20
 80123ce:	fa4a f402 	asr.w	r4, sl, r2
 80123d2:	fa04 f202 	lsl.w	r2, r4, r2
 80123d6:	4552      	cmp	r2, sl
 80123d8:	f040 84a0 	bne.w	8012d1c <__ieee754_pow+0xa14>
 80123dc:	f004 0401 	and.w	r4, r4, #1
 80123e0:	f1c4 0402 	rsb	r4, r4, #2
 80123e4:	4a6b      	ldr	r2, [pc, #428]	@ (8012594 <__ieee754_pow+0x28c>)
 80123e6:	4592      	cmp	sl, r2
 80123e8:	d12e      	bne.n	8012448 <__ieee754_pow+0x140>
 80123ea:	f1b9 0f00 	cmp.w	r9, #0
 80123ee:	f280 8491 	bge.w	8012d14 <__ieee754_pow+0xa0c>
 80123f2:	4632      	mov	r2, r6
 80123f4:	463b      	mov	r3, r7
 80123f6:	2000      	movs	r0, #0
 80123f8:	4966      	ldr	r1, [pc, #408]	@ (8012594 <__ieee754_pow+0x28c>)
 80123fa:	f7ee fa3b 	bl	8000874 <__aeabi_ddiv>
 80123fe:	e7a0      	b.n	8012342 <__ieee754_pow+0x3a>
 8012400:	2400      	movs	r4, #0
 8012402:	bbc1      	cbnz	r1, 8012476 <__ieee754_pow+0x16e>
 8012404:	4a61      	ldr	r2, [pc, #388]	@ (801258c <__ieee754_pow+0x284>)
 8012406:	4592      	cmp	sl, r2
 8012408:	d1ec      	bne.n	80123e4 <__ieee754_pow+0xdc>
 801240a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801240e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012412:	431a      	orrs	r2, r3
 8012414:	f000 8476 	beq.w	8012d04 <__ieee754_pow+0x9fc>
 8012418:	4b5f      	ldr	r3, [pc, #380]	@ (8012598 <__ieee754_pow+0x290>)
 801241a:	4598      	cmp	r8, r3
 801241c:	d908      	bls.n	8012430 <__ieee754_pow+0x128>
 801241e:	f1b9 0f00 	cmp.w	r9, #0
 8012422:	f2c0 8473 	blt.w	8012d0c <__ieee754_pow+0xa04>
 8012426:	e9dd 0100 	ldrd	r0, r1, [sp]
 801242a:	e78a      	b.n	8012342 <__ieee754_pow+0x3a>
 801242c:	2402      	movs	r4, #2
 801242e:	e7e8      	b.n	8012402 <__ieee754_pow+0xfa>
 8012430:	f1b9 0f00 	cmp.w	r9, #0
 8012434:	f04f 0000 	mov.w	r0, #0
 8012438:	f04f 0100 	mov.w	r1, #0
 801243c:	da81      	bge.n	8012342 <__ieee754_pow+0x3a>
 801243e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012442:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012446:	e77c      	b.n	8012342 <__ieee754_pow+0x3a>
 8012448:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801244c:	d106      	bne.n	801245c <__ieee754_pow+0x154>
 801244e:	4632      	mov	r2, r6
 8012450:	463b      	mov	r3, r7
 8012452:	4630      	mov	r0, r6
 8012454:	4639      	mov	r1, r7
 8012456:	f7ee f8e3 	bl	8000620 <__aeabi_dmul>
 801245a:	e772      	b.n	8012342 <__ieee754_pow+0x3a>
 801245c:	4a4f      	ldr	r2, [pc, #316]	@ (801259c <__ieee754_pow+0x294>)
 801245e:	4591      	cmp	r9, r2
 8012460:	d109      	bne.n	8012476 <__ieee754_pow+0x16e>
 8012462:	2d00      	cmp	r5, #0
 8012464:	db07      	blt.n	8012476 <__ieee754_pow+0x16e>
 8012466:	ec47 6b10 	vmov	d0, r6, r7
 801246a:	b011      	add	sp, #68	@ 0x44
 801246c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012470:	f7ff bc1e 	b.w	8011cb0 <__ieee754_sqrt>
 8012474:	2400      	movs	r4, #0
 8012476:	9302      	str	r3, [sp, #8]
 8012478:	ec47 6b10 	vmov	d0, r6, r7
 801247c:	f001 f818 	bl	80134b0 <fabs>
 8012480:	9b02      	ldr	r3, [sp, #8]
 8012482:	ec51 0b10 	vmov	r0, r1, d0
 8012486:	bb53      	cbnz	r3, 80124de <__ieee754_pow+0x1d6>
 8012488:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801248c:	4b41      	ldr	r3, [pc, #260]	@ (8012594 <__ieee754_pow+0x28c>)
 801248e:	429a      	cmp	r2, r3
 8012490:	d002      	beq.n	8012498 <__ieee754_pow+0x190>
 8012492:	f1b8 0f00 	cmp.w	r8, #0
 8012496:	d122      	bne.n	80124de <__ieee754_pow+0x1d6>
 8012498:	f1b9 0f00 	cmp.w	r9, #0
 801249c:	da05      	bge.n	80124aa <__ieee754_pow+0x1a2>
 801249e:	4602      	mov	r2, r0
 80124a0:	460b      	mov	r3, r1
 80124a2:	2000      	movs	r0, #0
 80124a4:	493b      	ldr	r1, [pc, #236]	@ (8012594 <__ieee754_pow+0x28c>)
 80124a6:	f7ee f9e5 	bl	8000874 <__aeabi_ddiv>
 80124aa:	2d00      	cmp	r5, #0
 80124ac:	f6bf af49 	bge.w	8012342 <__ieee754_pow+0x3a>
 80124b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80124b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80124b8:	ea58 0804 	orrs.w	r8, r8, r4
 80124bc:	d108      	bne.n	80124d0 <__ieee754_pow+0x1c8>
 80124be:	4602      	mov	r2, r0
 80124c0:	460b      	mov	r3, r1
 80124c2:	4610      	mov	r0, r2
 80124c4:	4619      	mov	r1, r3
 80124c6:	f7ed fef3 	bl	80002b0 <__aeabi_dsub>
 80124ca:	4602      	mov	r2, r0
 80124cc:	460b      	mov	r3, r1
 80124ce:	e794      	b.n	80123fa <__ieee754_pow+0xf2>
 80124d0:	2c01      	cmp	r4, #1
 80124d2:	f47f af36 	bne.w	8012342 <__ieee754_pow+0x3a>
 80124d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124da:	4619      	mov	r1, r3
 80124dc:	e731      	b.n	8012342 <__ieee754_pow+0x3a>
 80124de:	0feb      	lsrs	r3, r5, #31
 80124e0:	3b01      	subs	r3, #1
 80124e2:	ea53 0204 	orrs.w	r2, r3, r4
 80124e6:	d102      	bne.n	80124ee <__ieee754_pow+0x1e6>
 80124e8:	4632      	mov	r2, r6
 80124ea:	463b      	mov	r3, r7
 80124ec:	e7e9      	b.n	80124c2 <__ieee754_pow+0x1ba>
 80124ee:	3c01      	subs	r4, #1
 80124f0:	431c      	orrs	r4, r3
 80124f2:	d016      	beq.n	8012522 <__ieee754_pow+0x21a>
 80124f4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8012578 <__ieee754_pow+0x270>
 80124f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80124fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012500:	f240 810e 	bls.w	8012720 <__ieee754_pow+0x418>
 8012504:	4b26      	ldr	r3, [pc, #152]	@ (80125a0 <__ieee754_pow+0x298>)
 8012506:	459a      	cmp	sl, r3
 8012508:	4b23      	ldr	r3, [pc, #140]	@ (8012598 <__ieee754_pow+0x290>)
 801250a:	d916      	bls.n	801253a <__ieee754_pow+0x232>
 801250c:	4598      	cmp	r8, r3
 801250e:	d80b      	bhi.n	8012528 <__ieee754_pow+0x220>
 8012510:	f1b9 0f00 	cmp.w	r9, #0
 8012514:	da0b      	bge.n	801252e <__ieee754_pow+0x226>
 8012516:	2000      	movs	r0, #0
 8012518:	b011      	add	sp, #68	@ 0x44
 801251a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251e:	f001 b883 	b.w	8013628 <__math_oflow>
 8012522:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8012580 <__ieee754_pow+0x278>
 8012526:	e7e7      	b.n	80124f8 <__ieee754_pow+0x1f0>
 8012528:	f1b9 0f00 	cmp.w	r9, #0
 801252c:	dcf3      	bgt.n	8012516 <__ieee754_pow+0x20e>
 801252e:	2000      	movs	r0, #0
 8012530:	b011      	add	sp, #68	@ 0x44
 8012532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012536:	f001 b86f 	b.w	8013618 <__math_uflow>
 801253a:	4598      	cmp	r8, r3
 801253c:	d20c      	bcs.n	8012558 <__ieee754_pow+0x250>
 801253e:	2200      	movs	r2, #0
 8012540:	2300      	movs	r3, #0
 8012542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012546:	f7ee fadd 	bl	8000b04 <__aeabi_dcmplt>
 801254a:	3800      	subs	r0, #0
 801254c:	bf18      	it	ne
 801254e:	2001      	movne	r0, #1
 8012550:	f1b9 0f00 	cmp.w	r9, #0
 8012554:	daec      	bge.n	8012530 <__ieee754_pow+0x228>
 8012556:	e7df      	b.n	8012518 <__ieee754_pow+0x210>
 8012558:	4b0e      	ldr	r3, [pc, #56]	@ (8012594 <__ieee754_pow+0x28c>)
 801255a:	2200      	movs	r2, #0
 801255c:	4598      	cmp	r8, r3
 801255e:	d921      	bls.n	80125a4 <__ieee754_pow+0x29c>
 8012560:	2300      	movs	r3, #0
 8012562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012566:	f7ee facd 	bl	8000b04 <__aeabi_dcmplt>
 801256a:	3800      	subs	r0, #0
 801256c:	bf18      	it	ne
 801256e:	2001      	movne	r0, #1
 8012570:	f1b9 0f00 	cmp.w	r9, #0
 8012574:	dcd0      	bgt.n	8012518 <__ieee754_pow+0x210>
 8012576:	e7db      	b.n	8012530 <__ieee754_pow+0x228>
 8012578:	00000000 	.word	0x00000000
 801257c:	3ff00000 	.word	0x3ff00000
 8012580:	00000000 	.word	0x00000000
 8012584:	bff00000 	.word	0xbff00000
 8012588:	fff00000 	.word	0xfff00000
 801258c:	7ff00000 	.word	0x7ff00000
 8012590:	433fffff 	.word	0x433fffff
 8012594:	3ff00000 	.word	0x3ff00000
 8012598:	3fefffff 	.word	0x3fefffff
 801259c:	3fe00000 	.word	0x3fe00000
 80125a0:	43f00000 	.word	0x43f00000
 80125a4:	4b5a      	ldr	r3, [pc, #360]	@ (8012710 <__ieee754_pow+0x408>)
 80125a6:	f7ed fe83 	bl	80002b0 <__aeabi_dsub>
 80125aa:	4604      	mov	r4, r0
 80125ac:	460d      	mov	r5, r1
 80125ae:	a350      	add	r3, pc, #320	@ (adr r3, 80126f0 <__ieee754_pow+0x3e8>)
 80125b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b4:	f7ee f834 	bl	8000620 <__aeabi_dmul>
 80125b8:	4606      	mov	r6, r0
 80125ba:	460f      	mov	r7, r1
 80125bc:	4620      	mov	r0, r4
 80125be:	4629      	mov	r1, r5
 80125c0:	a34d      	add	r3, pc, #308	@ (adr r3, 80126f8 <__ieee754_pow+0x3f0>)
 80125c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c6:	f7ee f82b 	bl	8000620 <__aeabi_dmul>
 80125ca:	2200      	movs	r2, #0
 80125cc:	4682      	mov	sl, r0
 80125ce:	468b      	mov	fp, r1
 80125d0:	4b50      	ldr	r3, [pc, #320]	@ (8012714 <__ieee754_pow+0x40c>)
 80125d2:	4620      	mov	r0, r4
 80125d4:	4629      	mov	r1, r5
 80125d6:	f7ee f823 	bl	8000620 <__aeabi_dmul>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	a148      	add	r1, pc, #288	@ (adr r1, 8012700 <__ieee754_pow+0x3f8>)
 80125e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e4:	f7ed fe64 	bl	80002b0 <__aeabi_dsub>
 80125e8:	4622      	mov	r2, r4
 80125ea:	462b      	mov	r3, r5
 80125ec:	f7ee f818 	bl	8000620 <__aeabi_dmul>
 80125f0:	4602      	mov	r2, r0
 80125f2:	460b      	mov	r3, r1
 80125f4:	2000      	movs	r0, #0
 80125f6:	4948      	ldr	r1, [pc, #288]	@ (8012718 <__ieee754_pow+0x410>)
 80125f8:	f7ed fe5a 	bl	80002b0 <__aeabi_dsub>
 80125fc:	4680      	mov	r8, r0
 80125fe:	4689      	mov	r9, r1
 8012600:	4622      	mov	r2, r4
 8012602:	462b      	mov	r3, r5
 8012604:	4620      	mov	r0, r4
 8012606:	4629      	mov	r1, r5
 8012608:	2400      	movs	r4, #0
 801260a:	f7ee f809 	bl	8000620 <__aeabi_dmul>
 801260e:	4602      	mov	r2, r0
 8012610:	460b      	mov	r3, r1
 8012612:	4640      	mov	r0, r8
 8012614:	4649      	mov	r1, r9
 8012616:	f7ee f803 	bl	8000620 <__aeabi_dmul>
 801261a:	a33b      	add	r3, pc, #236	@ (adr r3, 8012708 <__ieee754_pow+0x400>)
 801261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012620:	f7ed fffe 	bl	8000620 <__aeabi_dmul>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	4650      	mov	r0, sl
 801262a:	4659      	mov	r1, fp
 801262c:	f7ed fe40 	bl	80002b0 <__aeabi_dsub>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	4680      	mov	r8, r0
 8012636:	4689      	mov	r9, r1
 8012638:	4630      	mov	r0, r6
 801263a:	4639      	mov	r1, r7
 801263c:	f7ed fe3a 	bl	80002b4 <__adddf3>
 8012640:	4632      	mov	r2, r6
 8012642:	463b      	mov	r3, r7
 8012644:	4620      	mov	r0, r4
 8012646:	460d      	mov	r5, r1
 8012648:	f7ed fe32 	bl	80002b0 <__aeabi_dsub>
 801264c:	4602      	mov	r2, r0
 801264e:	460b      	mov	r3, r1
 8012650:	4640      	mov	r0, r8
 8012652:	4649      	mov	r1, r9
 8012654:	f7ed fe2c 	bl	80002b0 <__aeabi_dsub>
 8012658:	4606      	mov	r6, r0
 801265a:	460f      	mov	r7, r1
 801265c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012664:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012668:	2300      	movs	r3, #0
 801266a:	9304      	str	r3, [sp, #16]
 801266c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012670:	4652      	mov	r2, sl
 8012672:	465b      	mov	r3, fp
 8012674:	f7ed fe1c 	bl	80002b0 <__aeabi_dsub>
 8012678:	4622      	mov	r2, r4
 801267a:	462b      	mov	r3, r5
 801267c:	f7ed ffd0 	bl	8000620 <__aeabi_dmul>
 8012680:	4680      	mov	r8, r0
 8012682:	4689      	mov	r9, r1
 8012684:	4630      	mov	r0, r6
 8012686:	4639      	mov	r1, r7
 8012688:	e9dd 2300 	ldrd	r2, r3, [sp]
 801268c:	f7ed ffc8 	bl	8000620 <__aeabi_dmul>
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	4640      	mov	r0, r8
 8012696:	4649      	mov	r1, r9
 8012698:	f7ed fe0c 	bl	80002b4 <__adddf3>
 801269c:	4606      	mov	r6, r0
 801269e:	460f      	mov	r7, r1
 80126a0:	4652      	mov	r2, sl
 80126a2:	465b      	mov	r3, fp
 80126a4:	4620      	mov	r0, r4
 80126a6:	4629      	mov	r1, r5
 80126a8:	f7ed ffba 	bl	8000620 <__aeabi_dmul>
 80126ac:	460b      	mov	r3, r1
 80126ae:	4602      	mov	r2, r0
 80126b0:	4680      	mov	r8, r0
 80126b2:	4689      	mov	r9, r1
 80126b4:	4630      	mov	r0, r6
 80126b6:	4639      	mov	r1, r7
 80126b8:	f7ed fdfc 	bl	80002b4 <__adddf3>
 80126bc:	4b17      	ldr	r3, [pc, #92]	@ (801271c <__ieee754_pow+0x414>)
 80126be:	4604      	mov	r4, r0
 80126c0:	460d      	mov	r5, r1
 80126c2:	4299      	cmp	r1, r3
 80126c4:	468a      	mov	sl, r1
 80126c6:	468b      	mov	fp, r1
 80126c8:	f340 82f0 	ble.w	8012cac <__ieee754_pow+0x9a4>
 80126cc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80126d0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80126d4:	4303      	orrs	r3, r0
 80126d6:	f000 81e8 	beq.w	8012aaa <__ieee754_pow+0x7a2>
 80126da:	2200      	movs	r2, #0
 80126dc:	2300      	movs	r3, #0
 80126de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126e2:	f7ee fa0f 	bl	8000b04 <__aeabi_dcmplt>
 80126e6:	3800      	subs	r0, #0
 80126e8:	bf18      	it	ne
 80126ea:	2001      	movne	r0, #1
 80126ec:	e714      	b.n	8012518 <__ieee754_pow+0x210>
 80126ee:	bf00      	nop
 80126f0:	60000000 	.word	0x60000000
 80126f4:	3ff71547 	.word	0x3ff71547
 80126f8:	f85ddf44 	.word	0xf85ddf44
 80126fc:	3e54ae0b 	.word	0x3e54ae0b
 8012700:	55555555 	.word	0x55555555
 8012704:	3fd55555 	.word	0x3fd55555
 8012708:	652b82fe 	.word	0x652b82fe
 801270c:	3ff71547 	.word	0x3ff71547
 8012710:	3ff00000 	.word	0x3ff00000
 8012714:	3fd00000 	.word	0x3fd00000
 8012718:	3fe00000 	.word	0x3fe00000
 801271c:	408fffff 	.word	0x408fffff
 8012720:	4bd5      	ldr	r3, [pc, #852]	@ (8012a78 <__ieee754_pow+0x770>)
 8012722:	2200      	movs	r2, #0
 8012724:	402b      	ands	r3, r5
 8012726:	b92b      	cbnz	r3, 8012734 <__ieee754_pow+0x42c>
 8012728:	4bd4      	ldr	r3, [pc, #848]	@ (8012a7c <__ieee754_pow+0x774>)
 801272a:	f7ed ff79 	bl	8000620 <__aeabi_dmul>
 801272e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012732:	468b      	mov	fp, r1
 8012734:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012738:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801273c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012740:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012744:	4413      	add	r3, r2
 8012746:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801274a:	930a      	str	r3, [sp, #40]	@ 0x28
 801274c:	4bcc      	ldr	r3, [pc, #816]	@ (8012a80 <__ieee754_pow+0x778>)
 801274e:	459b      	cmp	fp, r3
 8012750:	dd08      	ble.n	8012764 <__ieee754_pow+0x45c>
 8012752:	4bcc      	ldr	r3, [pc, #816]	@ (8012a84 <__ieee754_pow+0x77c>)
 8012754:	459b      	cmp	fp, r3
 8012756:	f340 81a5 	ble.w	8012aa4 <__ieee754_pow+0x79c>
 801275a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801275c:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012760:	3301      	adds	r3, #1
 8012762:	930a      	str	r3, [sp, #40]	@ 0x28
 8012764:	f04f 0a00 	mov.w	sl, #0
 8012768:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801276c:	4629      	mov	r1, r5
 801276e:	106d      	asrs	r5, r5, #1
 8012770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012772:	4bc5      	ldr	r3, [pc, #788]	@ (8012a88 <__ieee754_pow+0x780>)
 8012774:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012778:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801277c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012780:	ed93 7b00 	vldr	d7, [r3]
 8012784:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012788:	ec53 2b17 	vmov	r2, r3, d7
 801278c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012790:	f7ed fd8e 	bl	80002b0 <__aeabi_dsub>
 8012794:	4606      	mov	r6, r0
 8012796:	460f      	mov	r7, r1
 8012798:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801279c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127a0:	f7ed fd88 	bl	80002b4 <__adddf3>
 80127a4:	4602      	mov	r2, r0
 80127a6:	460b      	mov	r3, r1
 80127a8:	2000      	movs	r0, #0
 80127aa:	49b8      	ldr	r1, [pc, #736]	@ (8012a8c <__ieee754_pow+0x784>)
 80127ac:	f7ee f862 	bl	8000874 <__aeabi_ddiv>
 80127b0:	4602      	mov	r2, r0
 80127b2:	460b      	mov	r3, r1
 80127b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80127b8:	4630      	mov	r0, r6
 80127ba:	4639      	mov	r1, r7
 80127bc:	f7ed ff30 	bl	8000620 <__aeabi_dmul>
 80127c0:	2200      	movs	r2, #0
 80127c2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80127c6:	4614      	mov	r4, r2
 80127c8:	461d      	mov	r5, r3
 80127ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127ce:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80127d2:	f04f 0b00 	mov.w	fp, #0
 80127d6:	4661      	mov	r1, ip
 80127d8:	46e1      	mov	r9, ip
 80127da:	4658      	mov	r0, fp
 80127dc:	46d8      	mov	r8, fp
 80127de:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80127e2:	f7ed ff1d 	bl	8000620 <__aeabi_dmul>
 80127e6:	4602      	mov	r2, r0
 80127e8:	460b      	mov	r3, r1
 80127ea:	4630      	mov	r0, r6
 80127ec:	4639      	mov	r1, r7
 80127ee:	f7ed fd5f 	bl	80002b0 <__aeabi_dsub>
 80127f2:	4606      	mov	r6, r0
 80127f4:	460f      	mov	r7, r1
 80127f6:	4620      	mov	r0, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127fe:	f7ed fd57 	bl	80002b0 <__aeabi_dsub>
 8012802:	4602      	mov	r2, r0
 8012804:	460b      	mov	r3, r1
 8012806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801280a:	f7ed fd51 	bl	80002b0 <__aeabi_dsub>
 801280e:	465a      	mov	r2, fp
 8012810:	464b      	mov	r3, r9
 8012812:	f7ed ff05 	bl	8000620 <__aeabi_dmul>
 8012816:	4602      	mov	r2, r0
 8012818:	460b      	mov	r3, r1
 801281a:	4630      	mov	r0, r6
 801281c:	4639      	mov	r1, r7
 801281e:	f7ed fd47 	bl	80002b0 <__aeabi_dsub>
 8012822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012826:	f7ed fefb 	bl	8000620 <__aeabi_dmul>
 801282a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801282e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012832:	4610      	mov	r0, r2
 8012834:	4619      	mov	r1, r3
 8012836:	f7ed fef3 	bl	8000620 <__aeabi_dmul>
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	a37c      	add	r3, pc, #496	@ (adr r3, 8012a30 <__ieee754_pow+0x728>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed feec 	bl	8000620 <__aeabi_dmul>
 8012848:	a37b      	add	r3, pc, #492	@ (adr r3, 8012a38 <__ieee754_pow+0x730>)
 801284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284e:	f7ed fd31 	bl	80002b4 <__adddf3>
 8012852:	4622      	mov	r2, r4
 8012854:	462b      	mov	r3, r5
 8012856:	f7ed fee3 	bl	8000620 <__aeabi_dmul>
 801285a:	a379      	add	r3, pc, #484	@ (adr r3, 8012a40 <__ieee754_pow+0x738>)
 801285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012860:	f7ed fd28 	bl	80002b4 <__adddf3>
 8012864:	4622      	mov	r2, r4
 8012866:	462b      	mov	r3, r5
 8012868:	f7ed feda 	bl	8000620 <__aeabi_dmul>
 801286c:	a376      	add	r3, pc, #472	@ (adr r3, 8012a48 <__ieee754_pow+0x740>)
 801286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012872:	f7ed fd1f 	bl	80002b4 <__adddf3>
 8012876:	4622      	mov	r2, r4
 8012878:	462b      	mov	r3, r5
 801287a:	f7ed fed1 	bl	8000620 <__aeabi_dmul>
 801287e:	a374      	add	r3, pc, #464	@ (adr r3, 8012a50 <__ieee754_pow+0x748>)
 8012880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012884:	f7ed fd16 	bl	80002b4 <__adddf3>
 8012888:	4622      	mov	r2, r4
 801288a:	462b      	mov	r3, r5
 801288c:	f7ed fec8 	bl	8000620 <__aeabi_dmul>
 8012890:	a371      	add	r3, pc, #452	@ (adr r3, 8012a58 <__ieee754_pow+0x750>)
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	f7ed fd0d 	bl	80002b4 <__adddf3>
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	4622      	mov	r2, r4
 80128a0:	462b      	mov	r3, r5
 80128a2:	4620      	mov	r0, r4
 80128a4:	4629      	mov	r1, r5
 80128a6:	f7ed febb 	bl	8000620 <__aeabi_dmul>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	4630      	mov	r0, r6
 80128b0:	4639      	mov	r1, r7
 80128b2:	f7ed feb5 	bl	8000620 <__aeabi_dmul>
 80128b6:	465a      	mov	r2, fp
 80128b8:	4604      	mov	r4, r0
 80128ba:	460d      	mov	r5, r1
 80128bc:	464b      	mov	r3, r9
 80128be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128c2:	f7ed fcf7 	bl	80002b4 <__adddf3>
 80128c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128ca:	f7ed fea9 	bl	8000620 <__aeabi_dmul>
 80128ce:	4622      	mov	r2, r4
 80128d0:	462b      	mov	r3, r5
 80128d2:	f7ed fcef 	bl	80002b4 <__adddf3>
 80128d6:	465a      	mov	r2, fp
 80128d8:	464b      	mov	r3, r9
 80128da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128de:	4658      	mov	r0, fp
 80128e0:	4649      	mov	r1, r9
 80128e2:	f7ed fe9d 	bl	8000620 <__aeabi_dmul>
 80128e6:	2200      	movs	r2, #0
 80128e8:	4b69      	ldr	r3, [pc, #420]	@ (8012a90 <__ieee754_pow+0x788>)
 80128ea:	4606      	mov	r6, r0
 80128ec:	460f      	mov	r7, r1
 80128ee:	f7ed fce1 	bl	80002b4 <__adddf3>
 80128f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128f6:	f7ed fcdd 	bl	80002b4 <__adddf3>
 80128fa:	460d      	mov	r5, r1
 80128fc:	460b      	mov	r3, r1
 80128fe:	4640      	mov	r0, r8
 8012900:	4649      	mov	r1, r9
 8012902:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012906:	465c      	mov	r4, fp
 8012908:	465a      	mov	r2, fp
 801290a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801290e:	f7ed fe87 	bl	8000620 <__aeabi_dmul>
 8012912:	2200      	movs	r2, #0
 8012914:	4680      	mov	r8, r0
 8012916:	4689      	mov	r9, r1
 8012918:	4b5d      	ldr	r3, [pc, #372]	@ (8012a90 <__ieee754_pow+0x788>)
 801291a:	4620      	mov	r0, r4
 801291c:	4629      	mov	r1, r5
 801291e:	f7ed fcc7 	bl	80002b0 <__aeabi_dsub>
 8012922:	4632      	mov	r2, r6
 8012924:	463b      	mov	r3, r7
 8012926:	f7ed fcc3 	bl	80002b0 <__aeabi_dsub>
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012932:	f7ed fcbd 	bl	80002b0 <__aeabi_dsub>
 8012936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293a:	f7ed fe71 	bl	8000620 <__aeabi_dmul>
 801293e:	4606      	mov	r6, r0
 8012940:	460f      	mov	r7, r1
 8012942:	4622      	mov	r2, r4
 8012944:	462b      	mov	r3, r5
 8012946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801294a:	f7ed fe69 	bl	8000620 <__aeabi_dmul>
 801294e:	4602      	mov	r2, r0
 8012950:	460b      	mov	r3, r1
 8012952:	4630      	mov	r0, r6
 8012954:	4639      	mov	r1, r7
 8012956:	f7ed fcad 	bl	80002b4 <__adddf3>
 801295a:	4606      	mov	r6, r0
 801295c:	460f      	mov	r7, r1
 801295e:	4602      	mov	r2, r0
 8012960:	460b      	mov	r3, r1
 8012962:	4640      	mov	r0, r8
 8012964:	4649      	mov	r1, r9
 8012966:	f7ed fca5 	bl	80002b4 <__adddf3>
 801296a:	460d      	mov	r5, r1
 801296c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012970:	a33b      	add	r3, pc, #236	@ (adr r3, 8012a60 <__ieee754_pow+0x758>)
 8012972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012976:	465c      	mov	r4, fp
 8012978:	4658      	mov	r0, fp
 801297a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801297e:	f7ed fe4f 	bl	8000620 <__aeabi_dmul>
 8012982:	4642      	mov	r2, r8
 8012984:	464b      	mov	r3, r9
 8012986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801298a:	4620      	mov	r0, r4
 801298c:	4629      	mov	r1, r5
 801298e:	f7ed fc8f 	bl	80002b0 <__aeabi_dsub>
 8012992:	4602      	mov	r2, r0
 8012994:	460b      	mov	r3, r1
 8012996:	4630      	mov	r0, r6
 8012998:	4639      	mov	r1, r7
 801299a:	f7ed fc89 	bl	80002b0 <__aeabi_dsub>
 801299e:	a332      	add	r3, pc, #200	@ (adr r3, 8012a68 <__ieee754_pow+0x760>)
 80129a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a4:	f7ed fe3c 	bl	8000620 <__aeabi_dmul>
 80129a8:	4606      	mov	r6, r0
 80129aa:	460f      	mov	r7, r1
 80129ac:	4620      	mov	r0, r4
 80129ae:	4629      	mov	r1, r5
 80129b0:	a32f      	add	r3, pc, #188	@ (adr r3, 8012a70 <__ieee754_pow+0x768>)
 80129b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b6:	f7ed fe33 	bl	8000620 <__aeabi_dmul>
 80129ba:	4602      	mov	r2, r0
 80129bc:	460b      	mov	r3, r1
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f7ed fc77 	bl	80002b4 <__adddf3>
 80129c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80129c8:	4b32      	ldr	r3, [pc, #200]	@ (8012a94 <__ieee754_pow+0x78c>)
 80129ca:	4413      	add	r3, r2
 80129cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d0:	f7ed fc70 	bl	80002b4 <__adddf3>
 80129d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80129d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80129da:	f7ed fdb7 	bl	800054c <__aeabi_i2d>
 80129de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80129e0:	4b2d      	ldr	r3, [pc, #180]	@ (8012a98 <__ieee754_pow+0x790>)
 80129e2:	4606      	mov	r6, r0
 80129e4:	460f      	mov	r7, r1
 80129e6:	4413      	add	r3, r2
 80129e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129f4:	f7ed fc5e 	bl	80002b4 <__adddf3>
 80129f8:	4642      	mov	r2, r8
 80129fa:	464b      	mov	r3, r9
 80129fc:	f7ed fc5a 	bl	80002b4 <__adddf3>
 8012a00:	4632      	mov	r2, r6
 8012a02:	463b      	mov	r3, r7
 8012a04:	f7ed fc56 	bl	80002b4 <__adddf3>
 8012a08:	4632      	mov	r2, r6
 8012a0a:	463b      	mov	r3, r7
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012a12:	4658      	mov	r0, fp
 8012a14:	465c      	mov	r4, fp
 8012a16:	f7ed fc4b 	bl	80002b0 <__aeabi_dsub>
 8012a1a:	4642      	mov	r2, r8
 8012a1c:	464b      	mov	r3, r9
 8012a1e:	f7ed fc47 	bl	80002b0 <__aeabi_dsub>
 8012a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a26:	f7ed fc43 	bl	80002b0 <__aeabi_dsub>
 8012a2a:	4602      	mov	r2, r0
 8012a2c:	e036      	b.n	8012a9c <__ieee754_pow+0x794>
 8012a2e:	bf00      	nop
 8012a30:	4a454eef 	.word	0x4a454eef
 8012a34:	3fca7e28 	.word	0x3fca7e28
 8012a38:	93c9db65 	.word	0x93c9db65
 8012a3c:	3fcd864a 	.word	0x3fcd864a
 8012a40:	a91d4101 	.word	0xa91d4101
 8012a44:	3fd17460 	.word	0x3fd17460
 8012a48:	518f264d 	.word	0x518f264d
 8012a4c:	3fd55555 	.word	0x3fd55555
 8012a50:	db6fabff 	.word	0xdb6fabff
 8012a54:	3fdb6db6 	.word	0x3fdb6db6
 8012a58:	33333303 	.word	0x33333303
 8012a5c:	3fe33333 	.word	0x3fe33333
 8012a60:	e0000000 	.word	0xe0000000
 8012a64:	3feec709 	.word	0x3feec709
 8012a68:	dc3a03fd 	.word	0xdc3a03fd
 8012a6c:	3feec709 	.word	0x3feec709
 8012a70:	145b01f5 	.word	0x145b01f5
 8012a74:	be3e2fe0 	.word	0xbe3e2fe0
 8012a78:	7ff00000 	.word	0x7ff00000
 8012a7c:	43400000 	.word	0x43400000
 8012a80:	0003988e 	.word	0x0003988e
 8012a84:	000bb679 	.word	0x000bb679
 8012a88:	08014988 	.word	0x08014988
 8012a8c:	3ff00000 	.word	0x3ff00000
 8012a90:	40080000 	.word	0x40080000
 8012a94:	08014968 	.word	0x08014968
 8012a98:	08014978 	.word	0x08014978
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aa2:	e5d7      	b.n	8012654 <__ieee754_pow+0x34c>
 8012aa4:	f04f 0a01 	mov.w	sl, #1
 8012aa8:	e65e      	b.n	8012768 <__ieee754_pow+0x460>
 8012aaa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8012d7c <__ieee754_pow+0xa74>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	4639      	mov	r1, r7
 8012ab4:	f7ed fbfe 	bl	80002b4 <__adddf3>
 8012ab8:	4642      	mov	r2, r8
 8012aba:	464b      	mov	r3, r9
 8012abc:	e9cd 0100 	strd	r0, r1, [sp]
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	4629      	mov	r1, r5
 8012ac4:	f7ed fbf4 	bl	80002b0 <__aeabi_dsub>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ad0:	f7ee f836 	bl	8000b40 <__aeabi_dcmpgt>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f47f ae00 	bne.w	80126da <__ieee754_pow+0x3d2>
 8012ada:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8012ade:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012ae2:	48a1      	ldr	r0, [pc, #644]	@ (8012d68 <__ieee754_pow+0xa60>)
 8012ae4:	f1bb 0f00 	cmp.w	fp, #0
 8012ae8:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012aec:	f04f 0200 	mov.w	r2, #0
 8012af0:	fa43 fa0a 	asr.w	sl, r3, sl
 8012af4:	44da      	add	sl, fp
 8012af6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012afa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012afe:	fa40 f001 	asr.w	r0, r0, r1
 8012b02:	f1c1 0114 	rsb	r1, r1, #20
 8012b06:	ea00 030a 	and.w	r3, r0, sl
 8012b0a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012b0e:	4640      	mov	r0, r8
 8012b10:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012b14:	fa4a fa01 	asr.w	sl, sl, r1
 8012b18:	4649      	mov	r1, r9
 8012b1a:	bfb8      	it	lt
 8012b1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8012b20:	f7ed fbc6 	bl	80002b0 <__aeabi_dsub>
 8012b24:	4680      	mov	r8, r0
 8012b26:	4689      	mov	r9, r1
 8012b28:	2400      	movs	r4, #0
 8012b2a:	4632      	mov	r2, r6
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	4640      	mov	r0, r8
 8012b30:	4649      	mov	r1, r9
 8012b32:	f7ed fbbf 	bl	80002b4 <__adddf3>
 8012b36:	460d      	mov	r5, r1
 8012b38:	4620      	mov	r0, r4
 8012b3a:	a37b      	add	r3, pc, #492	@ (adr r3, 8012d28 <__ieee754_pow+0xa20>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	f7ed fd6e 	bl	8000620 <__aeabi_dmul>
 8012b44:	4642      	mov	r2, r8
 8012b46:	464b      	mov	r3, r9
 8012b48:	e9cd 0100 	strd	r0, r1, [sp]
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f7ed fbae 	bl	80002b0 <__aeabi_dsub>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	4630      	mov	r0, r6
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	f7ed fba8 	bl	80002b0 <__aeabi_dsub>
 8012b60:	a373      	add	r3, pc, #460	@ (adr r3, 8012d30 <__ieee754_pow+0xa28>)
 8012b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b66:	f7ed fd5b 	bl	8000620 <__aeabi_dmul>
 8012b6a:	4680      	mov	r8, r0
 8012b6c:	4689      	mov	r9, r1
 8012b6e:	4620      	mov	r0, r4
 8012b70:	4629      	mov	r1, r5
 8012b72:	a371      	add	r3, pc, #452	@ (adr r3, 8012d38 <__ieee754_pow+0xa30>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	f7ed fd52 	bl	8000620 <__aeabi_dmul>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	460b      	mov	r3, r1
 8012b80:	4640      	mov	r0, r8
 8012b82:	4649      	mov	r1, r9
 8012b84:	f7ed fb96 	bl	80002b4 <__adddf3>
 8012b88:	4604      	mov	r4, r0
 8012b8a:	460d      	mov	r5, r1
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b94:	f7ed fb8e 	bl	80002b4 <__adddf3>
 8012b98:	4680      	mov	r8, r0
 8012b9a:	4689      	mov	r9, r1
 8012b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ba0:	f7ed fb86 	bl	80002b0 <__aeabi_dsub>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4620      	mov	r0, r4
 8012baa:	4629      	mov	r1, r5
 8012bac:	f7ed fb80 	bl	80002b0 <__aeabi_dsub>
 8012bb0:	4642      	mov	r2, r8
 8012bb2:	4606      	mov	r6, r0
 8012bb4:	460f      	mov	r7, r1
 8012bb6:	464b      	mov	r3, r9
 8012bb8:	4640      	mov	r0, r8
 8012bba:	4649      	mov	r1, r9
 8012bbc:	f7ed fd30 	bl	8000620 <__aeabi_dmul>
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	460d      	mov	r5, r1
 8012bc4:	a35e      	add	r3, pc, #376	@ (adr r3, 8012d40 <__ieee754_pow+0xa38>)
 8012bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bca:	f7ed fd29 	bl	8000620 <__aeabi_dmul>
 8012bce:	a35e      	add	r3, pc, #376	@ (adr r3, 8012d48 <__ieee754_pow+0xa40>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	f7ed fb6c 	bl	80002b0 <__aeabi_dsub>
 8012bd8:	4622      	mov	r2, r4
 8012bda:	462b      	mov	r3, r5
 8012bdc:	f7ed fd20 	bl	8000620 <__aeabi_dmul>
 8012be0:	a35b      	add	r3, pc, #364	@ (adr r3, 8012d50 <__ieee754_pow+0xa48>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	f7ed fb65 	bl	80002b4 <__adddf3>
 8012bea:	4622      	mov	r2, r4
 8012bec:	462b      	mov	r3, r5
 8012bee:	f7ed fd17 	bl	8000620 <__aeabi_dmul>
 8012bf2:	a359      	add	r3, pc, #356	@ (adr r3, 8012d58 <__ieee754_pow+0xa50>)
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	f7ed fb5a 	bl	80002b0 <__aeabi_dsub>
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	462b      	mov	r3, r5
 8012c00:	f7ed fd0e 	bl	8000620 <__aeabi_dmul>
 8012c04:	a356      	add	r3, pc, #344	@ (adr r3, 8012d60 <__ieee754_pow+0xa58>)
 8012c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0a:	f7ed fb53 	bl	80002b4 <__adddf3>
 8012c0e:	4622      	mov	r2, r4
 8012c10:	462b      	mov	r3, r5
 8012c12:	f7ed fd05 	bl	8000620 <__aeabi_dmul>
 8012c16:	4602      	mov	r2, r0
 8012c18:	460b      	mov	r3, r1
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	4649      	mov	r1, r9
 8012c1e:	f7ed fb47 	bl	80002b0 <__aeabi_dsub>
 8012c22:	4604      	mov	r4, r0
 8012c24:	460d      	mov	r5, r1
 8012c26:	4602      	mov	r2, r0
 8012c28:	460b      	mov	r3, r1
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	4649      	mov	r1, r9
 8012c2e:	f7ed fcf7 	bl	8000620 <__aeabi_dmul>
 8012c32:	2200      	movs	r2, #0
 8012c34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012c38:	e9cd 0100 	strd	r0, r1, [sp]
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed fb36 	bl	80002b0 <__aeabi_dsub>
 8012c44:	4602      	mov	r2, r0
 8012c46:	460b      	mov	r3, r1
 8012c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c4c:	f7ed fe12 	bl	8000874 <__aeabi_ddiv>
 8012c50:	4632      	mov	r2, r6
 8012c52:	4604      	mov	r4, r0
 8012c54:	460d      	mov	r5, r1
 8012c56:	463b      	mov	r3, r7
 8012c58:	4640      	mov	r0, r8
 8012c5a:	4649      	mov	r1, r9
 8012c5c:	f7ed fce0 	bl	8000620 <__aeabi_dmul>
 8012c60:	4632      	mov	r2, r6
 8012c62:	463b      	mov	r3, r7
 8012c64:	f7ed fb26 	bl	80002b4 <__adddf3>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7ed fb1e 	bl	80002b0 <__aeabi_dsub>
 8012c74:	4642      	mov	r2, r8
 8012c76:	464b      	mov	r3, r9
 8012c78:	f7ed fb1a 	bl	80002b0 <__aeabi_dsub>
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	4602      	mov	r2, r0
 8012c80:	493a      	ldr	r1, [pc, #232]	@ (8012d6c <__ieee754_pow+0xa64>)
 8012c82:	2000      	movs	r0, #0
 8012c84:	f7ed fb14 	bl	80002b0 <__aeabi_dsub>
 8012c88:	ec41 0b10 	vmov	d0, r0, r1
 8012c8c:	ee10 3a90 	vmov	r3, s1
 8012c90:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c98:	da30      	bge.n	8012cfc <__ieee754_pow+0x9f4>
 8012c9a:	4650      	mov	r0, sl
 8012c9c:	f000 fc10 	bl	80134c0 <scalbn>
 8012ca0:	ec51 0b10 	vmov	r0, r1, d0
 8012ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ca8:	f7ff bbd5 	b.w	8012456 <__ieee754_pow+0x14e>
 8012cac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012cb0:	4c2f      	ldr	r4, [pc, #188]	@ (8012d70 <__ieee754_pow+0xa68>)
 8012cb2:	42a3      	cmp	r3, r4
 8012cb4:	d91a      	bls.n	8012cec <__ieee754_pow+0x9e4>
 8012cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8012d74 <__ieee754_pow+0xa6c>)
 8012cb8:	440b      	add	r3, r1
 8012cba:	4303      	orrs	r3, r0
 8012cbc:	d009      	beq.n	8012cd2 <__ieee754_pow+0x9ca>
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc6:	f7ed ff1d 	bl	8000b04 <__aeabi_dcmplt>
 8012cca:	3800      	subs	r0, #0
 8012ccc:	bf18      	it	ne
 8012cce:	2001      	movne	r0, #1
 8012cd0:	e42e      	b.n	8012530 <__ieee754_pow+0x228>
 8012cd2:	4642      	mov	r2, r8
 8012cd4:	464b      	mov	r3, r9
 8012cd6:	f7ed faeb 	bl	80002b0 <__aeabi_dsub>
 8012cda:	4632      	mov	r2, r6
 8012cdc:	463b      	mov	r3, r7
 8012cde:	f7ed ff25 	bl	8000b2c <__aeabi_dcmpge>
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d1eb      	bne.n	8012cbe <__ieee754_pow+0x9b6>
 8012ce6:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8012d84 <__ieee754_pow+0xa7c>
 8012cea:	e6f6      	b.n	8012ada <__ieee754_pow+0x7d2>
 8012cec:	469a      	mov	sl, r3
 8012cee:	4b22      	ldr	r3, [pc, #136]	@ (8012d78 <__ieee754_pow+0xa70>)
 8012cf0:	459a      	cmp	sl, r3
 8012cf2:	f63f aef2 	bhi.w	8012ada <__ieee754_pow+0x7d2>
 8012cf6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012cfa:	e715      	b.n	8012b28 <__ieee754_pow+0x820>
 8012cfc:	ec51 0b10 	vmov	r0, r1, d0
 8012d00:	4619      	mov	r1, r3
 8012d02:	e7cf      	b.n	8012ca4 <__ieee754_pow+0x99c>
 8012d04:	2000      	movs	r0, #0
 8012d06:	4919      	ldr	r1, [pc, #100]	@ (8012d6c <__ieee754_pow+0xa64>)
 8012d08:	f7ff bb1b 	b.w	8012342 <__ieee754_pow+0x3a>
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	2100      	movs	r1, #0
 8012d10:	f7ff bb17 	b.w	8012342 <__ieee754_pow+0x3a>
 8012d14:	4630      	mov	r0, r6
 8012d16:	4639      	mov	r1, r7
 8012d18:	f7ff bb13 	b.w	8012342 <__ieee754_pow+0x3a>
 8012d1c:	460c      	mov	r4, r1
 8012d1e:	f7ff bb61 	b.w	80123e4 <__ieee754_pow+0xdc>
 8012d22:	2400      	movs	r4, #0
 8012d24:	f7ff bb4c 	b.w	80123c0 <__ieee754_pow+0xb8>
 8012d28:	00000000 	.word	0x00000000
 8012d2c:	3fe62e43 	.word	0x3fe62e43
 8012d30:	fefa39ef 	.word	0xfefa39ef
 8012d34:	3fe62e42 	.word	0x3fe62e42
 8012d38:	0ca86c39 	.word	0x0ca86c39
 8012d3c:	be205c61 	.word	0xbe205c61
 8012d40:	72bea4d0 	.word	0x72bea4d0
 8012d44:	3e663769 	.word	0x3e663769
 8012d48:	c5d26bf1 	.word	0xc5d26bf1
 8012d4c:	3ebbbd41 	.word	0x3ebbbd41
 8012d50:	af25de2c 	.word	0xaf25de2c
 8012d54:	3f11566a 	.word	0x3f11566a
 8012d58:	16bebd93 	.word	0x16bebd93
 8012d5c:	3f66c16c 	.word	0x3f66c16c
 8012d60:	5555553e 	.word	0x5555553e
 8012d64:	3fc55555 	.word	0x3fc55555
 8012d68:	fff00000 	.word	0xfff00000
 8012d6c:	3ff00000 	.word	0x3ff00000
 8012d70:	4090cbff 	.word	0x4090cbff
 8012d74:	3f6f3400 	.word	0x3f6f3400
 8012d78:	3fe00000 	.word	0x3fe00000
 8012d7c:	652b82fe 	.word	0x652b82fe
 8012d80:	3c971547 	.word	0x3c971547
 8012d84:	4090cc00 	.word	0x4090cc00

08012d88 <__ieee754_rem_pio2>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	ec57 6b10 	vmov	r6, r7, d0
 8012d90:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012d94:	4bc4      	ldr	r3, [pc, #784]	@ (80130a8 <__ieee754_rem_pio2+0x320>)
 8012d96:	b08d      	sub	sp, #52	@ 0x34
 8012d98:	4604      	mov	r4, r0
 8012d9a:	4598      	cmp	r8, r3
 8012d9c:	9704      	str	r7, [sp, #16]
 8012d9e:	d807      	bhi.n	8012db0 <__ieee754_rem_pio2+0x28>
 8012da0:	2200      	movs	r2, #0
 8012da2:	2300      	movs	r3, #0
 8012da4:	ed80 0b00 	vstr	d0, [r0]
 8012da8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012dac:	2500      	movs	r5, #0
 8012dae:	e028      	b.n	8012e02 <__ieee754_rem_pio2+0x7a>
 8012db0:	4bbe      	ldr	r3, [pc, #760]	@ (80130ac <__ieee754_rem_pio2+0x324>)
 8012db2:	4598      	cmp	r8, r3
 8012db4:	d878      	bhi.n	8012ea8 <__ieee754_rem_pio2+0x120>
 8012db6:	9b04      	ldr	r3, [sp, #16]
 8012db8:	4630      	mov	r0, r6
 8012dba:	4dbd      	ldr	r5, [pc, #756]	@ (80130b0 <__ieee754_rem_pio2+0x328>)
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	a3ab      	add	r3, pc, #684	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2e8>)
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	dd38      	ble.n	8012e3a <__ieee754_rem_pio2+0xb2>
 8012dc8:	f7ed fa72 	bl	80002b0 <__aeabi_dsub>
 8012dcc:	45a8      	cmp	r8, r5
 8012dce:	4606      	mov	r6, r0
 8012dd0:	460f      	mov	r7, r1
 8012dd2:	d01a      	beq.n	8012e0a <__ieee754_rem_pio2+0x82>
 8012dd4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f0>)
 8012dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dda:	f7ed fa69 	bl	80002b0 <__aeabi_dsub>
 8012dde:	4602      	mov	r2, r0
 8012de0:	460b      	mov	r3, r1
 8012de2:	4680      	mov	r8, r0
 8012de4:	4689      	mov	r9, r1
 8012de6:	4630      	mov	r0, r6
 8012de8:	4639      	mov	r1, r7
 8012dea:	f7ed fa61 	bl	80002b0 <__aeabi_dsub>
 8012dee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f0>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	2501      	movs	r5, #1
 8012df6:	f7ed fa5b 	bl	80002b0 <__aeabi_dsub>
 8012dfa:	e9c4 8900 	strd	r8, r9, [r4]
 8012dfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e02:	4628      	mov	r0, r5
 8012e04:	b00d      	add	sp, #52	@ 0x34
 8012e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0a:	a39d      	add	r3, pc, #628	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f8>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	f7ed fa4e 	bl	80002b0 <__aeabi_dsub>
 8012e14:	4606      	mov	r6, r0
 8012e16:	460f      	mov	r7, r1
 8012e18:	a39b      	add	r3, pc, #620	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x300>)
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	f7ed fa47 	bl	80002b0 <__aeabi_dsub>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	4680      	mov	r8, r0
 8012e28:	4689      	mov	r9, r1
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	f7ed fa3f 	bl	80002b0 <__aeabi_dsub>
 8012e32:	a395      	add	r3, pc, #596	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x300>)
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	e7dc      	b.n	8012df4 <__ieee754_rem_pio2+0x6c>
 8012e3a:	f7ed fa3b 	bl	80002b4 <__adddf3>
 8012e3e:	45a8      	cmp	r8, r5
 8012e40:	4606      	mov	r6, r0
 8012e42:	460f      	mov	r7, r1
 8012e44:	d018      	beq.n	8012e78 <__ieee754_rem_pio2+0xf0>
 8012e46:	a38c      	add	r3, pc, #560	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f0>)
 8012e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4c:	f7ed fa32 	bl	80002b4 <__adddf3>
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	4680      	mov	r8, r0
 8012e56:	4689      	mov	r9, r1
 8012e58:	4630      	mov	r0, r6
 8012e5a:	4639      	mov	r1, r7
 8012e5c:	f7ed fa28 	bl	80002b0 <__aeabi_dsub>
 8012e60:	a385      	add	r3, pc, #532	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f0>)
 8012e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e66:	f7ed fa25 	bl	80002b4 <__adddf3>
 8012e6a:	f04f 35ff 	mov.w	r5, #4294967295
 8012e6e:	e9c4 8900 	strd	r8, r9, [r4]
 8012e72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e76:	e7c4      	b.n	8012e02 <__ieee754_rem_pio2+0x7a>
 8012e78:	a381      	add	r3, pc, #516	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f8>)
 8012e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7e:	f7ed fa19 	bl	80002b4 <__adddf3>
 8012e82:	4606      	mov	r6, r0
 8012e84:	460f      	mov	r7, r1
 8012e86:	a380      	add	r3, pc, #512	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x300>)
 8012e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8c:	f7ed fa12 	bl	80002b4 <__adddf3>
 8012e90:	4602      	mov	r2, r0
 8012e92:	460b      	mov	r3, r1
 8012e94:	4680      	mov	r8, r0
 8012e96:	4689      	mov	r9, r1
 8012e98:	4630      	mov	r0, r6
 8012e9a:	4639      	mov	r1, r7
 8012e9c:	f7ed fa08 	bl	80002b0 <__aeabi_dsub>
 8012ea0:	a379      	add	r3, pc, #484	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x300>)
 8012ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea6:	e7de      	b.n	8012e66 <__ieee754_rem_pio2+0xde>
 8012ea8:	4b82      	ldr	r3, [pc, #520]	@ (80130b4 <__ieee754_rem_pio2+0x32c>)
 8012eaa:	4598      	cmp	r8, r3
 8012eac:	f200 80d1 	bhi.w	8013052 <__ieee754_rem_pio2+0x2ca>
 8012eb0:	f000 fafe 	bl	80134b0 <fabs>
 8012eb4:	ec57 6b10 	vmov	r6, r7, d0
 8012eb8:	a375      	add	r3, pc, #468	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x308>)
 8012eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	4639      	mov	r1, r7
 8012ec2:	f7ed fbad 	bl	8000620 <__aeabi_dmul>
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80130b8 <__ieee754_rem_pio2+0x330>)
 8012eca:	f7ed f9f3 	bl	80002b4 <__adddf3>
 8012ece:	f7ed fe57 	bl	8000b80 <__aeabi_d2iz>
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	f7ed fb3a 	bl	800054c <__aeabi_i2d>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	460b      	mov	r3, r1
 8012edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ee0:	a363      	add	r3, pc, #396	@ (adr r3, 8013070 <__ieee754_rem_pio2+0x2e8>)
 8012ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee6:	f7ed fb9b 	bl	8000620 <__aeabi_dmul>
 8012eea:	4602      	mov	r2, r0
 8012eec:	460b      	mov	r3, r1
 8012eee:	4630      	mov	r0, r6
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	f7ed f9dd 	bl	80002b0 <__aeabi_dsub>
 8012ef6:	4682      	mov	sl, r0
 8012ef8:	468b      	mov	fp, r1
 8012efa:	a35f      	add	r3, pc, #380	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2f0>)
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f04:	f7ed fb8c 	bl	8000620 <__aeabi_dmul>
 8012f08:	2d1f      	cmp	r5, #31
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	460f      	mov	r7, r1
 8012f0e:	dc0c      	bgt.n	8012f2a <__ieee754_rem_pio2+0x1a2>
 8012f10:	1e6a      	subs	r2, r5, #1
 8012f12:	4b6a      	ldr	r3, [pc, #424]	@ (80130bc <__ieee754_rem_pio2+0x334>)
 8012f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f18:	4543      	cmp	r3, r8
 8012f1a:	d006      	beq.n	8012f2a <__ieee754_rem_pio2+0x1a2>
 8012f1c:	4632      	mov	r2, r6
 8012f1e:	463b      	mov	r3, r7
 8012f20:	4650      	mov	r0, sl
 8012f22:	4659      	mov	r1, fp
 8012f24:	f7ed f9c4 	bl	80002b0 <__aeabi_dsub>
 8012f28:	e00e      	b.n	8012f48 <__ieee754_rem_pio2+0x1c0>
 8012f2a:	463b      	mov	r3, r7
 8012f2c:	4632      	mov	r2, r6
 8012f2e:	4650      	mov	r0, sl
 8012f30:	4659      	mov	r1, fp
 8012f32:	f7ed f9bd 	bl	80002b0 <__aeabi_dsub>
 8012f36:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f3a:	9305      	str	r3, [sp, #20]
 8012f3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f40:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012f44:	2b10      	cmp	r3, #16
 8012f46:	dc02      	bgt.n	8012f4e <__ieee754_rem_pio2+0x1c6>
 8012f48:	e9c4 0100 	strd	r0, r1, [r4]
 8012f4c:	e039      	b.n	8012fc2 <__ieee754_rem_pio2+0x23a>
 8012f4e:	a34c      	add	r3, pc, #304	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f8>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f58:	f7ed fb62 	bl	8000620 <__aeabi_dmul>
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	460f      	mov	r7, r1
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	4650      	mov	r0, sl
 8012f66:	4659      	mov	r1, fp
 8012f68:	f7ed f9a2 	bl	80002b0 <__aeabi_dsub>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	460b      	mov	r3, r1
 8012f70:	4680      	mov	r8, r0
 8012f72:	4689      	mov	r9, r1
 8012f74:	4650      	mov	r0, sl
 8012f76:	4659      	mov	r1, fp
 8012f78:	f7ed f99a 	bl	80002b0 <__aeabi_dsub>
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	463b      	mov	r3, r7
 8012f80:	f7ed f996 	bl	80002b0 <__aeabi_dsub>
 8012f84:	4606      	mov	r6, r0
 8012f86:	460f      	mov	r7, r1
 8012f88:	a33f      	add	r3, pc, #252	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x300>)
 8012f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f92:	f7ed fb45 	bl	8000620 <__aeabi_dmul>
 8012f96:	4632      	mov	r2, r6
 8012f98:	463b      	mov	r3, r7
 8012f9a:	f7ed f989 	bl	80002b0 <__aeabi_dsub>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	460f      	mov	r7, r1
 8012fa6:	4640      	mov	r0, r8
 8012fa8:	4649      	mov	r1, r9
 8012faa:	f7ed f981 	bl	80002b0 <__aeabi_dsub>
 8012fae:	9a05      	ldr	r2, [sp, #20]
 8012fb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	2b31      	cmp	r3, #49	@ 0x31
 8012fb8:	dc20      	bgt.n	8012ffc <__ieee754_rem_pio2+0x274>
 8012fba:	46c2      	mov	sl, r8
 8012fbc:	46cb      	mov	fp, r9
 8012fbe:	e9c4 0100 	strd	r0, r1, [r4]
 8012fc2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012fc6:	4650      	mov	r0, sl
 8012fc8:	4659      	mov	r1, fp
 8012fca:	4642      	mov	r2, r8
 8012fcc:	464b      	mov	r3, r9
 8012fce:	f7ed f96f 	bl	80002b0 <__aeabi_dsub>
 8012fd2:	463b      	mov	r3, r7
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	f7ed f96b 	bl	80002b0 <__aeabi_dsub>
 8012fda:	9b04      	ldr	r3, [sp, #16]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012fe2:	f6bf af0e 	bge.w	8012e02 <__ieee754_rem_pio2+0x7a>
 8012fe6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012fea:	f8c4 8000 	str.w	r8, [r4]
 8012fee:	60a0      	str	r0, [r4, #8]
 8012ff0:	6063      	str	r3, [r4, #4]
 8012ff2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012ff6:	60e3      	str	r3, [r4, #12]
 8012ff8:	426d      	negs	r5, r5
 8012ffa:	e702      	b.n	8012e02 <__ieee754_rem_pio2+0x7a>
 8012ffc:	a326      	add	r3, pc, #152	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x310>)
 8012ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013006:	f7ed fb0b 	bl	8000620 <__aeabi_dmul>
 801300a:	4606      	mov	r6, r0
 801300c:	460f      	mov	r7, r1
 801300e:	4602      	mov	r2, r0
 8013010:	460b      	mov	r3, r1
 8013012:	4640      	mov	r0, r8
 8013014:	4649      	mov	r1, r9
 8013016:	f7ed f94b 	bl	80002b0 <__aeabi_dsub>
 801301a:	4602      	mov	r2, r0
 801301c:	460b      	mov	r3, r1
 801301e:	4682      	mov	sl, r0
 8013020:	468b      	mov	fp, r1
 8013022:	4640      	mov	r0, r8
 8013024:	4649      	mov	r1, r9
 8013026:	f7ed f943 	bl	80002b0 <__aeabi_dsub>
 801302a:	4632      	mov	r2, r6
 801302c:	463b      	mov	r3, r7
 801302e:	f7ed f93f 	bl	80002b0 <__aeabi_dsub>
 8013032:	4606      	mov	r6, r0
 8013034:	460f      	mov	r7, r1
 8013036:	a31a      	add	r3, pc, #104	@ (adr r3, 80130a0 <__ieee754_rem_pio2+0x318>)
 8013038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013040:	f7ed faee 	bl	8000620 <__aeabi_dmul>
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	f7ed f932 	bl	80002b0 <__aeabi_dsub>
 801304c:	4606      	mov	r6, r0
 801304e:	460f      	mov	r7, r1
 8013050:	e764      	b.n	8012f1c <__ieee754_rem_pio2+0x194>
 8013052:	4b1b      	ldr	r3, [pc, #108]	@ (80130c0 <__ieee754_rem_pio2+0x338>)
 8013054:	4598      	cmp	r8, r3
 8013056:	d935      	bls.n	80130c4 <__ieee754_rem_pio2+0x33c>
 8013058:	4632      	mov	r2, r6
 801305a:	463b      	mov	r3, r7
 801305c:	4630      	mov	r0, r6
 801305e:	4639      	mov	r1, r7
 8013060:	f7ed f926 	bl	80002b0 <__aeabi_dsub>
 8013064:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013068:	e9c4 0100 	strd	r0, r1, [r4]
 801306c:	e69e      	b.n	8012dac <__ieee754_rem_pio2+0x24>
 801306e:	bf00      	nop
 8013070:	54400000 	.word	0x54400000
 8013074:	3ff921fb 	.word	0x3ff921fb
 8013078:	1a626331 	.word	0x1a626331
 801307c:	3dd0b461 	.word	0x3dd0b461
 8013080:	1a600000 	.word	0x1a600000
 8013084:	3dd0b461 	.word	0x3dd0b461
 8013088:	2e037073 	.word	0x2e037073
 801308c:	3ba3198a 	.word	0x3ba3198a
 8013090:	6dc9c883 	.word	0x6dc9c883
 8013094:	3fe45f30 	.word	0x3fe45f30
 8013098:	2e000000 	.word	0x2e000000
 801309c:	3ba3198a 	.word	0x3ba3198a
 80130a0:	252049c1 	.word	0x252049c1
 80130a4:	397b839a 	.word	0x397b839a
 80130a8:	3fe921fb 	.word	0x3fe921fb
 80130ac:	4002d97b 	.word	0x4002d97b
 80130b0:	3ff921fb 	.word	0x3ff921fb
 80130b4:	413921fb 	.word	0x413921fb
 80130b8:	3fe00000 	.word	0x3fe00000
 80130bc:	08014998 	.word	0x08014998
 80130c0:	7fefffff 	.word	0x7fefffff
 80130c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80130c8:	4630      	mov	r0, r6
 80130ca:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80130ce:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80130d2:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80130d6:	f04f 0803 	mov.w	r8, #3
 80130da:	460f      	mov	r7, r1
 80130dc:	f7ed fd50 	bl	8000b80 <__aeabi_d2iz>
 80130e0:	f7ed fa34 	bl	800054c <__aeabi_i2d>
 80130e4:	4602      	mov	r2, r0
 80130e6:	460b      	mov	r3, r1
 80130e8:	4630      	mov	r0, r6
 80130ea:	4639      	mov	r1, r7
 80130ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130f0:	f7ed f8de 	bl	80002b0 <__aeabi_dsub>
 80130f4:	2200      	movs	r2, #0
 80130f6:	4b20      	ldr	r3, [pc, #128]	@ (8013178 <__ieee754_rem_pio2+0x3f0>)
 80130f8:	f7ed fa92 	bl	8000620 <__aeabi_dmul>
 80130fc:	460f      	mov	r7, r1
 80130fe:	4606      	mov	r6, r0
 8013100:	f7ed fd3e 	bl	8000b80 <__aeabi_d2iz>
 8013104:	f7ed fa22 	bl	800054c <__aeabi_i2d>
 8013108:	4602      	mov	r2, r0
 801310a:	460b      	mov	r3, r1
 801310c:	4630      	mov	r0, r6
 801310e:	4639      	mov	r1, r7
 8013110:	2600      	movs	r6, #0
 8013112:	2700      	movs	r7, #0
 8013114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013118:	f7ed f8ca 	bl	80002b0 <__aeabi_dsub>
 801311c:	2200      	movs	r2, #0
 801311e:	4b16      	ldr	r3, [pc, #88]	@ (8013178 <__ieee754_rem_pio2+0x3f0>)
 8013120:	f7ed fa7e 	bl	8000620 <__aeabi_dmul>
 8013124:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013128:	4632      	mov	r2, r6
 801312a:	463b      	mov	r3, r7
 801312c:	46c2      	mov	sl, r8
 801312e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013132:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013136:	f7ed fcdb 	bl	8000af0 <__aeabi_dcmpeq>
 801313a:	2800      	cmp	r0, #0
 801313c:	d1f4      	bne.n	8013128 <__ieee754_rem_pio2+0x3a0>
 801313e:	4b0f      	ldr	r3, [pc, #60]	@ (801317c <__ieee754_rem_pio2+0x3f4>)
 8013140:	462a      	mov	r2, r5
 8013142:	4621      	mov	r1, r4
 8013144:	a806      	add	r0, sp, #24
 8013146:	9301      	str	r3, [sp, #4]
 8013148:	2302      	movs	r3, #2
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	4653      	mov	r3, sl
 801314e:	f000 fa73 	bl	8013638 <__kernel_rem_pio2>
 8013152:	9b04      	ldr	r3, [sp, #16]
 8013154:	4605      	mov	r5, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	f6bf ae53 	bge.w	8012e02 <__ieee754_rem_pio2+0x7a>
 801315c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013160:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013164:	e9c4 2300 	strd	r2, r3, [r4]
 8013168:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801316c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013170:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013174:	e740      	b.n	8012ff8 <__ieee754_rem_pio2+0x270>
 8013176:	bf00      	nop
 8013178:	41700000 	.word	0x41700000
 801317c:	08014a18 	.word	0x08014a18

08013180 <atan>:
 8013180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013184:	ec55 4b10 	vmov	r4, r5, d0
 8013188:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801318c:	4bbe      	ldr	r3, [pc, #760]	@ (8013488 <atan+0x308>)
 801318e:	46ab      	mov	fp, r5
 8013190:	429e      	cmp	r6, r3
 8013192:	d918      	bls.n	80131c6 <atan+0x46>
 8013194:	4bbd      	ldr	r3, [pc, #756]	@ (801348c <atan+0x30c>)
 8013196:	429e      	cmp	r6, r3
 8013198:	d801      	bhi.n	801319e <atan+0x1e>
 801319a:	d109      	bne.n	80131b0 <atan+0x30>
 801319c:	b144      	cbz	r4, 80131b0 <atan+0x30>
 801319e:	4622      	mov	r2, r4
 80131a0:	462b      	mov	r3, r5
 80131a2:	4620      	mov	r0, r4
 80131a4:	4629      	mov	r1, r5
 80131a6:	f7ed f885 	bl	80002b4 <__adddf3>
 80131aa:	4604      	mov	r4, r0
 80131ac:	460d      	mov	r5, r1
 80131ae:	e006      	b.n	80131be <atan+0x3e>
 80131b0:	f1bb 0f00 	cmp.w	fp, #0
 80131b4:	f340 812b 	ble.w	801340e <atan+0x28e>
 80131b8:	a597      	add	r5, pc, #604	@ (adr r5, 8013418 <atan+0x298>)
 80131ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131be:	ec45 4b10 	vmov	d0, r4, r5
 80131c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	4bb2      	ldr	r3, [pc, #712]	@ (8013490 <atan+0x310>)
 80131c8:	429e      	cmp	r6, r3
 80131ca:	d813      	bhi.n	80131f4 <atan+0x74>
 80131cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80131d0:	429e      	cmp	r6, r3
 80131d2:	d80c      	bhi.n	80131ee <atan+0x6e>
 80131d4:	4620      	mov	r0, r4
 80131d6:	4629      	mov	r1, r5
 80131d8:	a391      	add	r3, pc, #580	@ (adr r3, 8013420 <atan+0x2a0>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	f7ed f869 	bl	80002b4 <__adddf3>
 80131e2:	2200      	movs	r2, #0
 80131e4:	4bab      	ldr	r3, [pc, #684]	@ (8013494 <atan+0x314>)
 80131e6:	f7ed fcab 	bl	8000b40 <__aeabi_dcmpgt>
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d1e7      	bne.n	80131be <atan+0x3e>
 80131ee:	f04f 3aff 	mov.w	sl, #4294967295
 80131f2:	e029      	b.n	8013248 <atan+0xc8>
 80131f4:	f000 f95c 	bl	80134b0 <fabs>
 80131f8:	4ba7      	ldr	r3, [pc, #668]	@ (8013498 <atan+0x318>)
 80131fa:	429e      	cmp	r6, r3
 80131fc:	ec55 4b10 	vmov	r4, r5, d0
 8013200:	f200 80bc 	bhi.w	801337c <atan+0x1fc>
 8013204:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013208:	429e      	cmp	r6, r3
 801320a:	f200 809e 	bhi.w	801334a <atan+0x1ca>
 801320e:	4622      	mov	r2, r4
 8013210:	462b      	mov	r3, r5
 8013212:	4620      	mov	r0, r4
 8013214:	4629      	mov	r1, r5
 8013216:	f7ed f84d 	bl	80002b4 <__adddf3>
 801321a:	2200      	movs	r2, #0
 801321c:	4b9d      	ldr	r3, [pc, #628]	@ (8013494 <atan+0x314>)
 801321e:	f04f 0a00 	mov.w	sl, #0
 8013222:	f7ed f845 	bl	80002b0 <__aeabi_dsub>
 8013226:	4606      	mov	r6, r0
 8013228:	460f      	mov	r7, r1
 801322a:	2200      	movs	r2, #0
 801322c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013230:	4620      	mov	r0, r4
 8013232:	4629      	mov	r1, r5
 8013234:	f7ed f83e 	bl	80002b4 <__adddf3>
 8013238:	4602      	mov	r2, r0
 801323a:	460b      	mov	r3, r1
 801323c:	4630      	mov	r0, r6
 801323e:	4639      	mov	r1, r7
 8013240:	f7ed fb18 	bl	8000874 <__aeabi_ddiv>
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	4622      	mov	r2, r4
 801324a:	462b      	mov	r3, r5
 801324c:	4620      	mov	r0, r4
 801324e:	4629      	mov	r1, r5
 8013250:	f7ed f9e6 	bl	8000620 <__aeabi_dmul>
 8013254:	4602      	mov	r2, r0
 8013256:	460b      	mov	r3, r1
 8013258:	4680      	mov	r8, r0
 801325a:	4689      	mov	r9, r1
 801325c:	f7ed f9e0 	bl	8000620 <__aeabi_dmul>
 8013260:	4606      	mov	r6, r0
 8013262:	460f      	mov	r7, r1
 8013264:	a370      	add	r3, pc, #448	@ (adr r3, 8013428 <atan+0x2a8>)
 8013266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326a:	f7ed f9d9 	bl	8000620 <__aeabi_dmul>
 801326e:	a370      	add	r3, pc, #448	@ (adr r3, 8013430 <atan+0x2b0>)
 8013270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013274:	f7ed f81e 	bl	80002b4 <__adddf3>
 8013278:	4632      	mov	r2, r6
 801327a:	463b      	mov	r3, r7
 801327c:	f7ed f9d0 	bl	8000620 <__aeabi_dmul>
 8013280:	a36d      	add	r3, pc, #436	@ (adr r3, 8013438 <atan+0x2b8>)
 8013282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013286:	f7ed f815 	bl	80002b4 <__adddf3>
 801328a:	4632      	mov	r2, r6
 801328c:	463b      	mov	r3, r7
 801328e:	f7ed f9c7 	bl	8000620 <__aeabi_dmul>
 8013292:	a36b      	add	r3, pc, #428	@ (adr r3, 8013440 <atan+0x2c0>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	f7ed f80c 	bl	80002b4 <__adddf3>
 801329c:	4632      	mov	r2, r6
 801329e:	463b      	mov	r3, r7
 80132a0:	f7ed f9be 	bl	8000620 <__aeabi_dmul>
 80132a4:	a368      	add	r3, pc, #416	@ (adr r3, 8013448 <atan+0x2c8>)
 80132a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132aa:	f7ed f803 	bl	80002b4 <__adddf3>
 80132ae:	4632      	mov	r2, r6
 80132b0:	463b      	mov	r3, r7
 80132b2:	f7ed f9b5 	bl	8000620 <__aeabi_dmul>
 80132b6:	a366      	add	r3, pc, #408	@ (adr r3, 8013450 <atan+0x2d0>)
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	f7ec fffa 	bl	80002b4 <__adddf3>
 80132c0:	4642      	mov	r2, r8
 80132c2:	464b      	mov	r3, r9
 80132c4:	f7ed f9ac 	bl	8000620 <__aeabi_dmul>
 80132c8:	4680      	mov	r8, r0
 80132ca:	4689      	mov	r9, r1
 80132cc:	4630      	mov	r0, r6
 80132ce:	4639      	mov	r1, r7
 80132d0:	a361      	add	r3, pc, #388	@ (adr r3, 8013458 <atan+0x2d8>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f7ed f9a3 	bl	8000620 <__aeabi_dmul>
 80132da:	a361      	add	r3, pc, #388	@ (adr r3, 8013460 <atan+0x2e0>)
 80132dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e0:	f7ec ffe6 	bl	80002b0 <__aeabi_dsub>
 80132e4:	4632      	mov	r2, r6
 80132e6:	463b      	mov	r3, r7
 80132e8:	f7ed f99a 	bl	8000620 <__aeabi_dmul>
 80132ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8013468 <atan+0x2e8>)
 80132ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f2:	f7ec ffdd 	bl	80002b0 <__aeabi_dsub>
 80132f6:	4632      	mov	r2, r6
 80132f8:	463b      	mov	r3, r7
 80132fa:	f7ed f991 	bl	8000620 <__aeabi_dmul>
 80132fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8013470 <atan+0x2f0>)
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	f7ec ffd4 	bl	80002b0 <__aeabi_dsub>
 8013308:	4632      	mov	r2, r6
 801330a:	463b      	mov	r3, r7
 801330c:	f7ed f988 	bl	8000620 <__aeabi_dmul>
 8013310:	a359      	add	r3, pc, #356	@ (adr r3, 8013478 <atan+0x2f8>)
 8013312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013316:	f7ec ffcb 	bl	80002b0 <__aeabi_dsub>
 801331a:	4632      	mov	r2, r6
 801331c:	463b      	mov	r3, r7
 801331e:	f7ed f97f 	bl	8000620 <__aeabi_dmul>
 8013322:	4602      	mov	r2, r0
 8013324:	460b      	mov	r3, r1
 8013326:	4640      	mov	r0, r8
 8013328:	4649      	mov	r1, r9
 801332a:	f7ec ffc3 	bl	80002b4 <__adddf3>
 801332e:	4622      	mov	r2, r4
 8013330:	462b      	mov	r3, r5
 8013332:	f7ed f975 	bl	8000620 <__aeabi_dmul>
 8013336:	f1ba 3fff 	cmp.w	sl, #4294967295
 801333a:	4602      	mov	r2, r0
 801333c:	460b      	mov	r3, r1
 801333e:	d148      	bne.n	80133d2 <atan+0x252>
 8013340:	4620      	mov	r0, r4
 8013342:	4629      	mov	r1, r5
 8013344:	f7ec ffb4 	bl	80002b0 <__aeabi_dsub>
 8013348:	e72f      	b.n	80131aa <atan+0x2a>
 801334a:	2200      	movs	r2, #0
 801334c:	4b51      	ldr	r3, [pc, #324]	@ (8013494 <atan+0x314>)
 801334e:	4620      	mov	r0, r4
 8013350:	4629      	mov	r1, r5
 8013352:	f7ec ffad 	bl	80002b0 <__aeabi_dsub>
 8013356:	4606      	mov	r6, r0
 8013358:	460f      	mov	r7, r1
 801335a:	2200      	movs	r2, #0
 801335c:	4b4d      	ldr	r3, [pc, #308]	@ (8013494 <atan+0x314>)
 801335e:	4620      	mov	r0, r4
 8013360:	4629      	mov	r1, r5
 8013362:	f04f 0a01 	mov.w	sl, #1
 8013366:	f7ec ffa5 	bl	80002b4 <__adddf3>
 801336a:	4602      	mov	r2, r0
 801336c:	460b      	mov	r3, r1
 801336e:	4630      	mov	r0, r6
 8013370:	4639      	mov	r1, r7
 8013372:	f7ed fa7f 	bl	8000874 <__aeabi_ddiv>
 8013376:	4604      	mov	r4, r0
 8013378:	460d      	mov	r5, r1
 801337a:	e765      	b.n	8013248 <atan+0xc8>
 801337c:	4b47      	ldr	r3, [pc, #284]	@ (801349c <atan+0x31c>)
 801337e:	429e      	cmp	r6, r3
 8013380:	d21c      	bcs.n	80133bc <atan+0x23c>
 8013382:	2200      	movs	r2, #0
 8013384:	4b46      	ldr	r3, [pc, #280]	@ (80134a0 <atan+0x320>)
 8013386:	4620      	mov	r0, r4
 8013388:	4629      	mov	r1, r5
 801338a:	f7ec ff91 	bl	80002b0 <__aeabi_dsub>
 801338e:	2200      	movs	r2, #0
 8013390:	4606      	mov	r6, r0
 8013392:	460f      	mov	r7, r1
 8013394:	4b42      	ldr	r3, [pc, #264]	@ (80134a0 <atan+0x320>)
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f04f 0a02 	mov.w	sl, #2
 801339e:	f7ed f93f 	bl	8000620 <__aeabi_dmul>
 80133a2:	2200      	movs	r2, #0
 80133a4:	4b3b      	ldr	r3, [pc, #236]	@ (8013494 <atan+0x314>)
 80133a6:	f7ec ff85 	bl	80002b4 <__adddf3>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	4630      	mov	r0, r6
 80133b0:	4639      	mov	r1, r7
 80133b2:	f7ed fa5f 	bl	8000874 <__aeabi_ddiv>
 80133b6:	4604      	mov	r4, r0
 80133b8:	460d      	mov	r5, r1
 80133ba:	e745      	b.n	8013248 <atan+0xc8>
 80133bc:	4622      	mov	r2, r4
 80133be:	462b      	mov	r3, r5
 80133c0:	2000      	movs	r0, #0
 80133c2:	4938      	ldr	r1, [pc, #224]	@ (80134a4 <atan+0x324>)
 80133c4:	f7ed fa56 	bl	8000874 <__aeabi_ddiv>
 80133c8:	f04f 0a03 	mov.w	sl, #3
 80133cc:	4604      	mov	r4, r0
 80133ce:	460d      	mov	r5, r1
 80133d0:	e73a      	b.n	8013248 <atan+0xc8>
 80133d2:	4b35      	ldr	r3, [pc, #212]	@ (80134a8 <atan+0x328>)
 80133d4:	4e35      	ldr	r6, [pc, #212]	@ (80134ac <atan+0x32c>)
 80133d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80133da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e2:	f7ec ff65 	bl	80002b0 <__aeabi_dsub>
 80133e6:	4622      	mov	r2, r4
 80133e8:	462b      	mov	r3, r5
 80133ea:	f7ec ff61 	bl	80002b0 <__aeabi_dsub>
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133f6:	f7ec ff5b 	bl	80002b0 <__aeabi_dsub>
 80133fa:	f1bb 0f00 	cmp.w	fp, #0
 80133fe:	4604      	mov	r4, r0
 8013400:	460d      	mov	r5, r1
 8013402:	f6bf aedc 	bge.w	80131be <atan+0x3e>
 8013406:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801340a:	461d      	mov	r5, r3
 801340c:	e6d7      	b.n	80131be <atan+0x3e>
 801340e:	a51c      	add	r5, pc, #112	@ (adr r5, 8013480 <atan+0x300>)
 8013410:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013414:	e6d3      	b.n	80131be <atan+0x3e>
 8013416:	bf00      	nop
 8013418:	54442d18 	.word	0x54442d18
 801341c:	3ff921fb 	.word	0x3ff921fb
 8013420:	8800759c 	.word	0x8800759c
 8013424:	7e37e43c 	.word	0x7e37e43c
 8013428:	e322da11 	.word	0xe322da11
 801342c:	3f90ad3a 	.word	0x3f90ad3a
 8013430:	24760deb 	.word	0x24760deb
 8013434:	3fa97b4b 	.word	0x3fa97b4b
 8013438:	a0d03d51 	.word	0xa0d03d51
 801343c:	3fb10d66 	.word	0x3fb10d66
 8013440:	c54c206e 	.word	0xc54c206e
 8013444:	3fb745cd 	.word	0x3fb745cd
 8013448:	920083ff 	.word	0x920083ff
 801344c:	3fc24924 	.word	0x3fc24924
 8013450:	5555550d 	.word	0x5555550d
 8013454:	3fd55555 	.word	0x3fd55555
 8013458:	2c6a6c2f 	.word	0x2c6a6c2f
 801345c:	bfa2b444 	.word	0xbfa2b444
 8013460:	52defd9a 	.word	0x52defd9a
 8013464:	3fadde2d 	.word	0x3fadde2d
 8013468:	af749a6d 	.word	0xaf749a6d
 801346c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013470:	fe231671 	.word	0xfe231671
 8013474:	3fbc71c6 	.word	0x3fbc71c6
 8013478:	9998ebc4 	.word	0x9998ebc4
 801347c:	3fc99999 	.word	0x3fc99999
 8013480:	54442d18 	.word	0x54442d18
 8013484:	bff921fb 	.word	0xbff921fb
 8013488:	440fffff 	.word	0x440fffff
 801348c:	7ff00000 	.word	0x7ff00000
 8013490:	3fdbffff 	.word	0x3fdbffff
 8013494:	3ff00000 	.word	0x3ff00000
 8013498:	3ff2ffff 	.word	0x3ff2ffff
 801349c:	40038000 	.word	0x40038000
 80134a0:	3ff80000 	.word	0x3ff80000
 80134a4:	bff00000 	.word	0xbff00000
 80134a8:	08014b20 	.word	0x08014b20
 80134ac:	08014b40 	.word	0x08014b40

080134b0 <fabs>:
 80134b0:	ec51 0b10 	vmov	r0, r1, d0
 80134b4:	4602      	mov	r2, r0
 80134b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134ba:	ec43 2b10 	vmov	d0, r2, r3
 80134be:	4770      	bx	lr

080134c0 <scalbn>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	ec55 4b10 	vmov	r4, r5, d0
 80134c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80134ca:	4606      	mov	r6, r0
 80134cc:	462b      	mov	r3, r5
 80134ce:	b991      	cbnz	r1, 80134f6 <scalbn+0x36>
 80134d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80134d4:	4323      	orrs	r3, r4
 80134d6:	d03d      	beq.n	8013554 <scalbn+0x94>
 80134d8:	4b35      	ldr	r3, [pc, #212]	@ (80135b0 <scalbn+0xf0>)
 80134da:	4620      	mov	r0, r4
 80134dc:	4629      	mov	r1, r5
 80134de:	2200      	movs	r2, #0
 80134e0:	f7ed f89e 	bl	8000620 <__aeabi_dmul>
 80134e4:	4b33      	ldr	r3, [pc, #204]	@ (80135b4 <scalbn+0xf4>)
 80134e6:	4604      	mov	r4, r0
 80134e8:	460d      	mov	r5, r1
 80134ea:	429e      	cmp	r6, r3
 80134ec:	da0f      	bge.n	801350e <scalbn+0x4e>
 80134ee:	a328      	add	r3, pc, #160	@ (adr r3, 8013590 <scalbn+0xd0>)
 80134f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f4:	e01e      	b.n	8013534 <scalbn+0x74>
 80134f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80134fa:	4291      	cmp	r1, r2
 80134fc:	d10b      	bne.n	8013516 <scalbn+0x56>
 80134fe:	4622      	mov	r2, r4
 8013500:	4620      	mov	r0, r4
 8013502:	4629      	mov	r1, r5
 8013504:	f7ec fed6 	bl	80002b4 <__adddf3>
 8013508:	4604      	mov	r4, r0
 801350a:	460d      	mov	r5, r1
 801350c:	e022      	b.n	8013554 <scalbn+0x94>
 801350e:	460b      	mov	r3, r1
 8013510:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013514:	3936      	subs	r1, #54	@ 0x36
 8013516:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801351a:	4296      	cmp	r6, r2
 801351c:	dd0d      	ble.n	801353a <scalbn+0x7a>
 801351e:	2d00      	cmp	r5, #0
 8013520:	a11d      	add	r1, pc, #116	@ (adr r1, 8013598 <scalbn+0xd8>)
 8013522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013526:	da02      	bge.n	801352e <scalbn+0x6e>
 8013528:	a11d      	add	r1, pc, #116	@ (adr r1, 80135a0 <scalbn+0xe0>)
 801352a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801352e:	a31a      	add	r3, pc, #104	@ (adr r3, 8013598 <scalbn+0xd8>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	f7ed f874 	bl	8000620 <__aeabi_dmul>
 8013538:	e7e6      	b.n	8013508 <scalbn+0x48>
 801353a:	1872      	adds	r2, r6, r1
 801353c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013540:	428a      	cmp	r2, r1
 8013542:	dcec      	bgt.n	801351e <scalbn+0x5e>
 8013544:	2a00      	cmp	r2, #0
 8013546:	dd08      	ble.n	801355a <scalbn+0x9a>
 8013548:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801354c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013550:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013554:	ec45 4b10 	vmov	d0, r4, r5
 8013558:	bd70      	pop	{r4, r5, r6, pc}
 801355a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801355e:	da08      	bge.n	8013572 <scalbn+0xb2>
 8013560:	2d00      	cmp	r5, #0
 8013562:	a10b      	add	r1, pc, #44	@ (adr r1, 8013590 <scalbn+0xd0>)
 8013564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013568:	dac1      	bge.n	80134ee <scalbn+0x2e>
 801356a:	a10f      	add	r1, pc, #60	@ (adr r1, 80135a8 <scalbn+0xe8>)
 801356c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013570:	e7bd      	b.n	80134ee <scalbn+0x2e>
 8013572:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013576:	3236      	adds	r2, #54	@ 0x36
 8013578:	4620      	mov	r0, r4
 801357a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801357e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013582:	2200      	movs	r2, #0
 8013584:	4b0c      	ldr	r3, [pc, #48]	@ (80135b8 <scalbn+0xf8>)
 8013586:	4629      	mov	r1, r5
 8013588:	e7d4      	b.n	8013534 <scalbn+0x74>
 801358a:	bf00      	nop
 801358c:	f3af 8000 	nop.w
 8013590:	c2f8f359 	.word	0xc2f8f359
 8013594:	01a56e1f 	.word	0x01a56e1f
 8013598:	8800759c 	.word	0x8800759c
 801359c:	7e37e43c 	.word	0x7e37e43c
 80135a0:	8800759c 	.word	0x8800759c
 80135a4:	fe37e43c 	.word	0xfe37e43c
 80135a8:	c2f8f359 	.word	0xc2f8f359
 80135ac:	81a56e1f 	.word	0x81a56e1f
 80135b0:	43500000 	.word	0x43500000
 80135b4:	ffff3cb0 	.word	0xffff3cb0
 80135b8:	3c900000 	.word	0x3c900000

080135bc <with_errno>:
 80135bc:	b510      	push	{r4, lr}
 80135be:	ed2d 8b02 	vpush	{d8}
 80135c2:	eeb0 8a40 	vmov.f32	s16, s0
 80135c6:	eef0 8a60 	vmov.f32	s17, s1
 80135ca:	4604      	mov	r4, r0
 80135cc:	f7fa fefc 	bl	800e3c8 <__errno>
 80135d0:	6004      	str	r4, [r0, #0]
 80135d2:	eeb0 0a48 	vmov.f32	s0, s16
 80135d6:	eef0 0a68 	vmov.f32	s1, s17
 80135da:	ecbd 8b02 	vpop	{d8}
 80135de:	bd10      	pop	{r4, pc}

080135e0 <xflow>:
 80135e0:	4603      	mov	r3, r0
 80135e2:	b507      	push	{r0, r1, r2, lr}
 80135e4:	ec51 0b10 	vmov	r0, r1, d0
 80135e8:	b183      	cbz	r3, 801360c <xflow+0x2c>
 80135ea:	4602      	mov	r2, r0
 80135ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135f0:	e9cd 2300 	strd	r2, r3, [sp]
 80135f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135f8:	f7ed f812 	bl	8000620 <__aeabi_dmul>
 80135fc:	ec41 0b10 	vmov	d0, r0, r1
 8013600:	2022      	movs	r0, #34	@ 0x22
 8013602:	b003      	add	sp, #12
 8013604:	f85d eb04 	ldr.w	lr, [sp], #4
 8013608:	f7ff bfd8 	b.w	80135bc <with_errno>
 801360c:	4602      	mov	r2, r0
 801360e:	460b      	mov	r3, r1
 8013610:	e7ee      	b.n	80135f0 <xflow+0x10>
 8013612:	0000      	movs	r0, r0
 8013614:	0000      	movs	r0, r0
	...

08013618 <__math_uflow>:
 8013618:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013620 <__math_uflow+0x8>
 801361c:	f7ff bfe0 	b.w	80135e0 <xflow>
 8013620:	00000000 	.word	0x00000000
 8013624:	10000000 	.word	0x10000000

08013628 <__math_oflow>:
 8013628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013630 <__math_oflow+0x8>
 801362c:	f7ff bfd8 	b.w	80135e0 <xflow>
 8013630:	00000000 	.word	0x00000000
 8013634:	70000000 	.word	0x70000000

08013638 <__kernel_rem_pio2>:
 8013638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363c:	ed2d 8b02 	vpush	{d8}
 8013640:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013644:	f112 0f14 	cmn.w	r2, #20
 8013648:	f04f 0500 	mov.w	r5, #0
 801364c:	9306      	str	r3, [sp, #24]
 801364e:	bfa8      	it	ge
 8013650:	1ed4      	subge	r4, r2, #3
 8013652:	4bbd      	ldr	r3, [pc, #756]	@ (8013948 <__kernel_rem_pio2+0x310>)
 8013654:	bfb8      	it	lt
 8013656:	2400      	movlt	r4, #0
 8013658:	9104      	str	r1, [sp, #16]
 801365a:	ae20      	add	r6, sp, #128	@ 0x80
 801365c:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801365e:	9008      	str	r0, [sp, #32]
 8013660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	9b06      	ldr	r3, [sp, #24]
 8013668:	f103 33ff 	add.w	r3, r3, #4294967295
 801366c:	9305      	str	r3, [sp, #20]
 801366e:	bfa4      	itt	ge
 8013670:	2318      	movge	r3, #24
 8013672:	fb94 f4f3 	sdivge	r4, r4, r3
 8013676:	f06f 0317 	mvn.w	r3, #23
 801367a:	fb04 3303 	mla	r3, r4, r3, r3
 801367e:	eb03 0b02 	add.w	fp, r3, r2
 8013682:	9b00      	ldr	r3, [sp, #0]
 8013684:	9a05      	ldr	r2, [sp, #20]
 8013686:	eb03 0802 	add.w	r8, r3, r2
 801368a:	1aa7      	subs	r7, r4, r2
 801368c:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801368e:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8013938 <__kernel_rem_pio2+0x300>
 8013692:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013696:	4545      	cmp	r5, r8
 8013698:	dd13      	ble.n	80136c2 <__kernel_rem_pio2+0x8a>
 801369a:	aa20      	add	r2, sp, #128	@ 0x80
 801369c:	9b06      	ldr	r3, [sp, #24]
 801369e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80136a2:	f04f 0800 	mov.w	r8, #0
 80136a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80136aa:	9b00      	ldr	r3, [sp, #0]
 80136ac:	4598      	cmp	r8, r3
 80136ae:	dc30      	bgt.n	8013712 <__kernel_rem_pio2+0xda>
 80136b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136b4:	462f      	mov	r7, r5
 80136b6:	2600      	movs	r6, #0
 80136b8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013938 <__kernel_rem_pio2+0x300>
 80136bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136c0:	e01b      	b.n	80136fa <__kernel_rem_pio2+0xc2>
 80136c2:	42ef      	cmn	r7, r5
 80136c4:	d407      	bmi.n	80136d6 <__kernel_rem_pio2+0x9e>
 80136c6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80136ca:	f7ec ff3f 	bl	800054c <__aeabi_i2d>
 80136ce:	3501      	adds	r5, #1
 80136d0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80136d4:	e7df      	b.n	8013696 <__kernel_rem_pio2+0x5e>
 80136d6:	ec51 0b18 	vmov	r0, r1, d8
 80136da:	e7f8      	b.n	80136ce <__kernel_rem_pio2+0x96>
 80136dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136e0:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80136e4:	3601      	adds	r6, #1
 80136e6:	f7ec ff9b 	bl	8000620 <__aeabi_dmul>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136f2:	f7ec fddf 	bl	80002b4 <__adddf3>
 80136f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136fa:	9b05      	ldr	r3, [sp, #20]
 80136fc:	3f08      	subs	r7, #8
 80136fe:	429e      	cmp	r6, r3
 8013700:	ddec      	ble.n	80136dc <__kernel_rem_pio2+0xa4>
 8013702:	f108 0801 	add.w	r8, r8, #1
 8013706:	3508      	adds	r5, #8
 8013708:	ed9d 7b02 	vldr	d7, [sp, #8]
 801370c:	ecaa 7b02 	vstmia	sl!, {d7}
 8013710:	e7cb      	b.n	80136aa <__kernel_rem_pio2+0x72>
 8013712:	9b00      	ldr	r3, [sp, #0]
 8013714:	aa0c      	add	r2, sp, #48	@ 0x30
 8013716:	f8dd 8000 	ldr.w	r8, [sp]
 801371a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801371e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013720:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013722:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013726:	9309      	str	r3, [sp, #36]	@ 0x24
 8013728:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801372c:	ac0c      	add	r4, sp, #48	@ 0x30
 801372e:	46c2      	mov	sl, r8
 8013730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013732:	ab98      	add	r3, sp, #608	@ 0x260
 8013734:	46a1      	mov	r9, r4
 8013736:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801373a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801373e:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013740:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013748:	f1ba 0f00 	cmp.w	sl, #0
 801374c:	f1a5 0508 	sub.w	r5, r5, #8
 8013750:	dc77      	bgt.n	8013842 <__kernel_rem_pio2+0x20a>
 8013752:	4658      	mov	r0, fp
 8013754:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013758:	f7ff feb2 	bl	80134c0 <scalbn>
 801375c:	2200      	movs	r2, #0
 801375e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013762:	ec57 6b10 	vmov	r6, r7, d0
 8013766:	4630      	mov	r0, r6
 8013768:	4639      	mov	r1, r7
 801376a:	f7ec ff59 	bl	8000620 <__aeabi_dmul>
 801376e:	ec41 0b10 	vmov	d0, r0, r1
 8013772:	f000 fab9 	bl	8013ce8 <floor>
 8013776:	2200      	movs	r2, #0
 8013778:	4b74      	ldr	r3, [pc, #464]	@ (801394c <__kernel_rem_pio2+0x314>)
 801377a:	ec51 0b10 	vmov	r0, r1, d0
 801377e:	f7ec ff4f 	bl	8000620 <__aeabi_dmul>
 8013782:	4602      	mov	r2, r0
 8013784:	460b      	mov	r3, r1
 8013786:	4630      	mov	r0, r6
 8013788:	4639      	mov	r1, r7
 801378a:	f7ec fd91 	bl	80002b0 <__aeabi_dsub>
 801378e:	460f      	mov	r7, r1
 8013790:	4606      	mov	r6, r0
 8013792:	f7ed f9f5 	bl	8000b80 <__aeabi_d2iz>
 8013796:	9002      	str	r0, [sp, #8]
 8013798:	f7ec fed8 	bl	800054c <__aeabi_i2d>
 801379c:	4602      	mov	r2, r0
 801379e:	460b      	mov	r3, r1
 80137a0:	4630      	mov	r0, r6
 80137a2:	4639      	mov	r1, r7
 80137a4:	f7ec fd84 	bl	80002b0 <__aeabi_dsub>
 80137a8:	f1bb 0f00 	cmp.w	fp, #0
 80137ac:	4606      	mov	r6, r0
 80137ae:	460f      	mov	r7, r1
 80137b0:	dd6c      	ble.n	801388c <__kernel_rem_pio2+0x254>
 80137b2:	f108 31ff 	add.w	r1, r8, #4294967295
 80137b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80137b8:	f1cb 0018 	rsb	r0, fp, #24
 80137bc:	9d02      	ldr	r5, [sp, #8]
 80137be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137c2:	fa43 f200 	asr.w	r2, r3, r0
 80137c6:	4415      	add	r5, r2
 80137c8:	4082      	lsls	r2, r0
 80137ca:	1a9b      	subs	r3, r3, r2
 80137cc:	aa0c      	add	r2, sp, #48	@ 0x30
 80137ce:	9502      	str	r5, [sp, #8]
 80137d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80137d4:	f1cb 0217 	rsb	r2, fp, #23
 80137d8:	fa43 f902 	asr.w	r9, r3, r2
 80137dc:	f1b9 0f00 	cmp.w	r9, #0
 80137e0:	dd64      	ble.n	80138ac <__kernel_rem_pio2+0x274>
 80137e2:	9b02      	ldr	r3, [sp, #8]
 80137e4:	2200      	movs	r2, #0
 80137e6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80137ea:	3301      	adds	r3, #1
 80137ec:	4615      	mov	r5, r2
 80137ee:	9302      	str	r3, [sp, #8]
 80137f0:	4590      	cmp	r8, r2
 80137f2:	f300 80b7 	bgt.w	8013964 <__kernel_rem_pio2+0x32c>
 80137f6:	f1bb 0f00 	cmp.w	fp, #0
 80137fa:	dd07      	ble.n	801380c <__kernel_rem_pio2+0x1d4>
 80137fc:	f1bb 0f01 	cmp.w	fp, #1
 8013800:	f000 80be 	beq.w	8013980 <__kernel_rem_pio2+0x348>
 8013804:	f1bb 0f02 	cmp.w	fp, #2
 8013808:	f000 80c5 	beq.w	8013996 <__kernel_rem_pio2+0x35e>
 801380c:	f1b9 0f02 	cmp.w	r9, #2
 8013810:	d14c      	bne.n	80138ac <__kernel_rem_pio2+0x274>
 8013812:	4632      	mov	r2, r6
 8013814:	463b      	mov	r3, r7
 8013816:	2000      	movs	r0, #0
 8013818:	494d      	ldr	r1, [pc, #308]	@ (8013950 <__kernel_rem_pio2+0x318>)
 801381a:	f7ec fd49 	bl	80002b0 <__aeabi_dsub>
 801381e:	4606      	mov	r6, r0
 8013820:	460f      	mov	r7, r1
 8013822:	2d00      	cmp	r5, #0
 8013824:	d042      	beq.n	80138ac <__kernel_rem_pio2+0x274>
 8013826:	4658      	mov	r0, fp
 8013828:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8013940 <__kernel_rem_pio2+0x308>
 801382c:	f7ff fe48 	bl	80134c0 <scalbn>
 8013830:	4630      	mov	r0, r6
 8013832:	4639      	mov	r1, r7
 8013834:	ec53 2b10 	vmov	r2, r3, d0
 8013838:	f7ec fd3a 	bl	80002b0 <__aeabi_dsub>
 801383c:	4606      	mov	r6, r0
 801383e:	460f      	mov	r7, r1
 8013840:	e034      	b.n	80138ac <__kernel_rem_pio2+0x274>
 8013842:	2200      	movs	r2, #0
 8013844:	4b43      	ldr	r3, [pc, #268]	@ (8013954 <__kernel_rem_pio2+0x31c>)
 8013846:	f10a 3aff 	add.w	sl, sl, #4294967295
 801384a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801384e:	f7ec fee7 	bl	8000620 <__aeabi_dmul>
 8013852:	f7ed f995 	bl	8000b80 <__aeabi_d2iz>
 8013856:	f7ec fe79 	bl	800054c <__aeabi_i2d>
 801385a:	2200      	movs	r2, #0
 801385c:	4b3e      	ldr	r3, [pc, #248]	@ (8013958 <__kernel_rem_pio2+0x320>)
 801385e:	4606      	mov	r6, r0
 8013860:	460f      	mov	r7, r1
 8013862:	f7ec fedd 	bl	8000620 <__aeabi_dmul>
 8013866:	4602      	mov	r2, r0
 8013868:	460b      	mov	r3, r1
 801386a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801386e:	f7ec fd1f 	bl	80002b0 <__aeabi_dsub>
 8013872:	f7ed f985 	bl	8000b80 <__aeabi_d2iz>
 8013876:	4639      	mov	r1, r7
 8013878:	f849 0b04 	str.w	r0, [r9], #4
 801387c:	4630      	mov	r0, r6
 801387e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013882:	f7ec fd17 	bl	80002b4 <__adddf3>
 8013886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801388a:	e75d      	b.n	8013748 <__kernel_rem_pio2+0x110>
 801388c:	d107      	bne.n	801389e <__kernel_rem_pio2+0x266>
 801388e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013892:	aa0c      	add	r2, sp, #48	@ 0x30
 8013894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013898:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801389c:	e79e      	b.n	80137dc <__kernel_rem_pio2+0x1a4>
 801389e:	2200      	movs	r2, #0
 80138a0:	4b2e      	ldr	r3, [pc, #184]	@ (801395c <__kernel_rem_pio2+0x324>)
 80138a2:	f7ed f943 	bl	8000b2c <__aeabi_dcmpge>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d143      	bne.n	8013932 <__kernel_rem_pio2+0x2fa>
 80138aa:	4681      	mov	r9, r0
 80138ac:	2200      	movs	r2, #0
 80138ae:	2300      	movs	r3, #0
 80138b0:	4630      	mov	r0, r6
 80138b2:	4639      	mov	r1, r7
 80138b4:	f7ed f91c 	bl	8000af0 <__aeabi_dcmpeq>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	f000 80be 	beq.w	8013a3a <__kernel_rem_pio2+0x402>
 80138be:	f108 33ff 	add.w	r3, r8, #4294967295
 80138c2:	2200      	movs	r2, #0
 80138c4:	9900      	ldr	r1, [sp, #0]
 80138c6:	428b      	cmp	r3, r1
 80138c8:	da6d      	bge.n	80139a6 <__kernel_rem_pio2+0x36e>
 80138ca:	2a00      	cmp	r2, #0
 80138cc:	f000 8088 	beq.w	80139e0 <__kernel_rem_pio2+0x3a8>
 80138d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80138d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80138d6:	f1ab 0b18 	sub.w	fp, fp, #24
 80138da:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d0f6      	beq.n	80138d0 <__kernel_rem_pio2+0x298>
 80138e2:	4658      	mov	r0, fp
 80138e4:	4646      	mov	r6, r8
 80138e6:	f04f 0a00 	mov.w	sl, #0
 80138ea:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8013954 <__kernel_rem_pio2+0x31c>
 80138ee:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8013940 <__kernel_rem_pio2+0x308>
 80138f2:	f7ff fde5 	bl	80134c0 <scalbn>
 80138f6:	f108 0301 	add.w	r3, r8, #1
 80138fa:	00da      	lsls	r2, r3, #3
 80138fc:	9205      	str	r2, [sp, #20]
 80138fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013900:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013904:	ec55 4b10 	vmov	r4, r5, d0
 8013908:	2e00      	cmp	r6, #0
 801390a:	f280 80ce 	bge.w	8013aaa <__kernel_rem_pio2+0x472>
 801390e:	4644      	mov	r4, r8
 8013910:	2c00      	cmp	r4, #0
 8013912:	f2c0 80fc 	blt.w	8013b0e <__kernel_rem_pio2+0x4d6>
 8013916:	4b12      	ldr	r3, [pc, #72]	@ (8013960 <__kernel_rem_pio2+0x328>)
 8013918:	f04f 0a00 	mov.w	sl, #0
 801391c:	f04f 0b00 	mov.w	fp, #0
 8013920:	2600      	movs	r6, #0
 8013922:	461f      	mov	r7, r3
 8013924:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013926:	eba8 0504 	sub.w	r5, r8, r4
 801392a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801392e:	9306      	str	r3, [sp, #24]
 8013930:	e0e1      	b.n	8013af6 <__kernel_rem_pio2+0x4be>
 8013932:	f04f 0902 	mov.w	r9, #2
 8013936:	e754      	b.n	80137e2 <__kernel_rem_pio2+0x1aa>
	...
 8013944:	3ff00000 	.word	0x3ff00000
 8013948:	08014ba0 	.word	0x08014ba0
 801394c:	40200000 	.word	0x40200000
 8013950:	3ff00000 	.word	0x3ff00000
 8013954:	3e700000 	.word	0x3e700000
 8013958:	41700000 	.word	0x41700000
 801395c:	3fe00000 	.word	0x3fe00000
 8013960:	08014b60 	.word	0x08014b60
 8013964:	f854 3b04 	ldr.w	r3, [r4], #4
 8013968:	b945      	cbnz	r5, 801397c <__kernel_rem_pio2+0x344>
 801396a:	b123      	cbz	r3, 8013976 <__kernel_rem_pio2+0x33e>
 801396c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013970:	f844 3c04 	str.w	r3, [r4, #-4]
 8013974:	2301      	movs	r3, #1
 8013976:	3201      	adds	r2, #1
 8013978:	461d      	mov	r5, r3
 801397a:	e739      	b.n	80137f0 <__kernel_rem_pio2+0x1b8>
 801397c:	1acb      	subs	r3, r1, r3
 801397e:	e7f7      	b.n	8013970 <__kernel_rem_pio2+0x338>
 8013980:	f108 32ff 	add.w	r2, r8, #4294967295
 8013984:	ab0c      	add	r3, sp, #48	@ 0x30
 8013986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801398a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801398e:	a90c      	add	r1, sp, #48	@ 0x30
 8013990:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013994:	e73a      	b.n	801380c <__kernel_rem_pio2+0x1d4>
 8013996:	f108 32ff 	add.w	r2, r8, #4294967295
 801399a:	ab0c      	add	r3, sp, #48	@ 0x30
 801399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80139a4:	e7f3      	b.n	801398e <__kernel_rem_pio2+0x356>
 80139a6:	a90c      	add	r1, sp, #48	@ 0x30
 80139a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80139ac:	3b01      	subs	r3, #1
 80139ae:	430a      	orrs	r2, r1
 80139b0:	e788      	b.n	80138c4 <__kernel_rem_pio2+0x28c>
 80139b2:	3401      	adds	r4, #1
 80139b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80139b8:	2a00      	cmp	r2, #0
 80139ba:	d0fa      	beq.n	80139b2 <__kernel_rem_pio2+0x37a>
 80139bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139be:	aa20      	add	r2, sp, #128	@ 0x80
 80139c0:	f108 0701 	add.w	r7, r8, #1
 80139c4:	4444      	add	r4, r8
 80139c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80139ca:	eb0d 0503 	add.w	r5, sp, r3
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	4443      	add	r3, r8
 80139d2:	3d98      	subs	r5, #152	@ 0x98
 80139d4:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80139d8:	42bc      	cmp	r4, r7
 80139da:	da04      	bge.n	80139e6 <__kernel_rem_pio2+0x3ae>
 80139dc:	46a0      	mov	r8, r4
 80139de:	e6a3      	b.n	8013728 <__kernel_rem_pio2+0xf0>
 80139e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139e2:	2401      	movs	r4, #1
 80139e4:	e7e6      	b.n	80139b4 <__kernel_rem_pio2+0x37c>
 80139e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139e8:	f04f 0800 	mov.w	r8, #0
 80139ec:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80139f0:	f7ec fdac 	bl	800054c <__aeabi_i2d>
 80139f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80139f8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013cb8 <__kernel_rem_pio2+0x680>
 80139fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013a00:	46b2      	mov	sl, r6
 8013a02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a06:	9b05      	ldr	r3, [sp, #20]
 8013a08:	4598      	cmp	r8, r3
 8013a0a:	dd05      	ble.n	8013a18 <__kernel_rem_pio2+0x3e0>
 8013a0c:	3701      	adds	r7, #1
 8013a0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a12:	eca5 7b02 	vstmia	r5!, {d7}
 8013a16:	e7df      	b.n	80139d8 <__kernel_rem_pio2+0x3a0>
 8013a18:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013a1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a20:	f7ec fdfe 	bl	8000620 <__aeabi_dmul>
 8013a24:	4602      	mov	r2, r0
 8013a26:	460b      	mov	r3, r1
 8013a28:	f108 0801 	add.w	r8, r8, #1
 8013a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a30:	f7ec fc40 	bl	80002b4 <__adddf3>
 8013a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a38:	e7e5      	b.n	8013a06 <__kernel_rem_pio2+0x3ce>
 8013a3a:	f1cb 0000 	rsb	r0, fp, #0
 8013a3e:	ec47 6b10 	vmov	d0, r6, r7
 8013a42:	f7ff fd3d 	bl	80134c0 <scalbn>
 8013a46:	2200      	movs	r2, #0
 8013a48:	4b9d      	ldr	r3, [pc, #628]	@ (8013cc0 <__kernel_rem_pio2+0x688>)
 8013a4a:	ec55 4b10 	vmov	r4, r5, d0
 8013a4e:	4620      	mov	r0, r4
 8013a50:	4629      	mov	r1, r5
 8013a52:	f7ed f86b 	bl	8000b2c <__aeabi_dcmpge>
 8013a56:	b300      	cbz	r0, 8013a9a <__kernel_rem_pio2+0x462>
 8013a58:	2200      	movs	r2, #0
 8013a5a:	4b9a      	ldr	r3, [pc, #616]	@ (8013cc4 <__kernel_rem_pio2+0x68c>)
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4629      	mov	r1, r5
 8013a60:	f7ec fdde 	bl	8000620 <__aeabi_dmul>
 8013a64:	f10b 0b18 	add.w	fp, fp, #24
 8013a68:	f7ed f88a 	bl	8000b80 <__aeabi_d2iz>
 8013a6c:	4606      	mov	r6, r0
 8013a6e:	f7ec fd6d 	bl	800054c <__aeabi_i2d>
 8013a72:	2200      	movs	r2, #0
 8013a74:	4b92      	ldr	r3, [pc, #584]	@ (8013cc0 <__kernel_rem_pio2+0x688>)
 8013a76:	f7ec fdd3 	bl	8000620 <__aeabi_dmul>
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	4629      	mov	r1, r5
 8013a80:	4620      	mov	r0, r4
 8013a82:	f7ec fc15 	bl	80002b0 <__aeabi_dsub>
 8013a86:	f7ed f87b 	bl	8000b80 <__aeabi_d2iz>
 8013a8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013a90:	f108 0801 	add.w	r8, r8, #1
 8013a94:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013a98:	e723      	b.n	80138e2 <__kernel_rem_pio2+0x2aa>
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	f7ed f86f 	bl	8000b80 <__aeabi_d2iz>
 8013aa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8013aa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013aa8:	e71b      	b.n	80138e2 <__kernel_rem_pio2+0x2aa>
 8013aaa:	ab0c      	add	r3, sp, #48	@ 0x30
 8013aac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013ab0:	3e01      	subs	r6, #1
 8013ab2:	f7ec fd4b 	bl	800054c <__aeabi_i2d>
 8013ab6:	4622      	mov	r2, r4
 8013ab8:	462b      	mov	r3, r5
 8013aba:	f7ec fdb1 	bl	8000620 <__aeabi_dmul>
 8013abe:	4652      	mov	r2, sl
 8013ac0:	465b      	mov	r3, fp
 8013ac2:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	4629      	mov	r1, r5
 8013aca:	f7ec fda9 	bl	8000620 <__aeabi_dmul>
 8013ace:	4604      	mov	r4, r0
 8013ad0:	460d      	mov	r5, r1
 8013ad2:	e719      	b.n	8013908 <__kernel_rem_pio2+0x2d0>
 8013ad4:	9906      	ldr	r1, [sp, #24]
 8013ad6:	3601      	adds	r6, #1
 8013ad8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013adc:	9106      	str	r1, [sp, #24]
 8013ade:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013ae2:	f7ec fd9d 	bl	8000620 <__aeabi_dmul>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	460b      	mov	r3, r1
 8013aea:	4650      	mov	r0, sl
 8013aec:	4659      	mov	r1, fp
 8013aee:	f7ec fbe1 	bl	80002b4 <__adddf3>
 8013af2:	4682      	mov	sl, r0
 8013af4:	468b      	mov	fp, r1
 8013af6:	9b00      	ldr	r3, [sp, #0]
 8013af8:	429e      	cmp	r6, r3
 8013afa:	dc01      	bgt.n	8013b00 <__kernel_rem_pio2+0x4c8>
 8013afc:	42b5      	cmp	r5, r6
 8013afe:	dae9      	bge.n	8013ad4 <__kernel_rem_pio2+0x49c>
 8013b00:	ab48      	add	r3, sp, #288	@ 0x120
 8013b02:	3c01      	subs	r4, #1
 8013b04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013b08:	e9c5 ab00 	strd	sl, fp, [r5]
 8013b0c:	e700      	b.n	8013910 <__kernel_rem_pio2+0x2d8>
 8013b0e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b10:	2b02      	cmp	r3, #2
 8013b12:	dc0b      	bgt.n	8013b2c <__kernel_rem_pio2+0x4f4>
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	dc39      	bgt.n	8013b8c <__kernel_rem_pio2+0x554>
 8013b18:	d05d      	beq.n	8013bd6 <__kernel_rem_pio2+0x59e>
 8013b1a:	9b02      	ldr	r3, [sp, #8]
 8013b1c:	f003 0007 	and.w	r0, r3, #7
 8013b20:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013b24:	ecbd 8b02 	vpop	{d8}
 8013b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b2e:	2b03      	cmp	r3, #3
 8013b30:	d1f3      	bne.n	8013b1a <__kernel_rem_pio2+0x4e2>
 8013b32:	9b05      	ldr	r3, [sp, #20]
 8013b34:	46c2      	mov	sl, r8
 8013b36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013b3a:	eb0d 0403 	add.w	r4, sp, r3
 8013b3e:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013b42:	4625      	mov	r5, r4
 8013b44:	f1ba 0f00 	cmp.w	sl, #0
 8013b48:	f1a5 0508 	sub.w	r5, r5, #8
 8013b4c:	dc6b      	bgt.n	8013c26 <__kernel_rem_pio2+0x5ee>
 8013b4e:	4645      	mov	r5, r8
 8013b50:	2d01      	cmp	r5, #1
 8013b52:	f1a4 0408 	sub.w	r4, r4, #8
 8013b56:	f300 8087 	bgt.w	8013c68 <__kernel_rem_pio2+0x630>
 8013b5a:	9c05      	ldr	r4, [sp, #20]
 8013b5c:	ab48      	add	r3, sp, #288	@ 0x120
 8013b5e:	2000      	movs	r0, #0
 8013b60:	2100      	movs	r1, #0
 8013b62:	441c      	add	r4, r3
 8013b64:	f1b8 0f01 	cmp.w	r8, #1
 8013b68:	f300 809c 	bgt.w	8013ca4 <__kernel_rem_pio2+0x66c>
 8013b6c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8013b70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8013b74:	f1b9 0f00 	cmp.w	r9, #0
 8013b78:	f040 80a6 	bne.w	8013cc8 <__kernel_rem_pio2+0x690>
 8013b7c:	9b04      	ldr	r3, [sp, #16]
 8013b7e:	e9c3 7800 	strd	r7, r8, [r3]
 8013b82:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013b86:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013b8a:	e7c6      	b.n	8013b1a <__kernel_rem_pio2+0x4e2>
 8013b8c:	9d05      	ldr	r5, [sp, #20]
 8013b8e:	ab48      	add	r3, sp, #288	@ 0x120
 8013b90:	4644      	mov	r4, r8
 8013b92:	2000      	movs	r0, #0
 8013b94:	441d      	add	r5, r3
 8013b96:	2100      	movs	r1, #0
 8013b98:	2c00      	cmp	r4, #0
 8013b9a:	da35      	bge.n	8013c08 <__kernel_rem_pio2+0x5d0>
 8013b9c:	f1b9 0f00 	cmp.w	r9, #0
 8013ba0:	d038      	beq.n	8013c14 <__kernel_rem_pio2+0x5dc>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ba8:	9c04      	ldr	r4, [sp, #16]
 8013baa:	ad4a      	add	r5, sp, #296	@ 0x128
 8013bac:	e9c4 2300 	strd	r2, r3, [r4]
 8013bb0:	2401      	movs	r4, #1
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013bba:	f7ec fb79 	bl	80002b0 <__aeabi_dsub>
 8013bbe:	45a0      	cmp	r8, r4
 8013bc0:	da2b      	bge.n	8013c1a <__kernel_rem_pio2+0x5e2>
 8013bc2:	f1b9 0f00 	cmp.w	r9, #0
 8013bc6:	d002      	beq.n	8013bce <__kernel_rem_pio2+0x596>
 8013bc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bcc:	4619      	mov	r1, r3
 8013bce:	9b04      	ldr	r3, [sp, #16]
 8013bd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013bd4:	e7a1      	b.n	8013b1a <__kernel_rem_pio2+0x4e2>
 8013bd6:	9c05      	ldr	r4, [sp, #20]
 8013bd8:	ab48      	add	r3, sp, #288	@ 0x120
 8013bda:	2000      	movs	r0, #0
 8013bdc:	2100      	movs	r1, #0
 8013bde:	441c      	add	r4, r3
 8013be0:	f1b8 0f00 	cmp.w	r8, #0
 8013be4:	da09      	bge.n	8013bfa <__kernel_rem_pio2+0x5c2>
 8013be6:	f1b9 0f00 	cmp.w	r9, #0
 8013bea:	d002      	beq.n	8013bf2 <__kernel_rem_pio2+0x5ba>
 8013bec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	9b04      	ldr	r3, [sp, #16]
 8013bf4:	e9c3 0100 	strd	r0, r1, [r3]
 8013bf8:	e78f      	b.n	8013b1a <__kernel_rem_pio2+0x4e2>
 8013bfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013bfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c02:	f7ec fb57 	bl	80002b4 <__adddf3>
 8013c06:	e7eb      	b.n	8013be0 <__kernel_rem_pio2+0x5a8>
 8013c08:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013c0c:	3c01      	subs	r4, #1
 8013c0e:	f7ec fb51 	bl	80002b4 <__adddf3>
 8013c12:	e7c1      	b.n	8013b98 <__kernel_rem_pio2+0x560>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	e7c6      	b.n	8013ba8 <__kernel_rem_pio2+0x570>
 8013c1a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013c1e:	3401      	adds	r4, #1
 8013c20:	f7ec fb48 	bl	80002b4 <__adddf3>
 8013c24:	e7cb      	b.n	8013bbe <__kernel_rem_pio2+0x586>
 8013c26:	ed95 7b00 	vldr	d7, [r5]
 8013c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c2e:	ed8d 7b00 	vstr	d7, [sp]
 8013c32:	ed95 7b02 	vldr	d7, [r5, #8]
 8013c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c3a:	ec53 2b17 	vmov	r2, r3, d7
 8013c3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013c42:	f7ec fb37 	bl	80002b4 <__adddf3>
 8013c46:	4602      	mov	r2, r0
 8013c48:	460b      	mov	r3, r1
 8013c4a:	4606      	mov	r6, r0
 8013c4c:	460f      	mov	r7, r1
 8013c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c52:	f7ec fb2d 	bl	80002b0 <__aeabi_dsub>
 8013c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c5a:	f7ec fb2b 	bl	80002b4 <__adddf3>
 8013c5e:	e9c5 6700 	strd	r6, r7, [r5]
 8013c62:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013c66:	e76d      	b.n	8013b44 <__kernel_rem_pio2+0x50c>
 8013c68:	ed94 7b00 	vldr	d7, [r4]
 8013c6c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013c70:	3d01      	subs	r5, #1
 8013c72:	4652      	mov	r2, sl
 8013c74:	465b      	mov	r3, fp
 8013c76:	ec51 0b17 	vmov	r0, r1, d7
 8013c7a:	ed8d 7b00 	vstr	d7, [sp]
 8013c7e:	f7ec fb19 	bl	80002b4 <__adddf3>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	4606      	mov	r6, r0
 8013c88:	460f      	mov	r7, r1
 8013c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c8e:	f7ec fb0f 	bl	80002b0 <__aeabi_dsub>
 8013c92:	4652      	mov	r2, sl
 8013c94:	465b      	mov	r3, fp
 8013c96:	f7ec fb0d 	bl	80002b4 <__adddf3>
 8013c9a:	e9c4 6700 	strd	r6, r7, [r4]
 8013c9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ca2:	e755      	b.n	8013b50 <__kernel_rem_pio2+0x518>
 8013ca4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013cac:	f7ec fb02 	bl	80002b4 <__adddf3>
 8013cb0:	e758      	b.n	8013b64 <__kernel_rem_pio2+0x52c>
 8013cb2:	bf00      	nop
 8013cb4:	f3af 8000 	nop.w
	...
 8013cc0:	41700000 	.word	0x41700000
 8013cc4:	3e700000 	.word	0x3e700000
 8013cc8:	9b04      	ldr	r3, [sp, #16]
 8013cca:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013cce:	9a04      	ldr	r2, [sp, #16]
 8013cd0:	601f      	str	r7, [r3, #0]
 8013cd2:	605c      	str	r4, [r3, #4]
 8013cd4:	609d      	str	r5, [r3, #8]
 8013cd6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013cda:	6110      	str	r0, [r2, #16]
 8013cdc:	60d3      	str	r3, [r2, #12]
 8013cde:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ce2:	6153      	str	r3, [r2, #20]
 8013ce4:	e719      	b.n	8013b1a <__kernel_rem_pio2+0x4e2>
 8013ce6:	bf00      	nop

08013ce8 <floor>:
 8013ce8:	ec51 0b10 	vmov	r0, r1, d0
 8013cec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013cf8:	460c      	mov	r4, r1
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	2e13      	cmp	r6, #19
 8013d00:	dc35      	bgt.n	8013d6e <floor+0x86>
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	da17      	bge.n	8013d36 <floor+0x4e>
 8013d06:	a334      	add	r3, pc, #208	@ (adr r3, 8013dd8 <floor+0xf0>)
 8013d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0c:	f7ec fad2 	bl	80002b4 <__adddf3>
 8013d10:	2200      	movs	r2, #0
 8013d12:	2300      	movs	r3, #0
 8013d14:	f7ec ff14 	bl	8000b40 <__aeabi_dcmpgt>
 8013d18:	b150      	cbz	r0, 8013d30 <floor+0x48>
 8013d1a:	2c00      	cmp	r4, #0
 8013d1c:	da56      	bge.n	8013dcc <floor+0xe4>
 8013d1e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013d22:	432c      	orrs	r4, r5
 8013d24:	2500      	movs	r5, #0
 8013d26:	42ac      	cmp	r4, r5
 8013d28:	4c2d      	ldr	r4, [pc, #180]	@ (8013de0 <floor+0xf8>)
 8013d2a:	bf08      	it	eq
 8013d2c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013d30:	4621      	mov	r1, r4
 8013d32:	4628      	mov	r0, r5
 8013d34:	e024      	b.n	8013d80 <floor+0x98>
 8013d36:	4f2b      	ldr	r7, [pc, #172]	@ (8013de4 <floor+0xfc>)
 8013d38:	4137      	asrs	r7, r6
 8013d3a:	ea01 0307 	and.w	r3, r1, r7
 8013d3e:	4303      	orrs	r3, r0
 8013d40:	d01e      	beq.n	8013d80 <floor+0x98>
 8013d42:	a325      	add	r3, pc, #148	@ (adr r3, 8013dd8 <floor+0xf0>)
 8013d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d48:	f7ec fab4 	bl	80002b4 <__adddf3>
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f7ec fef6 	bl	8000b40 <__aeabi_dcmpgt>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	d0eb      	beq.n	8013d30 <floor+0x48>
 8013d58:	2c00      	cmp	r4, #0
 8013d5a:	f04f 0500 	mov.w	r5, #0
 8013d5e:	bfbe      	ittt	lt
 8013d60:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013d64:	4133      	asrlt	r3, r6
 8013d66:	18e4      	addlt	r4, r4, r3
 8013d68:	ea24 0407 	bic.w	r4, r4, r7
 8013d6c:	e7e0      	b.n	8013d30 <floor+0x48>
 8013d6e:	2e33      	cmp	r6, #51	@ 0x33
 8013d70:	dd0a      	ble.n	8013d88 <floor+0xa0>
 8013d72:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013d76:	d103      	bne.n	8013d80 <floor+0x98>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	460b      	mov	r3, r1
 8013d7c:	f7ec fa9a 	bl	80002b4 <__adddf3>
 8013d80:	ec41 0b10 	vmov	d0, r0, r1
 8013d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d88:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8013d90:	40df      	lsrs	r7, r3
 8013d92:	4207      	tst	r7, r0
 8013d94:	d0f4      	beq.n	8013d80 <floor+0x98>
 8013d96:	a310      	add	r3, pc, #64	@ (adr r3, 8013dd8 <floor+0xf0>)
 8013d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9c:	f7ec fa8a 	bl	80002b4 <__adddf3>
 8013da0:	2200      	movs	r2, #0
 8013da2:	2300      	movs	r3, #0
 8013da4:	f7ec fecc 	bl	8000b40 <__aeabi_dcmpgt>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d0c1      	beq.n	8013d30 <floor+0x48>
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	da0a      	bge.n	8013dc6 <floor+0xde>
 8013db0:	2e14      	cmp	r6, #20
 8013db2:	d101      	bne.n	8013db8 <floor+0xd0>
 8013db4:	3401      	adds	r4, #1
 8013db6:	e006      	b.n	8013dc6 <floor+0xde>
 8013db8:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	40b3      	lsls	r3, r6
 8013dc0:	441d      	add	r5, r3
 8013dc2:	4545      	cmp	r5, r8
 8013dc4:	d3f6      	bcc.n	8013db4 <floor+0xcc>
 8013dc6:	ea25 0507 	bic.w	r5, r5, r7
 8013dca:	e7b1      	b.n	8013d30 <floor+0x48>
 8013dcc:	2500      	movs	r5, #0
 8013dce:	462c      	mov	r4, r5
 8013dd0:	e7ae      	b.n	8013d30 <floor+0x48>
 8013dd2:	bf00      	nop
 8013dd4:	f3af 8000 	nop.w
 8013dd8:	8800759c 	.word	0x8800759c
 8013ddc:	7e37e43c 	.word	0x7e37e43c
 8013de0:	bff00000 	.word	0xbff00000
 8013de4:	000fffff 	.word	0x000fffff

08013de8 <_init>:
 8013de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dea:	bf00      	nop
 8013dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dee:	bc08      	pop	{r3}
 8013df0:	469e      	mov	lr, r3
 8013df2:	4770      	bx	lr

08013df4 <_fini>:
 8013df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df6:	bf00      	nop
 8013df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dfa:	bc08      	pop	{r3}
 8013dfc:	469e      	mov	lr, r3
 8013dfe:	4770      	bx	lr
